{
  "contracts": {
    "0x111111111-1717590038739-TimeCoin.sol": {
      "Context": {
        "abi": [],
        "devdoc": {
          "kind": "dev",
          "methods": {},
          "version": 1
        },
        "evm": {
          "assembly": "",
          "bytecode": {
            "functionDebugData": {},
            "generatedSources": [],
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "functionDebugData": {},
            "generatedSources": [],
            "immutableReferences": {},
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "legacyAssembly": null,
          "methodIdentifiers": {}
        },
        "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x111111111-1717590038739-TimeCoin.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x111111111-1717590038739-TimeCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\\ncontract TimeCoin is ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    string private _name = \\\"Time Coin\\\";\\n    string private _symbol = \\\"TIME\\\";\\n    uint256 private _totalSupply;\\n\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n\\n    uint256 public buyTax;\\n    uint256 public sellTax;\\n\\n    uint256 public buyLimit;\\n    uint256 public sellLimit;\\n    uint256 public transferLimit;\\n\\n    uint256 public nextTransactionTimeGap = 2 minutes;\\n\\n    address public feeReceiver;\\n\\n    constructor() ERC20(_name, _symbol) Ownable(_msgSender()) {\\n        _totalSupply = 1000000 * 10**decimals();\\n\\n        _mint(_msgSender(), _totalSupply);\\n\\n        buyTax = 3;\\n        sellTax = 5;\\n\\n        buyLimit = 2;\\n        sellLimit = 5;\\n        transferLimit = 10;\\n\\n        feeReceiver = _msgSender();\\n    }\\n\\n    function isContract(address _addr) private view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    modifier limitProtect(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) {\\n        uint256 limit = transferLimit;\\n        string memory _type = \\\"transfer\\\";\\n\\n        if (isContract(sender)) {\\n            limit = buyLimit;\\n            _type = \\\"buy\\\";\\n        } else if (isContract(recipient)) {\\n            limit = sellLimit;\\n            _type = \\\"sell\\\";\\n        } else {\\n            limit = transferLimit;\\n            _type = \\\"transfer\\\";\\n        }\\n\\n        require(\\n            limit >= amount,\\n            string(\\n                abi.encode(\\n                    \\\"The transfer amount of \\\",\\n                    amount,\\n                    \\\" exceeds the allowed \\\",\\n                    _type,\\n                    \\\" limit. The maximum allowed amount is \\\",\\n                    limit\\n                )\\n            )\\n        );\\n\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function updateTransactionTimeLimit(uint256 _seconds) external onlyOwner {\\n        nextTransactionTimeGap = _seconds;\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        limitProtect(msg.sender, recipient, amount)\\n        returns (bool)\\n    {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n\\n        return _transferFrom(_msgSender(), recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(sender != address(0), \\\"Invalid sender\\\");\\n\\n        uint256 currentAllowance = allowance(sender, _msgSender());\\n        require(currentAllowance >= amount, \\\"Insufficient Allowance\\\");\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal limitProtect(sender, recipient, amount) returns (bool) {\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n\\n        uint256 amountReceived = takeFee(sender, amount);\\n        _transfer(sender, recipient, amountReceived);\\n\\n        return true;\\n    }\\n\\n    function takeFee(address sender, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 fee = sender == _msgSender() ? sellTax : buyTax;\\n\\n        uint256 feeAmount = amount.mul(fee).div(FEE_DENOMINATOR);\\n        uint256 transferable_amount = amount.sub(feeAmount);\\n\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n        _transfer(sender, feeReceiver, feeAmount);\\n\\n        return transferable_amount;\\n    }\\n\\n    function manualSend() external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n        payable(feeReceiver).transfer(address(this).balance);\\n    }\\n\\n    function clearStuckToken(address tokenAddress, uint256 tokens)\\n        external\\n        returns (bool success)\\n    {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n\\n        if (tokens == 0) {\\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\\n        }\\n        return ERC20(tokenAddress).transfer(feeReceiver, tokens);\\n    }\\n\\n    function setFee(uint256 _buy, uint256 _sell) external onlyOwner {\\n        buyTax = _buy;\\n        sellTax = _sell;\\n    }\\n\\n    function setFeeReceiver(address _feeReceiver) external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"You are not allowed to set fee receiver\\\"\\n        );\\n\\n        feeReceiver = _feeReceiver;\\n    }\\n}\\n\",\"keccak256\":\"0x3937153cc3ab762c15a8fa4472c529f91e8606e221f925eb4a59adae85f54f3f\",\"license\":\"MIT\"}},\"version\":1}",
        "storageLayout": {
          "storage": [],
          "types": null
        },
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        }
      },
      "ERC20": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "allowance",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "needed",
                "type": "uint256"
              }
            ],
            "name": "ERC20InsufficientAllowance",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "balance",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "needed",
                "type": "uint256"
              }
            ],
            "name": "ERC20InsufficientBalance",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "approver",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidApprover",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidReceiver",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidSender",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidSpender",
            "type": "error"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint8",
                "name": "",
                "type": "uint8"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "devdoc": {
          "errors": {
            "ERC20InsufficientAllowance(address,uint256,uint256)": [
              {
                "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
                "params": {
                  "allowance": "Amount of tokens a `spender` is allowed to operate with.",
                  "needed": "Minimum amount required to perform a transfer.",
                  "spender": "Address that may be allowed to operate on tokens without being their owner."
                }
              }
            ],
            "ERC20InsufficientBalance(address,uint256,uint256)": [
              {
                "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
                "params": {
                  "balance": "Current balance for the interacting account.",
                  "needed": "Minimum amount required to perform a transfer.",
                  "sender": "Address whose tokens are being transferred."
                }
              }
            ],
            "ERC20InvalidApprover(address)": [
              {
                "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
                "params": {
                  "approver": "Address initiating an approval operation."
                }
              }
            ],
            "ERC20InvalidReceiver(address)": [
              {
                "details": "Indicates a failure with the token `receiver`. Used in transfers.",
                "params": {
                  "receiver": "Address to which tokens are being transferred."
                }
              }
            ],
            "ERC20InvalidSender(address)": [
              {
                "details": "Indicates a failure with the token `sender`. Used in transfers.",
                "params": {
                  "sender": "Address whose tokens are being transferred."
                }
              }
            ],
            "ERC20InvalidSpender(address)": [
              {
                "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
                "params": {
                  "spender": "Address that may be allowed to operate on tokens without being their owner."
                }
              }
            ]
          },
          "events": {
            "Approval(address,address,uint256)": {
              "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
            },
            "Transfer(address,address,uint256)": {
              "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
            }
          },
          "kind": "dev",
          "methods": {
            "allowance(address,address)": {
              "details": "See {IERC20-allowance}."
            },
            "approve(address,uint256)": {
              "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
            },
            "balanceOf(address)": {
              "details": "See {IERC20-balanceOf}."
            },
            "constructor": {
              "details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
            },
            "decimals()": {
              "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
            },
            "name()": {
              "details": "Returns the name of the token."
            },
            "symbol()": {
              "details": "Returns the symbol of the token, usually a shorter version of the name."
            },
            "totalSupply()": {
              "details": "See {IERC20-totalSupply}."
            },
            "transfer(address,uint256)": {
              "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
            },
            "transferFrom(address,address,uint256)": {
              "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
            }
          },
          "version": 1
        },
        "evm": {
          "assembly": "",
          "bytecode": {
            "functionDebugData": {},
            "generatedSources": [],
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "functionDebugData": {},
            "generatedSources": [],
            "immutableReferences": {},
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "legacyAssembly": null,
          "methodIdentifiers": {
            "allowance(address,address)": "dd62ed3e",
            "approve(address,uint256)": "095ea7b3",
            "balanceOf(address)": "70a08231",
            "decimals()": "313ce567",
            "name()": "06fdde03",
            "symbol()": "95d89b41",
            "totalSupply()": "18160ddd",
            "transfer(address,uint256)": "a9059cbb",
            "transferFrom(address,address,uint256)": "23b872dd"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x111111111-1717590038739-TimeCoin.sol\":\"ERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x111111111-1717590038739-TimeCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\\ncontract TimeCoin is ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    string private _name = \\\"Time Coin\\\";\\n    string private _symbol = \\\"TIME\\\";\\n    uint256 private _totalSupply;\\n\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n\\n    uint256 public buyTax;\\n    uint256 public sellTax;\\n\\n    uint256 public buyLimit;\\n    uint256 public sellLimit;\\n    uint256 public transferLimit;\\n\\n    uint256 public nextTransactionTimeGap = 2 minutes;\\n\\n    address public feeReceiver;\\n\\n    constructor() ERC20(_name, _symbol) Ownable(_msgSender()) {\\n        _totalSupply = 1000000 * 10**decimals();\\n\\n        _mint(_msgSender(), _totalSupply);\\n\\n        buyTax = 3;\\n        sellTax = 5;\\n\\n        buyLimit = 2;\\n        sellLimit = 5;\\n        transferLimit = 10;\\n\\n        feeReceiver = _msgSender();\\n    }\\n\\n    function isContract(address _addr) private view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    modifier limitProtect(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) {\\n        uint256 limit = transferLimit;\\n        string memory _type = \\\"transfer\\\";\\n\\n        if (isContract(sender)) {\\n            limit = buyLimit;\\n            _type = \\\"buy\\\";\\n        } else if (isContract(recipient)) {\\n            limit = sellLimit;\\n            _type = \\\"sell\\\";\\n        } else {\\n            limit = transferLimit;\\n            _type = \\\"transfer\\\";\\n        }\\n\\n        require(\\n            limit >= amount,\\n            string(\\n                abi.encode(\\n                    \\\"The transfer amount of \\\",\\n                    amount,\\n                    \\\" exceeds the allowed \\\",\\n                    _type,\\n                    \\\" limit. The maximum allowed amount is \\\",\\n                    limit\\n                )\\n            )\\n        );\\n\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function updateTransactionTimeLimit(uint256 _seconds) external onlyOwner {\\n        nextTransactionTimeGap = _seconds;\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        limitProtect(msg.sender, recipient, amount)\\n        returns (bool)\\n    {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n\\n        return _transferFrom(_msgSender(), recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(sender != address(0), \\\"Invalid sender\\\");\\n\\n        uint256 currentAllowance = allowance(sender, _msgSender());\\n        require(currentAllowance >= amount, \\\"Insufficient Allowance\\\");\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal limitProtect(sender, recipient, amount) returns (bool) {\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n\\n        uint256 amountReceived = takeFee(sender, amount);\\n        _transfer(sender, recipient, amountReceived);\\n\\n        return true;\\n    }\\n\\n    function takeFee(address sender, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 fee = sender == _msgSender() ? sellTax : buyTax;\\n\\n        uint256 feeAmount = amount.mul(fee).div(FEE_DENOMINATOR);\\n        uint256 transferable_amount = amount.sub(feeAmount);\\n\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n        _transfer(sender, feeReceiver, feeAmount);\\n\\n        return transferable_amount;\\n    }\\n\\n    function manualSend() external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n        payable(feeReceiver).transfer(address(this).balance);\\n    }\\n\\n    function clearStuckToken(address tokenAddress, uint256 tokens)\\n        external\\n        returns (bool success)\\n    {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n\\n        if (tokens == 0) {\\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\\n        }\\n        return ERC20(tokenAddress).transfer(feeReceiver, tokens);\\n    }\\n\\n    function setFee(uint256 _buy, uint256 _sell) external onlyOwner {\\n        buyTax = _buy;\\n        sellTax = _sell;\\n    }\\n\\n    function setFeeReceiver(address _feeReceiver) external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"You are not allowed to set fee receiver\\\"\\n        );\\n\\n        feeReceiver = _feeReceiver;\\n    }\\n}\\n\",\"keccak256\":\"0x3937153cc3ab762c15a8fa4472c529f91e8606e221f925eb4a59adae85f54f3f\",\"license\":\"MIT\"}},\"version\":1}",
        "storageLayout": {
          "storage": [
            {
              "astId": 720,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:ERC20",
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)"
            },
            {
              "astId": 726,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:ERC20",
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
            },
            {
              "astId": 728,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:ERC20",
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256"
            },
            {
              "astId": 730,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:ERC20",
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage"
            },
            {
              "astId": 732,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:ERC20",
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage"
            }
          ],
          "types": {
            "t_address": {
              "encoding": "inplace",
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32",
              "value": "t_mapping(t_address,t_uint256)"
            },
            "t_mapping(t_address,t_uint256)": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32",
              "value": "t_uint256"
            },
            "t_string_storage": {
              "encoding": "bytes",
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "encoding": "inplace",
              "label": "uint256",
              "numberOfBytes": "32"
            }
          }
        },
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        }
      },
      "IERC1155Errors": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "balance",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "needed",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "tokenId",
                "type": "uint256"
              }
            ],
            "name": "ERC1155InsufficientBalance",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "approver",
                "type": "address"
              }
            ],
            "name": "ERC1155InvalidApprover",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "idsLength",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "valuesLength",
                "type": "uint256"
              }
            ],
            "name": "ERC1155InvalidArrayLength",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "operator",
                "type": "address"
              }
            ],
            "name": "ERC1155InvalidOperator",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              }
            ],
            "name": "ERC1155InvalidReceiver",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              }
            ],
            "name": "ERC1155InvalidSender",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "operator",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "name": "ERC1155MissingApprovalForAll",
            "type": "error"
          }
        ],
        "devdoc": {
          "errors": {
            "ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
              {
                "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
                "params": {
                  "balance": "Current balance for the interacting account.",
                  "needed": "Minimum amount required to perform a transfer.",
                  "sender": "Address whose tokens are being transferred.",
                  "tokenId": "Identifier number of a token."
                }
              }
            ],
            "ERC1155InvalidApprover(address)": [
              {
                "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
                "params": {
                  "approver": "Address initiating an approval operation."
                }
              }
            ],
            "ERC1155InvalidArrayLength(uint256,uint256)": [
              {
                "details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
                "params": {
                  "idsLength": "Length of the array of token identifiers",
                  "valuesLength": "Length of the array of token amounts"
                }
              }
            ],
            "ERC1155InvalidOperator(address)": [
              {
                "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
                "params": {
                  "operator": "Address that may be allowed to operate on tokens without being their owner."
                }
              }
            ],
            "ERC1155InvalidReceiver(address)": [
              {
                "details": "Indicates a failure with the token `receiver`. Used in transfers.",
                "params": {
                  "receiver": "Address to which tokens are being transferred."
                }
              }
            ],
            "ERC1155InvalidSender(address)": [
              {
                "details": "Indicates a failure with the token `sender`. Used in transfers.",
                "params": {
                  "sender": "Address whose tokens are being transferred."
                }
              }
            ],
            "ERC1155MissingApprovalForAll(address,address)": [
              {
                "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
                "params": {
                  "operator": "Address that may be allowed to operate on tokens without being their owner.",
                  "owner": "Address of the current owner of a token."
                }
              }
            ]
          },
          "kind": "dev",
          "methods": {},
          "version": 1
        },
        "evm": {
          "assembly": "",
          "bytecode": {
            "functionDebugData": {},
            "generatedSources": [],
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "functionDebugData": {},
            "generatedSources": [],
            "immutableReferences": {},
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "legacyAssembly": null,
          "methodIdentifiers": {}
        },
        "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x111111111-1717590038739-TimeCoin.sol\":\"IERC1155Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x111111111-1717590038739-TimeCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\\ncontract TimeCoin is ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    string private _name = \\\"Time Coin\\\";\\n    string private _symbol = \\\"TIME\\\";\\n    uint256 private _totalSupply;\\n\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n\\n    uint256 public buyTax;\\n    uint256 public sellTax;\\n\\n    uint256 public buyLimit;\\n    uint256 public sellLimit;\\n    uint256 public transferLimit;\\n\\n    uint256 public nextTransactionTimeGap = 2 minutes;\\n\\n    address public feeReceiver;\\n\\n    constructor() ERC20(_name, _symbol) Ownable(_msgSender()) {\\n        _totalSupply = 1000000 * 10**decimals();\\n\\n        _mint(_msgSender(), _totalSupply);\\n\\n        buyTax = 3;\\n        sellTax = 5;\\n\\n        buyLimit = 2;\\n        sellLimit = 5;\\n        transferLimit = 10;\\n\\n        feeReceiver = _msgSender();\\n    }\\n\\n    function isContract(address _addr) private view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    modifier limitProtect(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) {\\n        uint256 limit = transferLimit;\\n        string memory _type = \\\"transfer\\\";\\n\\n        if (isContract(sender)) {\\n            limit = buyLimit;\\n            _type = \\\"buy\\\";\\n        } else if (isContract(recipient)) {\\n            limit = sellLimit;\\n            _type = \\\"sell\\\";\\n        } else {\\n            limit = transferLimit;\\n            _type = \\\"transfer\\\";\\n        }\\n\\n        require(\\n            limit >= amount,\\n            string(\\n                abi.encode(\\n                    \\\"The transfer amount of \\\",\\n                    amount,\\n                    \\\" exceeds the allowed \\\",\\n                    _type,\\n                    \\\" limit. The maximum allowed amount is \\\",\\n                    limit\\n                )\\n            )\\n        );\\n\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function updateTransactionTimeLimit(uint256 _seconds) external onlyOwner {\\n        nextTransactionTimeGap = _seconds;\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        limitProtect(msg.sender, recipient, amount)\\n        returns (bool)\\n    {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n\\n        return _transferFrom(_msgSender(), recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(sender != address(0), \\\"Invalid sender\\\");\\n\\n        uint256 currentAllowance = allowance(sender, _msgSender());\\n        require(currentAllowance >= amount, \\\"Insufficient Allowance\\\");\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal limitProtect(sender, recipient, amount) returns (bool) {\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n\\n        uint256 amountReceived = takeFee(sender, amount);\\n        _transfer(sender, recipient, amountReceived);\\n\\n        return true;\\n    }\\n\\n    function takeFee(address sender, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 fee = sender == _msgSender() ? sellTax : buyTax;\\n\\n        uint256 feeAmount = amount.mul(fee).div(FEE_DENOMINATOR);\\n        uint256 transferable_amount = amount.sub(feeAmount);\\n\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n        _transfer(sender, feeReceiver, feeAmount);\\n\\n        return transferable_amount;\\n    }\\n\\n    function manualSend() external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n        payable(feeReceiver).transfer(address(this).balance);\\n    }\\n\\n    function clearStuckToken(address tokenAddress, uint256 tokens)\\n        external\\n        returns (bool success)\\n    {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n\\n        if (tokens == 0) {\\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\\n        }\\n        return ERC20(tokenAddress).transfer(feeReceiver, tokens);\\n    }\\n\\n    function setFee(uint256 _buy, uint256 _sell) external onlyOwner {\\n        buyTax = _buy;\\n        sellTax = _sell;\\n    }\\n\\n    function setFeeReceiver(address _feeReceiver) external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"You are not allowed to set fee receiver\\\"\\n        );\\n\\n        feeReceiver = _feeReceiver;\\n    }\\n}\\n\",\"keccak256\":\"0x3937153cc3ab762c15a8fa4472c529f91e8606e221f925eb4a59adae85f54f3f\",\"license\":\"MIT\"}},\"version\":1}",
        "storageLayout": {
          "storage": [],
          "types": null
        },
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        }
      },
      "IERC20": {
        "abi": [
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "devdoc": {
          "events": {
            "Approval(address,address,uint256)": {
              "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
            },
            "Transfer(address,address,uint256)": {
              "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
            }
          },
          "kind": "dev",
          "methods": {
            "allowance(address,address)": {
              "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
            },
            "approve(address,uint256)": {
              "details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
            },
            "balanceOf(address)": {
              "details": "Returns the value of tokens owned by `account`."
            },
            "totalSupply()": {
              "details": "Returns the value of tokens in existence."
            },
            "transfer(address,uint256)": {
              "details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
            },
            "transferFrom(address,address,uint256)": {
              "details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
            }
          },
          "version": 1
        },
        "evm": {
          "assembly": "",
          "bytecode": {
            "functionDebugData": {},
            "generatedSources": [],
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "functionDebugData": {},
            "generatedSources": [],
            "immutableReferences": {},
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "legacyAssembly": null,
          "methodIdentifiers": {
            "allowance(address,address)": "dd62ed3e",
            "approve(address,uint256)": "095ea7b3",
            "balanceOf(address)": "70a08231",
            "totalSupply()": "18160ddd",
            "transfer(address,uint256)": "a9059cbb",
            "transferFrom(address,address,uint256)": "23b872dd"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x111111111-1717590038739-TimeCoin.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x111111111-1717590038739-TimeCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\\ncontract TimeCoin is ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    string private _name = \\\"Time Coin\\\";\\n    string private _symbol = \\\"TIME\\\";\\n    uint256 private _totalSupply;\\n\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n\\n    uint256 public buyTax;\\n    uint256 public sellTax;\\n\\n    uint256 public buyLimit;\\n    uint256 public sellLimit;\\n    uint256 public transferLimit;\\n\\n    uint256 public nextTransactionTimeGap = 2 minutes;\\n\\n    address public feeReceiver;\\n\\n    constructor() ERC20(_name, _symbol) Ownable(_msgSender()) {\\n        _totalSupply = 1000000 * 10**decimals();\\n\\n        _mint(_msgSender(), _totalSupply);\\n\\n        buyTax = 3;\\n        sellTax = 5;\\n\\n        buyLimit = 2;\\n        sellLimit = 5;\\n        transferLimit = 10;\\n\\n        feeReceiver = _msgSender();\\n    }\\n\\n    function isContract(address _addr) private view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    modifier limitProtect(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) {\\n        uint256 limit = transferLimit;\\n        string memory _type = \\\"transfer\\\";\\n\\n        if (isContract(sender)) {\\n            limit = buyLimit;\\n            _type = \\\"buy\\\";\\n        } else if (isContract(recipient)) {\\n            limit = sellLimit;\\n            _type = \\\"sell\\\";\\n        } else {\\n            limit = transferLimit;\\n            _type = \\\"transfer\\\";\\n        }\\n\\n        require(\\n            limit >= amount,\\n            string(\\n                abi.encode(\\n                    \\\"The transfer amount of \\\",\\n                    amount,\\n                    \\\" exceeds the allowed \\\",\\n                    _type,\\n                    \\\" limit. The maximum allowed amount is \\\",\\n                    limit\\n                )\\n            )\\n        );\\n\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function updateTransactionTimeLimit(uint256 _seconds) external onlyOwner {\\n        nextTransactionTimeGap = _seconds;\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        limitProtect(msg.sender, recipient, amount)\\n        returns (bool)\\n    {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n\\n        return _transferFrom(_msgSender(), recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(sender != address(0), \\\"Invalid sender\\\");\\n\\n        uint256 currentAllowance = allowance(sender, _msgSender());\\n        require(currentAllowance >= amount, \\\"Insufficient Allowance\\\");\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal limitProtect(sender, recipient, amount) returns (bool) {\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n\\n        uint256 amountReceived = takeFee(sender, amount);\\n        _transfer(sender, recipient, amountReceived);\\n\\n        return true;\\n    }\\n\\n    function takeFee(address sender, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 fee = sender == _msgSender() ? sellTax : buyTax;\\n\\n        uint256 feeAmount = amount.mul(fee).div(FEE_DENOMINATOR);\\n        uint256 transferable_amount = amount.sub(feeAmount);\\n\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n        _transfer(sender, feeReceiver, feeAmount);\\n\\n        return transferable_amount;\\n    }\\n\\n    function manualSend() external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n        payable(feeReceiver).transfer(address(this).balance);\\n    }\\n\\n    function clearStuckToken(address tokenAddress, uint256 tokens)\\n        external\\n        returns (bool success)\\n    {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n\\n        if (tokens == 0) {\\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\\n        }\\n        return ERC20(tokenAddress).transfer(feeReceiver, tokens);\\n    }\\n\\n    function setFee(uint256 _buy, uint256 _sell) external onlyOwner {\\n        buyTax = _buy;\\n        sellTax = _sell;\\n    }\\n\\n    function setFeeReceiver(address _feeReceiver) external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"You are not allowed to set fee receiver\\\"\\n        );\\n\\n        feeReceiver = _feeReceiver;\\n    }\\n}\\n\",\"keccak256\":\"0x3937153cc3ab762c15a8fa4472c529f91e8606e221f925eb4a59adae85f54f3f\",\"license\":\"MIT\"}},\"version\":1}",
        "storageLayout": {
          "storage": [],
          "types": null
        },
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        }
      },
      "IERC20Errors": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "allowance",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "needed",
                "type": "uint256"
              }
            ],
            "name": "ERC20InsufficientAllowance",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "balance",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "needed",
                "type": "uint256"
              }
            ],
            "name": "ERC20InsufficientBalance",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "approver",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidApprover",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidReceiver",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidSender",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidSpender",
            "type": "error"
          }
        ],
        "devdoc": {
          "errors": {
            "ERC20InsufficientAllowance(address,uint256,uint256)": [
              {
                "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
                "params": {
                  "allowance": "Amount of tokens a `spender` is allowed to operate with.",
                  "needed": "Minimum amount required to perform a transfer.",
                  "spender": "Address that may be allowed to operate on tokens without being their owner."
                }
              }
            ],
            "ERC20InsufficientBalance(address,uint256,uint256)": [
              {
                "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
                "params": {
                  "balance": "Current balance for the interacting account.",
                  "needed": "Minimum amount required to perform a transfer.",
                  "sender": "Address whose tokens are being transferred."
                }
              }
            ],
            "ERC20InvalidApprover(address)": [
              {
                "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
                "params": {
                  "approver": "Address initiating an approval operation."
                }
              }
            ],
            "ERC20InvalidReceiver(address)": [
              {
                "details": "Indicates a failure with the token `receiver`. Used in transfers.",
                "params": {
                  "receiver": "Address to which tokens are being transferred."
                }
              }
            ],
            "ERC20InvalidSender(address)": [
              {
                "details": "Indicates a failure with the token `sender`. Used in transfers.",
                "params": {
                  "sender": "Address whose tokens are being transferred."
                }
              }
            ],
            "ERC20InvalidSpender(address)": [
              {
                "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
                "params": {
                  "spender": "Address that may be allowed to operate on tokens without being their owner."
                }
              }
            ]
          },
          "kind": "dev",
          "methods": {},
          "version": 1
        },
        "evm": {
          "assembly": "",
          "bytecode": {
            "functionDebugData": {},
            "generatedSources": [],
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "functionDebugData": {},
            "generatedSources": [],
            "immutableReferences": {},
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "legacyAssembly": null,
          "methodIdentifiers": {}
        },
        "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x111111111-1717590038739-TimeCoin.sol\":\"IERC20Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x111111111-1717590038739-TimeCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\\ncontract TimeCoin is ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    string private _name = \\\"Time Coin\\\";\\n    string private _symbol = \\\"TIME\\\";\\n    uint256 private _totalSupply;\\n\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n\\n    uint256 public buyTax;\\n    uint256 public sellTax;\\n\\n    uint256 public buyLimit;\\n    uint256 public sellLimit;\\n    uint256 public transferLimit;\\n\\n    uint256 public nextTransactionTimeGap = 2 minutes;\\n\\n    address public feeReceiver;\\n\\n    constructor() ERC20(_name, _symbol) Ownable(_msgSender()) {\\n        _totalSupply = 1000000 * 10**decimals();\\n\\n        _mint(_msgSender(), _totalSupply);\\n\\n        buyTax = 3;\\n        sellTax = 5;\\n\\n        buyLimit = 2;\\n        sellLimit = 5;\\n        transferLimit = 10;\\n\\n        feeReceiver = _msgSender();\\n    }\\n\\n    function isContract(address _addr) private view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    modifier limitProtect(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) {\\n        uint256 limit = transferLimit;\\n        string memory _type = \\\"transfer\\\";\\n\\n        if (isContract(sender)) {\\n            limit = buyLimit;\\n            _type = \\\"buy\\\";\\n        } else if (isContract(recipient)) {\\n            limit = sellLimit;\\n            _type = \\\"sell\\\";\\n        } else {\\n            limit = transferLimit;\\n            _type = \\\"transfer\\\";\\n        }\\n\\n        require(\\n            limit >= amount,\\n            string(\\n                abi.encode(\\n                    \\\"The transfer amount of \\\",\\n                    amount,\\n                    \\\" exceeds the allowed \\\",\\n                    _type,\\n                    \\\" limit. The maximum allowed amount is \\\",\\n                    limit\\n                )\\n            )\\n        );\\n\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function updateTransactionTimeLimit(uint256 _seconds) external onlyOwner {\\n        nextTransactionTimeGap = _seconds;\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        limitProtect(msg.sender, recipient, amount)\\n        returns (bool)\\n    {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n\\n        return _transferFrom(_msgSender(), recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(sender != address(0), \\\"Invalid sender\\\");\\n\\n        uint256 currentAllowance = allowance(sender, _msgSender());\\n        require(currentAllowance >= amount, \\\"Insufficient Allowance\\\");\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal limitProtect(sender, recipient, amount) returns (bool) {\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n\\n        uint256 amountReceived = takeFee(sender, amount);\\n        _transfer(sender, recipient, amountReceived);\\n\\n        return true;\\n    }\\n\\n    function takeFee(address sender, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 fee = sender == _msgSender() ? sellTax : buyTax;\\n\\n        uint256 feeAmount = amount.mul(fee).div(FEE_DENOMINATOR);\\n        uint256 transferable_amount = amount.sub(feeAmount);\\n\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n        _transfer(sender, feeReceiver, feeAmount);\\n\\n        return transferable_amount;\\n    }\\n\\n    function manualSend() external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n        payable(feeReceiver).transfer(address(this).balance);\\n    }\\n\\n    function clearStuckToken(address tokenAddress, uint256 tokens)\\n        external\\n        returns (bool success)\\n    {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n\\n        if (tokens == 0) {\\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\\n        }\\n        return ERC20(tokenAddress).transfer(feeReceiver, tokens);\\n    }\\n\\n    function setFee(uint256 _buy, uint256 _sell) external onlyOwner {\\n        buyTax = _buy;\\n        sellTax = _sell;\\n    }\\n\\n    function setFeeReceiver(address _feeReceiver) external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"You are not allowed to set fee receiver\\\"\\n        );\\n\\n        feeReceiver = _feeReceiver;\\n    }\\n}\\n\",\"keccak256\":\"0x3937153cc3ab762c15a8fa4472c529f91e8606e221f925eb4a59adae85f54f3f\",\"license\":\"MIT\"}},\"version\":1}",
        "storageLayout": {
          "storage": [],
          "types": null
        },
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        }
      },
      "IERC20Metadata": {
        "abi": [
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint8",
                "name": "",
                "type": "uint8"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "devdoc": {
          "events": {
            "Approval(address,address,uint256)": {
              "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
            },
            "Transfer(address,address,uint256)": {
              "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
            }
          },
          "kind": "dev",
          "methods": {
            "allowance(address,address)": {
              "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
            },
            "approve(address,uint256)": {
              "details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
            },
            "balanceOf(address)": {
              "details": "Returns the value of tokens owned by `account`."
            },
            "decimals()": {
              "details": "Returns the decimals places of the token."
            },
            "name()": {
              "details": "Returns the name of the token."
            },
            "symbol()": {
              "details": "Returns the symbol of the token."
            },
            "totalSupply()": {
              "details": "Returns the value of tokens in existence."
            },
            "transfer(address,uint256)": {
              "details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
            },
            "transferFrom(address,address,uint256)": {
              "details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
            }
          },
          "version": 1
        },
        "evm": {
          "assembly": "",
          "bytecode": {
            "functionDebugData": {},
            "generatedSources": [],
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "functionDebugData": {},
            "generatedSources": [],
            "immutableReferences": {},
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "legacyAssembly": null,
          "methodIdentifiers": {
            "allowance(address,address)": "dd62ed3e",
            "approve(address,uint256)": "095ea7b3",
            "balanceOf(address)": "70a08231",
            "decimals()": "313ce567",
            "name()": "06fdde03",
            "symbol()": "95d89b41",
            "totalSupply()": "18160ddd",
            "transfer(address,uint256)": "a9059cbb",
            "transferFrom(address,address,uint256)": "23b872dd"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x111111111-1717590038739-TimeCoin.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x111111111-1717590038739-TimeCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\\ncontract TimeCoin is ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    string private _name = \\\"Time Coin\\\";\\n    string private _symbol = \\\"TIME\\\";\\n    uint256 private _totalSupply;\\n\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n\\n    uint256 public buyTax;\\n    uint256 public sellTax;\\n\\n    uint256 public buyLimit;\\n    uint256 public sellLimit;\\n    uint256 public transferLimit;\\n\\n    uint256 public nextTransactionTimeGap = 2 minutes;\\n\\n    address public feeReceiver;\\n\\n    constructor() ERC20(_name, _symbol) Ownable(_msgSender()) {\\n        _totalSupply = 1000000 * 10**decimals();\\n\\n        _mint(_msgSender(), _totalSupply);\\n\\n        buyTax = 3;\\n        sellTax = 5;\\n\\n        buyLimit = 2;\\n        sellLimit = 5;\\n        transferLimit = 10;\\n\\n        feeReceiver = _msgSender();\\n    }\\n\\n    function isContract(address _addr) private view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    modifier limitProtect(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) {\\n        uint256 limit = transferLimit;\\n        string memory _type = \\\"transfer\\\";\\n\\n        if (isContract(sender)) {\\n            limit = buyLimit;\\n            _type = \\\"buy\\\";\\n        } else if (isContract(recipient)) {\\n            limit = sellLimit;\\n            _type = \\\"sell\\\";\\n        } else {\\n            limit = transferLimit;\\n            _type = \\\"transfer\\\";\\n        }\\n\\n        require(\\n            limit >= amount,\\n            string(\\n                abi.encode(\\n                    \\\"The transfer amount of \\\",\\n                    amount,\\n                    \\\" exceeds the allowed \\\",\\n                    _type,\\n                    \\\" limit. The maximum allowed amount is \\\",\\n                    limit\\n                )\\n            )\\n        );\\n\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function updateTransactionTimeLimit(uint256 _seconds) external onlyOwner {\\n        nextTransactionTimeGap = _seconds;\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        limitProtect(msg.sender, recipient, amount)\\n        returns (bool)\\n    {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n\\n        return _transferFrom(_msgSender(), recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(sender != address(0), \\\"Invalid sender\\\");\\n\\n        uint256 currentAllowance = allowance(sender, _msgSender());\\n        require(currentAllowance >= amount, \\\"Insufficient Allowance\\\");\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal limitProtect(sender, recipient, amount) returns (bool) {\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n\\n        uint256 amountReceived = takeFee(sender, amount);\\n        _transfer(sender, recipient, amountReceived);\\n\\n        return true;\\n    }\\n\\n    function takeFee(address sender, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 fee = sender == _msgSender() ? sellTax : buyTax;\\n\\n        uint256 feeAmount = amount.mul(fee).div(FEE_DENOMINATOR);\\n        uint256 transferable_amount = amount.sub(feeAmount);\\n\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n        _transfer(sender, feeReceiver, feeAmount);\\n\\n        return transferable_amount;\\n    }\\n\\n    function manualSend() external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n        payable(feeReceiver).transfer(address(this).balance);\\n    }\\n\\n    function clearStuckToken(address tokenAddress, uint256 tokens)\\n        external\\n        returns (bool success)\\n    {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n\\n        if (tokens == 0) {\\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\\n        }\\n        return ERC20(tokenAddress).transfer(feeReceiver, tokens);\\n    }\\n\\n    function setFee(uint256 _buy, uint256 _sell) external onlyOwner {\\n        buyTax = _buy;\\n        sellTax = _sell;\\n    }\\n\\n    function setFeeReceiver(address _feeReceiver) external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"You are not allowed to set fee receiver\\\"\\n        );\\n\\n        feeReceiver = _feeReceiver;\\n    }\\n}\\n\",\"keccak256\":\"0x3937153cc3ab762c15a8fa4472c529f91e8606e221f925eb4a59adae85f54f3f\",\"license\":\"MIT\"}},\"version\":1}",
        "storageLayout": {
          "storage": [],
          "types": null
        },
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        }
      },
      "IERC721Errors": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "tokenId",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "name": "ERC721IncorrectOwner",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "operator",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "tokenId",
                "type": "uint256"
              }
            ],
            "name": "ERC721InsufficientApproval",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "approver",
                "type": "address"
              }
            ],
            "name": "ERC721InvalidApprover",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "operator",
                "type": "address"
              }
            ],
            "name": "ERC721InvalidOperator",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "name": "ERC721InvalidOwner",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              }
            ],
            "name": "ERC721InvalidReceiver",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              }
            ],
            "name": "ERC721InvalidSender",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "tokenId",
                "type": "uint256"
              }
            ],
            "name": "ERC721NonexistentToken",
            "type": "error"
          }
        ],
        "devdoc": {
          "errors": {
            "ERC721IncorrectOwner(address,uint256,address)": [
              {
                "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
                "params": {
                  "owner": "Address of the current owner of a token.",
                  "sender": "Address whose tokens are being transferred.",
                  "tokenId": "Identifier number of a token."
                }
              }
            ],
            "ERC721InsufficientApproval(address,uint256)": [
              {
                "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
                "params": {
                  "operator": "Address that may be allowed to operate on tokens without being their owner.",
                  "tokenId": "Identifier number of a token."
                }
              }
            ],
            "ERC721InvalidApprover(address)": [
              {
                "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
                "params": {
                  "approver": "Address initiating an approval operation."
                }
              }
            ],
            "ERC721InvalidOperator(address)": [
              {
                "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
                "params": {
                  "operator": "Address that may be allowed to operate on tokens without being their owner."
                }
              }
            ],
            "ERC721InvalidOwner(address)": [
              {
                "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
                "params": {
                  "owner": "Address of the current owner of a token."
                }
              }
            ],
            "ERC721InvalidReceiver(address)": [
              {
                "details": "Indicates a failure with the token `receiver`. Used in transfers.",
                "params": {
                  "receiver": "Address to which tokens are being transferred."
                }
              }
            ],
            "ERC721InvalidSender(address)": [
              {
                "details": "Indicates a failure with the token `sender`. Used in transfers.",
                "params": {
                  "sender": "Address whose tokens are being transferred."
                }
              }
            ],
            "ERC721NonexistentToken(uint256)": [
              {
                "details": "Indicates a `tokenId` whose `owner` is the zero address.",
                "params": {
                  "tokenId": "Identifier number of a token."
                }
              }
            ]
          },
          "kind": "dev",
          "methods": {},
          "version": 1
        },
        "evm": {
          "assembly": "",
          "bytecode": {
            "functionDebugData": {},
            "generatedSources": [],
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "functionDebugData": {},
            "generatedSources": [],
            "immutableReferences": {},
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "legacyAssembly": null,
          "methodIdentifiers": {}
        },
        "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x111111111-1717590038739-TimeCoin.sol\":\"IERC721Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x111111111-1717590038739-TimeCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\\ncontract TimeCoin is ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    string private _name = \\\"Time Coin\\\";\\n    string private _symbol = \\\"TIME\\\";\\n    uint256 private _totalSupply;\\n\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n\\n    uint256 public buyTax;\\n    uint256 public sellTax;\\n\\n    uint256 public buyLimit;\\n    uint256 public sellLimit;\\n    uint256 public transferLimit;\\n\\n    uint256 public nextTransactionTimeGap = 2 minutes;\\n\\n    address public feeReceiver;\\n\\n    constructor() ERC20(_name, _symbol) Ownable(_msgSender()) {\\n        _totalSupply = 1000000 * 10**decimals();\\n\\n        _mint(_msgSender(), _totalSupply);\\n\\n        buyTax = 3;\\n        sellTax = 5;\\n\\n        buyLimit = 2;\\n        sellLimit = 5;\\n        transferLimit = 10;\\n\\n        feeReceiver = _msgSender();\\n    }\\n\\n    function isContract(address _addr) private view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    modifier limitProtect(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) {\\n        uint256 limit = transferLimit;\\n        string memory _type = \\\"transfer\\\";\\n\\n        if (isContract(sender)) {\\n            limit = buyLimit;\\n            _type = \\\"buy\\\";\\n        } else if (isContract(recipient)) {\\n            limit = sellLimit;\\n            _type = \\\"sell\\\";\\n        } else {\\n            limit = transferLimit;\\n            _type = \\\"transfer\\\";\\n        }\\n\\n        require(\\n            limit >= amount,\\n            string(\\n                abi.encode(\\n                    \\\"The transfer amount of \\\",\\n                    amount,\\n                    \\\" exceeds the allowed \\\",\\n                    _type,\\n                    \\\" limit. The maximum allowed amount is \\\",\\n                    limit\\n                )\\n            )\\n        );\\n\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function updateTransactionTimeLimit(uint256 _seconds) external onlyOwner {\\n        nextTransactionTimeGap = _seconds;\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        limitProtect(msg.sender, recipient, amount)\\n        returns (bool)\\n    {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n\\n        return _transferFrom(_msgSender(), recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(sender != address(0), \\\"Invalid sender\\\");\\n\\n        uint256 currentAllowance = allowance(sender, _msgSender());\\n        require(currentAllowance >= amount, \\\"Insufficient Allowance\\\");\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal limitProtect(sender, recipient, amount) returns (bool) {\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n\\n        uint256 amountReceived = takeFee(sender, amount);\\n        _transfer(sender, recipient, amountReceived);\\n\\n        return true;\\n    }\\n\\n    function takeFee(address sender, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 fee = sender == _msgSender() ? sellTax : buyTax;\\n\\n        uint256 feeAmount = amount.mul(fee).div(FEE_DENOMINATOR);\\n        uint256 transferable_amount = amount.sub(feeAmount);\\n\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n        _transfer(sender, feeReceiver, feeAmount);\\n\\n        return transferable_amount;\\n    }\\n\\n    function manualSend() external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n        payable(feeReceiver).transfer(address(this).balance);\\n    }\\n\\n    function clearStuckToken(address tokenAddress, uint256 tokens)\\n        external\\n        returns (bool success)\\n    {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n\\n        if (tokens == 0) {\\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\\n        }\\n        return ERC20(tokenAddress).transfer(feeReceiver, tokens);\\n    }\\n\\n    function setFee(uint256 _buy, uint256 _sell) external onlyOwner {\\n        buyTax = _buy;\\n        sellTax = _sell;\\n    }\\n\\n    function setFeeReceiver(address _feeReceiver) external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"You are not allowed to set fee receiver\\\"\\n        );\\n\\n        feeReceiver = _feeReceiver;\\n    }\\n}\\n\",\"keccak256\":\"0x3937153cc3ab762c15a8fa4472c529f91e8606e221f925eb4a59adae85f54f3f\",\"license\":\"MIT\"}},\"version\":1}",
        "storageLayout": {
          "storage": [],
          "types": null
        },
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        }
      },
      "Ownable": {
        "abi": [
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "name": "OwnableInvalidOwner",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "OwnableUnauthorizedAccount",
            "type": "error"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "previousOwner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "devdoc": {
          "errors": {
            "OwnableInvalidOwner(address)": [
              {
                "details": "The owner is not a valid owner account. (eg. `address(0)`)"
              }
            ],
            "OwnableUnauthorizedAccount(address)": [
              {
                "details": "The caller account is not authorized to perform an operation."
              }
            ]
          },
          "kind": "dev",
          "methods": {
            "constructor": {
              "details": "Initializes the contract setting the address provided by the deployer as the initial owner."
            },
            "owner()": {
              "details": "Returns the address of the current owner."
            },
            "renounceOwnership()": {
              "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
            },
            "transferOwnership(address)": {
              "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
            }
          },
          "version": 1
        },
        "evm": {
          "assembly": "",
          "bytecode": {
            "functionDebugData": {},
            "generatedSources": [],
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "functionDebugData": {},
            "generatedSources": [],
            "immutableReferences": {},
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "legacyAssembly": null,
          "methodIdentifiers": {
            "owner()": "8da5cb5b",
            "renounceOwnership()": "715018a6",
            "transferOwnership(address)": "f2fde38b"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x111111111-1717590038739-TimeCoin.sol\":\"Ownable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x111111111-1717590038739-TimeCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\\ncontract TimeCoin is ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    string private _name = \\\"Time Coin\\\";\\n    string private _symbol = \\\"TIME\\\";\\n    uint256 private _totalSupply;\\n\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n\\n    uint256 public buyTax;\\n    uint256 public sellTax;\\n\\n    uint256 public buyLimit;\\n    uint256 public sellLimit;\\n    uint256 public transferLimit;\\n\\n    uint256 public nextTransactionTimeGap = 2 minutes;\\n\\n    address public feeReceiver;\\n\\n    constructor() ERC20(_name, _symbol) Ownable(_msgSender()) {\\n        _totalSupply = 1000000 * 10**decimals();\\n\\n        _mint(_msgSender(), _totalSupply);\\n\\n        buyTax = 3;\\n        sellTax = 5;\\n\\n        buyLimit = 2;\\n        sellLimit = 5;\\n        transferLimit = 10;\\n\\n        feeReceiver = _msgSender();\\n    }\\n\\n    function isContract(address _addr) private view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    modifier limitProtect(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) {\\n        uint256 limit = transferLimit;\\n        string memory _type = \\\"transfer\\\";\\n\\n        if (isContract(sender)) {\\n            limit = buyLimit;\\n            _type = \\\"buy\\\";\\n        } else if (isContract(recipient)) {\\n            limit = sellLimit;\\n            _type = \\\"sell\\\";\\n        } else {\\n            limit = transferLimit;\\n            _type = \\\"transfer\\\";\\n        }\\n\\n        require(\\n            limit >= amount,\\n            string(\\n                abi.encode(\\n                    \\\"The transfer amount of \\\",\\n                    amount,\\n                    \\\" exceeds the allowed \\\",\\n                    _type,\\n                    \\\" limit. The maximum allowed amount is \\\",\\n                    limit\\n                )\\n            )\\n        );\\n\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function updateTransactionTimeLimit(uint256 _seconds) external onlyOwner {\\n        nextTransactionTimeGap = _seconds;\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        limitProtect(msg.sender, recipient, amount)\\n        returns (bool)\\n    {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n\\n        return _transferFrom(_msgSender(), recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(sender != address(0), \\\"Invalid sender\\\");\\n\\n        uint256 currentAllowance = allowance(sender, _msgSender());\\n        require(currentAllowance >= amount, \\\"Insufficient Allowance\\\");\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal limitProtect(sender, recipient, amount) returns (bool) {\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n\\n        uint256 amountReceived = takeFee(sender, amount);\\n        _transfer(sender, recipient, amountReceived);\\n\\n        return true;\\n    }\\n\\n    function takeFee(address sender, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 fee = sender == _msgSender() ? sellTax : buyTax;\\n\\n        uint256 feeAmount = amount.mul(fee).div(FEE_DENOMINATOR);\\n        uint256 transferable_amount = amount.sub(feeAmount);\\n\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n        _transfer(sender, feeReceiver, feeAmount);\\n\\n        return transferable_amount;\\n    }\\n\\n    function manualSend() external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n        payable(feeReceiver).transfer(address(this).balance);\\n    }\\n\\n    function clearStuckToken(address tokenAddress, uint256 tokens)\\n        external\\n        returns (bool success)\\n    {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n\\n        if (tokens == 0) {\\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\\n        }\\n        return ERC20(tokenAddress).transfer(feeReceiver, tokens);\\n    }\\n\\n    function setFee(uint256 _buy, uint256 _sell) external onlyOwner {\\n        buyTax = _buy;\\n        sellTax = _sell;\\n    }\\n\\n    function setFeeReceiver(address _feeReceiver) external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"You are not allowed to set fee receiver\\\"\\n        );\\n\\n        feeReceiver = _feeReceiver;\\n    }\\n}\\n\",\"keccak256\":\"0x3937153cc3ab762c15a8fa4472c529f91e8606e221f925eb4a59adae85f54f3f\",\"license\":\"MIT\"}},\"version\":1}",
        "storageLayout": {
          "storage": [
            {
              "astId": 473,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:Ownable",
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address"
            }
          ],
          "types": {
            "t_address": {
              "encoding": "inplace",
              "label": "address",
              "numberOfBytes": "20"
            }
          }
        },
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        }
      },
      "SafeMath": {
        "abi": [],
        "devdoc": {
          "kind": "dev",
          "methods": {},
          "version": 1
        },
        "evm": {
          "assembly": "    /* \"0x111111111-1717590038739-TimeCoin.sol\":59:6269  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":59:6269  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220ddbbbdba49b170e744fabba09efc35b7e6ce9020565fc743853ffc9d753be98564736f6c634300081a0033\n}\n",
          "bytecode": {
            "functionDebugData": {},
            "generatedSources": [],
            "linkReferences": {},
            "opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD 0xBB 0xBD 0xBA BLOBHASH 0xB1 PUSH17 0xE744FABBA09EFC35B7E6CE9020565FC743 DUP6 EXTCODEHASH 0xFC SWAP14 PUSH22 0x3BE98564736F6C634300081A00330000000000000000 ",
            "sourceMap": "59:6210:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;59:6210:0;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "functionDebugData": {},
            "generatedSources": [],
            "immutableReferences": {},
            "linkReferences": {},
            "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD 0xBB 0xBD 0xBA BLOBHASH 0xB1 PUSH17 0xE744FABBA09EFC35B7E6CE9020565FC743 DUP6 EXTCODEHASH 0xFC SWAP14 PUSH22 0x3BE98564736F6C634300081A00330000000000000000 ",
            "sourceMap": "59:6210:0:-:0;;;;;;;;"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "17000",
              "executionCost": "96",
              "totalCost": "17096"
            },
            "internal": {
              "add(uint256,uint256)": "infinite",
              "div(uint256,uint256)": "infinite",
              "div(uint256,uint256,string memory)": "infinite",
              "mod(uint256,uint256)": "infinite",
              "mod(uint256,uint256,string memory)": "infinite",
              "mul(uint256,uint256)": "infinite",
              "sub(uint256,uint256)": "infinite",
              "sub(uint256,uint256,string memory)": "infinite",
              "tryAdd(uint256,uint256)": "infinite",
              "tryDiv(uint256,uint256)": "infinite",
              "tryMod(uint256,uint256)": "infinite",
              "tryMul(uint256,uint256)": "infinite",
              "trySub(uint256,uint256)": "infinite"
            }
          },
          "legacyAssembly": {
            ".code": [
              {
                "begin": 59,
                "end": 6269,
                "name": "PUSH #[$]",
                "source": 0,
                "value": "0000000000000000000000000000000000000000000000000000000000000000"
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "PUSH [$]",
                "source": 0,
                "value": "0000000000000000000000000000000000000000000000000000000000000000"
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "PUSH",
                "source": 0,
                "value": "B"
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "CODECOPY",
                "source": 0
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "MLOAD",
                "source": 0
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "BYTE",
                "source": 0
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "PUSH",
                "source": 0,
                "value": "73"
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "EQ",
                "source": 0
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "1"
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "JUMPI",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "4E487B71"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "E0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "PUSH",
                "source": 0,
                "value": "4"
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "PUSH",
                "source": 0,
                "value": "24"
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "REVERT",
                "source": 0
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "tag",
                "source": 0,
                "value": "1"
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "ADDRESS",
                "source": 0
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "PUSH",
                "source": 0,
                "value": "73"
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "MSTORE8",
                "source": 0
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 59,
                "end": 6269,
                "name": "RETURN",
                "source": 0
              }
            ],
            ".data": {
              "0": {
                ".auxdata": "a2646970667358221220ddbbbdba49b170e744fabba09efc35b7e6ce9020565fc743853ffc9d753be98564736f6c634300081a0033",
                ".code": [
                  {
                    "begin": 59,
                    "end": 6269,
                    "name": "PUSHDEPLOYADDRESS",
                    "source": 0
                  },
                  {
                    "begin": 59,
                    "end": 6269,
                    "name": "ADDRESS",
                    "source": 0
                  },
                  {
                    "begin": 59,
                    "end": 6269,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 59,
                    "end": 6269,
                    "name": "PUSH",
                    "source": 0,
                    "value": "80"
                  },
                  {
                    "begin": 59,
                    "end": 6269,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 59,
                    "end": 6269,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 59,
                    "end": 6269,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 59,
                    "end": 6269,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 59,
                    "end": 6269,
                    "name": "REVERT",
                    "source": 0
                  }
                ]
              }
            },
            "sourceList": [
              "0x111111111-1717590038739-TimeCoin.sol",
              "#utility.yul"
            ]
          },
          "methodIdentifiers": {}
        },
        "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x111111111-1717590038739-TimeCoin.sol\":\"SafeMath\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x111111111-1717590038739-TimeCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\\ncontract TimeCoin is ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    string private _name = \\\"Time Coin\\\";\\n    string private _symbol = \\\"TIME\\\";\\n    uint256 private _totalSupply;\\n\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n\\n    uint256 public buyTax;\\n    uint256 public sellTax;\\n\\n    uint256 public buyLimit;\\n    uint256 public sellLimit;\\n    uint256 public transferLimit;\\n\\n    uint256 public nextTransactionTimeGap = 2 minutes;\\n\\n    address public feeReceiver;\\n\\n    constructor() ERC20(_name, _symbol) Ownable(_msgSender()) {\\n        _totalSupply = 1000000 * 10**decimals();\\n\\n        _mint(_msgSender(), _totalSupply);\\n\\n        buyTax = 3;\\n        sellTax = 5;\\n\\n        buyLimit = 2;\\n        sellLimit = 5;\\n        transferLimit = 10;\\n\\n        feeReceiver = _msgSender();\\n    }\\n\\n    function isContract(address _addr) private view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    modifier limitProtect(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) {\\n        uint256 limit = transferLimit;\\n        string memory _type = \\\"transfer\\\";\\n\\n        if (isContract(sender)) {\\n            limit = buyLimit;\\n            _type = \\\"buy\\\";\\n        } else if (isContract(recipient)) {\\n            limit = sellLimit;\\n            _type = \\\"sell\\\";\\n        } else {\\n            limit = transferLimit;\\n            _type = \\\"transfer\\\";\\n        }\\n\\n        require(\\n            limit >= amount,\\n            string(\\n                abi.encode(\\n                    \\\"The transfer amount of \\\",\\n                    amount,\\n                    \\\" exceeds the allowed \\\",\\n                    _type,\\n                    \\\" limit. The maximum allowed amount is \\\",\\n                    limit\\n                )\\n            )\\n        );\\n\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function updateTransactionTimeLimit(uint256 _seconds) external onlyOwner {\\n        nextTransactionTimeGap = _seconds;\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        limitProtect(msg.sender, recipient, amount)\\n        returns (bool)\\n    {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n\\n        return _transferFrom(_msgSender(), recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(sender != address(0), \\\"Invalid sender\\\");\\n\\n        uint256 currentAllowance = allowance(sender, _msgSender());\\n        require(currentAllowance >= amount, \\\"Insufficient Allowance\\\");\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal limitProtect(sender, recipient, amount) returns (bool) {\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n\\n        uint256 amountReceived = takeFee(sender, amount);\\n        _transfer(sender, recipient, amountReceived);\\n\\n        return true;\\n    }\\n\\n    function takeFee(address sender, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 fee = sender == _msgSender() ? sellTax : buyTax;\\n\\n        uint256 feeAmount = amount.mul(fee).div(FEE_DENOMINATOR);\\n        uint256 transferable_amount = amount.sub(feeAmount);\\n\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n        _transfer(sender, feeReceiver, feeAmount);\\n\\n        return transferable_amount;\\n    }\\n\\n    function manualSend() external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n        payable(feeReceiver).transfer(address(this).balance);\\n    }\\n\\n    function clearStuckToken(address tokenAddress, uint256 tokens)\\n        external\\n        returns (bool success)\\n    {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n\\n        if (tokens == 0) {\\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\\n        }\\n        return ERC20(tokenAddress).transfer(feeReceiver, tokens);\\n    }\\n\\n    function setFee(uint256 _buy, uint256 _sell) external onlyOwner {\\n        buyTax = _buy;\\n        sellTax = _sell;\\n    }\\n\\n    function setFeeReceiver(address _feeReceiver) external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"You are not allowed to set fee receiver\\\"\\n        );\\n\\n        feeReceiver = _feeReceiver;\\n    }\\n}\\n\",\"keccak256\":\"0x3937153cc3ab762c15a8fa4472c529f91e8606e221f925eb4a59adae85f54f3f\",\"license\":\"MIT\"}},\"version\":1}",
        "storageLayout": {
          "storage": [],
          "types": null
        },
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        }
      },
      "TimeCoin": {
        "abi": [
          {
            "inputs": [],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "allowance",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "needed",
                "type": "uint256"
              }
            ],
            "name": "ERC20InsufficientAllowance",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "balance",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "needed",
                "type": "uint256"
              }
            ],
            "name": "ERC20InsufficientBalance",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "approver",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidApprover",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "receiver",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidReceiver",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidSender",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "ERC20InvalidSpender",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              }
            ],
            "name": "OwnableInvalidOwner",
            "type": "error"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "OwnableUnauthorizedAccount",
            "type": "error"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "previousOwner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "inputs": [],
            "name": "FEE_DENOMINATOR",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "owner",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "spender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "account",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "buyLimit",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "buyTax",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "tokenAddress",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "tokens",
                "type": "uint256"
              }
            ],
            "name": "clearStuckToken",
            "outputs": [
              {
                "internalType": "bool",
                "name": "success",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "decimals",
            "outputs": [
              {
                "internalType": "uint8",
                "name": "",
                "type": "uint8"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "feeReceiver",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "manualSend",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "name",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "nextTransactionTimeGap",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "sellLimit",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "sellTax",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_buy",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "_sell",
                "type": "uint256"
              }
            ],
            "name": "setFee",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "_feeReceiver",
                "type": "address"
              }
            ],
            "name": "setFeeReceiver",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "symbol",
            "outputs": [
              {
                "internalType": "string",
                "name": "",
                "type": "string"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "recipient",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "address",
                "name": "recipient",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "internalType": "bool",
                "name": "",
                "type": "bool"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "transferLimit",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "_seconds",
                "type": "uint256"
              }
            ],
            "name": "updateTransactionTimeLimit",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "stateMutability": "payable",
            "type": "receive"
          }
        ],
        "devdoc": {
          "errors": {
            "ERC20InsufficientAllowance(address,uint256,uint256)": [
              {
                "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
                "params": {
                  "allowance": "Amount of tokens a `spender` is allowed to operate with.",
                  "needed": "Minimum amount required to perform a transfer.",
                  "spender": "Address that may be allowed to operate on tokens without being their owner."
                }
              }
            ],
            "ERC20InsufficientBalance(address,uint256,uint256)": [
              {
                "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
                "params": {
                  "balance": "Current balance for the interacting account.",
                  "needed": "Minimum amount required to perform a transfer.",
                  "sender": "Address whose tokens are being transferred."
                }
              }
            ],
            "ERC20InvalidApprover(address)": [
              {
                "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
                "params": {
                  "approver": "Address initiating an approval operation."
                }
              }
            ],
            "ERC20InvalidReceiver(address)": [
              {
                "details": "Indicates a failure with the token `receiver`. Used in transfers.",
                "params": {
                  "receiver": "Address to which tokens are being transferred."
                }
              }
            ],
            "ERC20InvalidSender(address)": [
              {
                "details": "Indicates a failure with the token `sender`. Used in transfers.",
                "params": {
                  "sender": "Address whose tokens are being transferred."
                }
              }
            ],
            "ERC20InvalidSpender(address)": [
              {
                "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
                "params": {
                  "spender": "Address that may be allowed to operate on tokens without being their owner."
                }
              }
            ],
            "OwnableInvalidOwner(address)": [
              {
                "details": "The owner is not a valid owner account. (eg. `address(0)`)"
              }
            ],
            "OwnableUnauthorizedAccount(address)": [
              {
                "details": "The caller account is not authorized to perform an operation."
              }
            ]
          },
          "events": {
            "Approval(address,address,uint256)": {
              "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
            },
            "Transfer(address,address,uint256)": {
              "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
            }
          },
          "kind": "dev",
          "methods": {
            "allowance(address,address)": {
              "details": "See {IERC20-allowance}."
            },
            "approve(address,uint256)": {
              "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
            },
            "balanceOf(address)": {
              "details": "See {IERC20-balanceOf}."
            },
            "decimals()": {
              "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
            },
            "name()": {
              "details": "Returns the name of the token."
            },
            "owner()": {
              "details": "Returns the address of the current owner."
            },
            "renounceOwnership()": {
              "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
            },
            "symbol()": {
              "details": "Returns the symbol of the token, usually a shorter version of the name."
            },
            "totalSupply()": {
              "details": "See {IERC20-totalSupply}."
            },
            "transferOwnership(address)": {
              "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
            }
          },
          "version": 1
        },
        "evm": {
          "assembly": "    /* \"0x111111111-1717590038739-TimeCoin.sol\":27822:27856  string private _name = \"Time Coin\" */\n  0xc0\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":27747:32568  contract TimeCoin is ERC20, Ownable {... */\n  0x40\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":27822:27856  string private _name = \"Time Coin\" */\n  mstore\n  0x09\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":27747:32568  contract TimeCoin is ERC20, Ownable {... */\n  0x80\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":27822:27856  string private _name = \"Time Coin\" */\n  swap1\n  dup2\n  mstore\n  mstore(0xa0, shl(0xb9, 0x2a34b6b29021b7b4b7))\n  0x06\n  swap1\n  tag_1\n  swap1\n  dup3\n  tag_2\n  jump\t// in\ntag_1:\n  pop\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":27862:27893  string private _symbol = \"TIME\" */\n  0x40\n  dup1\n  mload\n  dup1\n  dup3\n  add\n  swap1\n  swap2\n  mstore\n  0x04\n  dup2\n  mstore\n  shl(0xe0, 0x54494d45)\n  0x20\n  dup3\n  add\n  mstore\n  0x07\n  swap1\n  tag_3\n  swap1\n  dup3\n  tag_2\n  jump\t// in\ntag_3:\n  pop\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28177:28186  2 minutes */\n  0x78\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28137:28186  uint256 public nextTransactionTimeGap = 2 minutes */\n  0x0e\n  sstore\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28226:28537  constructor() ERC20(_name, _symbol) Ownable(_msgSender()) {... */\n  callvalue\n  dup1\n  iszero\n  tag_4\n  jumpi\n  0x00\n  dup1\n  revert\ntag_4:\n  pop\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":12351:12361  msg.sender */\n  caller\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28246:28251  _name */\n  0x06\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":18499:18612  constructor(string memory name_, string memory symbol_) {... */\n  dup1\n  sload\n  tag_9\n  swap1\n  tag_10\n  jump\t// in\ntag_9:\n  dup1\n  0x1f\n  add\n  0x20\n  dup1\n  swap2\n  div\n  mul\n  0x20\n  add\n  mload(0x40)\n  swap1\n  dup2\n  add\n  0x40\n  mstore\n  dup1\n  swap3\n  swap2\n  swap1\n  dup2\n  dup2\n  mstore\n  0x20\n  add\n  dup3\n  dup1\n  sload\n  tag_11\n  swap1\n  tag_10\n  jump\t// in\ntag_11:\n  dup1\n  iszero\n  tag_12\n  jumpi\n  dup1\n  0x1f\n  lt\n  tag_13\n  jumpi\n  0x0100\n  dup1\n  dup4\n  sload\n  div\n  mul\n  dup4\n  mstore\n  swap2\n  0x20\n  add\n  swap2\n  jump(tag_12)\ntag_13:\n  dup3\n  add\n  swap2\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\ntag_14:\n  dup2\n  sload\n  dup2\n  mstore\n  swap1\n  0x01\n  add\n  swap1\n  0x20\n  add\n  dup1\n  dup4\n  gt\n  tag_14\n  jumpi\n  dup3\n  swap1\n  sub\n  0x1f\n  and\n  dup3\n  add\n  swap2\ntag_12:\n  pop\n  pop\n  pop\n  pop\n  pop\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28253:28260  _symbol */\n  0x07\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":18499:18612  constructor(string memory name_, string memory symbol_) {... */\n  dup1\n  sload\n  tag_15\n  swap1\n  tag_10\n  jump\t// in\ntag_15:\n  dup1\n  0x1f\n  add\n  0x20\n  dup1\n  swap2\n  div\n  mul\n  0x20\n  add\n  mload(0x40)\n  swap1\n  dup2\n  add\n  0x40\n  mstore\n  dup1\n  swap3\n  swap2\n  swap1\n  dup2\n  dup2\n  mstore\n  0x20\n  add\n  dup3\n  dup1\n  sload\n  tag_16\n  swap1\n  tag_10\n  jump\t// in\ntag_16:\n  dup1\n  iszero\n  tag_17\n  jumpi\n  dup1\n  0x1f\n  lt\n  tag_18\n  jumpi\n  0x0100\n  dup1\n  dup4\n  sload\n  div\n  mul\n  dup4\n  mstore\n  swap2\n  0x20\n  add\n  swap2\n  jump(tag_17)\ntag_18:\n  dup3\n  add\n  swap2\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\ntag_19:\n  dup2\n  sload\n  dup2\n  mstore\n  swap1\n  0x01\n  add\n  swap1\n  0x20\n  add\n  dup1\n  dup4\n  gt\n  tag_19\n  jumpi\n  dup3\n  swap1\n  sub\n  0x1f\n  and\n  dup3\n  add\n  swap2\ntag_17:\n  pop\n  pop\n  pop\n  pop\n  pop\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":18573:18578  name_ */\n  dup2\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":18565:18570  _name */\n  0x03\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":18565:18578  _name = name_ */\n  swap1\n  dup2\n  tag_22\n  swap2\n  swap1\n  tag_2\n  jump\t// in\ntag_22:\n  pop\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":18588:18595  _symbol */\n  0x04\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":18588:18605  _symbol = symbol_ */\n  tag_23\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":18598:18605  symbol_ */\n  dup3\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":18588:18595  _symbol */\n  dup3\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":18588:18605  _symbol = symbol_ */\n  tag_2\n  jump\t// in\ntag_23:\n  pop\n  pop\n  pop\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":13190:13216  initialOwner == address(0) */\n  dup2\n  and\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":13186:13281  if (initialOwner == address(0)) {... */\n  tag_25\n  jumpi\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":13239:13270  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  shl(0xe0, 0x1e4fbdf7)\n  dup2\n  mstore\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":13267:13268  0 */\n  0x00\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":13239:13270  OwnableInvalidOwner(address(0)) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":2801:2852   */\n  mstore\n    /* \"#utility.yul\":2774:2792   */\n  0x24\n  add\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":13239:13270  OwnableInvalidOwner(address(0)) */\ntag_26:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":13186:13281  if (initialOwner == address(0)) {... */\ntag_25:\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":13290:13322  _transferOwnership(initialOwner) */\n  tag_28\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":13309:13321  initialOwner */\n  dup2\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":13290:13308  _transferOwnership */\n  tag_29\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":13290:13322  _transferOwnership(initialOwner) */\n  jump\t// in\ntag_28:\n  pop\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28319:28333  10**decimals() */\n  tag_33\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":19678:19680  18 */\n  0x12\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28319:28321  10 */\n  0x0a\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28319:28333  10**decimals() */\n  tag_34\n  jump\t// in\ntag_33:\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28309:28333  1000000 * 10**decimals() */\n  tag_35\n  swap1\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28309:28316  1000000 */\n  0x0f4240\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28309:28333  1000000 * 10**decimals() */\n  tag_36\n  jump\t// in\ntag_35:\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28294:28306  _totalSupply */\n  0x08\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28294:28333  _totalSupply = 1000000 * 10**decimals() */\n  sstore\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28344:28377  _mint(_msgSender(), _totalSupply) */\n  tag_37\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":12351:12361  msg.sender */\n  caller\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28364:28376  _totalSupply */\n  sload(0x08)\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28344:28349  _mint */\n  tag_39\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28344:28377  _mint(_msgSender(), _totalSupply) */\n  jump\t// in\ntag_37:\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28397:28398  3 */\n  0x03\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28388:28394  buyTax */\n  0x09\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28388:28398  buyTax = 3 */\n  sstore\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28418:28419  5 */\n  0x05\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28408:28415  sellTax */\n  0x0a\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28408:28419  sellTax = 5 */\n  dup2\n  dup2\n  sstore\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28441:28442  2 */\n  0x02\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28430:28438  buyLimit */\n  0x0b\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28430:28442  buyLimit = 2 */\n  sstore\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28452:28461  sellLimit */\n  0x0c\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28452:28465  sellLimit = 5 */\n  swap2\n  swap1\n  swap2\n  sstore\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28475:28488  transferLimit */\n  0x0d\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28475:28493  transferLimit = 10 */\n  sstore\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28504:28515  feeReceiver */\n  0x0f\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28504:28530  feeReceiver = _msgSender() */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":12351:12361  msg.sender */\n  caller\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":28504:28530  feeReceiver = _msgSender() */\n  or\n  swap1\n  sstore\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":27747:32568  contract TimeCoin is ERC20, Ownable {... */\n  jump(tag_69)\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":14829:15016  function _transferOwnership(address newOwner) internal virtual {... */\ntag_29:\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":14921:14927  _owner */\n  0x05\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":14937:14954  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":14969:15009  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":14921:14927  _owner */\n  swap2\n  and\n  swap2\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":14937:14954  _owner = newOwner */\n  swap1\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":14921:14927  _owner */\n  dup3\n  swap1\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":14969:15009  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":14902:14918  address oldOwner */\n  0x00\n  swap1\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":14969:15009  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":14892:15016  {... */\n  pop\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":14829:15016  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":24324:24532  function _mint(address account, uint256 value) internal {... */\ntag_39:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":24394:24415  account == address(0) */\n  dup3\n  and\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":24390:24481  if (account == address(0)) {... */\n  tag_46\n  jumpi\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":24438:24470  ERC20InvalidReceiver(address(0)) */\n  mload(0x40)\n  shl(0xe0, 0xec442f05)\n  dup2\n  mstore\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":24467:24468  0 */\n  0x00\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":24438:24470  ERC20InvalidReceiver(address(0)) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":2801:2852   */\n  mstore\n    /* \"#utility.yul\":2774:2792   */\n  0x24\n  add\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":24438:24470  ERC20InvalidReceiver(address(0)) */\n  tag_26\n    /* \"#utility.yul\":2655:2858   */\n  jump\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":24390:24481  if (account == address(0)) {... */\ntag_46:\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":24490:24525  _update(address(0), account, value) */\n  tag_48\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":24506:24507  0 */\n  0x00\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":24510:24517  account */\n  dup4\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":24519:24524  value */\n  dup4\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":24490:24497  _update */\n  tag_49\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":24490:24525  _update(address(0), account, value) */\n  jump\t// in\ntag_48:\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":24324:24532  function _mint(address account, uint256 value) internal {... */\n  pop\n  pop\n  jump\t// out\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":22874:23981  function _update(address from, address to, uint256 value) internal virtual {... */\ntag_49:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":22963:22981  from == address(0) */\n  dup4\n  and\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":22959:23499  if (from == address(0)) {... */\n  tag_51\n  jumpi\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23115:23120  value */\n  dup1\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23099:23111  _totalSupply */\n  0x02\n  0x00\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23099:23120  _totalSupply += value */\n  dup3\n  dup3\n  sload\n  tag_52\n  swap2\n  swap1\n  tag_53\n  jump\t// in\ntag_52:\n  swap1\n  swap2\n  sstore\n  pop\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":22959:23499  if (from == address(0)) {... */\n  tag_54\n  swap1\n  pop\n  jump\ntag_51:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23173:23188  _balances[from] */\n  dup4\n  and\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23151:23170  uint256 fromBalance */\n  0x00\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23173:23188  _balances[from] */\n  swap1\n  dup2\n  mstore\n  0x20\n  dup2\n  swap1\n  mstore\n  0x40\n  swap1\n  keccak256\n  sload\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23206:23225  fromBalance < value */\n  dup2\n  dup2\n  lt\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23202:23317  if (fromBalance < value) {... */\n  iszero\n  tag_55\n  jumpi\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23252:23302  ERC20InsufficientBalance(from, fromBalance, value) */\n  mload(0x40)\n  shl(0xe2, 0x391434e3)\n  dup2\n  mstore\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":4950:4982   */\n  dup6\n  and\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23252:23302  ERC20InsufficientBalance(from, fromBalance, value) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":4932:4983   */\n  mstore\n    /* \"#utility.yul\":4999:5017   */\n  0x24\n  dup2\n  add\n    /* \"#utility.yul\":4992:5026   */\n  dup3\n  swap1\n  mstore\n    /* \"#utility.yul\":5042:5060   */\n  0x44\n  dup2\n  add\n    /* \"#utility.yul\":5035:5069   */\n  dup4\n  swap1\n  mstore\n    /* \"#utility.yul\":4905:4923   */\n  0x64\n  add\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23252:23302  ERC20InsufficientBalance(from, fromBalance, value) */\n  tag_26\n    /* \"#utility.yul\":4730:5075   */\n  jump\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23202:23317  if (fromBalance < value) {... */\ntag_55:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23437:23452  _balances[from] */\n  dup5\n  and\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23437:23446  _balances */\n  0x00\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23437:23452  _balances[from] */\n  swap1\n  dup2\n  mstore\n  0x20\n  dup2\n  swap1\n  mstore\n  0x40\n  swap1\n  keccak256\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23455:23474  fromBalance - value */\n  swap1\n  dup3\n  swap1\n  sub\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23437:23474  _balances[from] = fromBalance - value */\n  swap1\n  sstore\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":22959:23499  if (from == address(0)) {... */\ntag_54:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23513:23529  to == address(0) */\n  dup3\n  and\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23509:23934  if (to == address(0)) {... */\n  tag_58\n  jumpi\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23676:23688  _totalSupply */\n  0x02\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23676:23697  _totalSupply -= value */\n  dup1\n  sload\n  dup3\n  swap1\n  sub\n  swap1\n  sstore\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23509:23934  if (to == address(0)) {... */\n  jump(tag_59)\ntag_58:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23887:23900  _balances[to] */\n  dup3\n  and\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23887:23896  _balances */\n  0x00\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23887:23900  _balances[to] */\n  swap1\n  dup2\n  mstore\n  0x20\n  dup2\n  swap1\n  mstore\n  0x40\n  swap1\n  keccak256\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23887:23909  _balances[to] += value */\n  dup1\n  sload\n  dup3\n  add\n  swap1\n  sstore\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23509:23934  if (to == address(0)) {... */\ntag_59:\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23964:23966  to */\n  dup2\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23949:23974  Transfer(from, to, value) */\n  and\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23958:23962  from */\n  dup4\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23949:23974  Transfer(from, to, value) */\n  and\n  0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23968:23973  value */\n  dup4\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23949:23974  Transfer(from, to, value) */\n  mload(0x40)\n  tag_60\n  swap2\n    /* \"#utility.yul\":5226:5251   */\n  dup2\n  mstore\n    /* \"#utility.yul\":5214:5216   */\n  0x20\n    /* \"#utility.yul\":5199:5217   */\n  add\n  swap1\n    /* \"#utility.yul\":5080:5257   */\n  jump\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":23949:23974  Transfer(from, to, value) */\ntag_60:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":22874:23981  function _update(address from, address to, uint256 value) internal virtual {... */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:141   */\ntag_62:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:526   */\ntag_10:\n    /* \"#utility.yul\":225:226   */\n  0x01\n    /* \"#utility.yul\":221:233   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":268:280   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":289:350   */\n  tag_72\n  jumpi\n    /* \"#utility.yul\":343:347   */\n  0x7f\n    /* \"#utility.yul\":335:341   */\n  dup3\n    /* \"#utility.yul\":331:348   */\n  and\n    /* \"#utility.yul\":321:348   */\n  swap2\n  pop\n    /* \"#utility.yul\":289:350   */\ntag_72:\n    /* \"#utility.yul\":396:398   */\n  0x20\n    /* \"#utility.yul\":388:394   */\n  dup3\n    /* \"#utility.yul\":385:399   */\n  lt\n    /* \"#utility.yul\":365:383   */\n  dup2\n    /* \"#utility.yul\":362:400   */\n  sub\n    /* \"#utility.yul\":359:520   */\n  tag_73\n  jumpi\n    /* \"#utility.yul\":442:452   */\n  0x4e487b71\n    /* \"#utility.yul\":437:440   */\n  0xe0\n    /* \"#utility.yul\":433:453   */\n  shl\n    /* \"#utility.yul\":430:431   */\n  0x00\n    /* \"#utility.yul\":423:454   */\n  mstore\n    /* \"#utility.yul\":477:481   */\n  0x22\n    /* \"#utility.yul\":474:475   */\n  0x04\n    /* \"#utility.yul\":467:482   */\n  mstore\n    /* \"#utility.yul\":505:509   */\n  0x24\n    /* \"#utility.yul\":502:503   */\n  0x00\n    /* \"#utility.yul\":495:510   */\n  revert\n    /* \"#utility.yul\":359:520   */\ntag_73:\n  pop\n    /* \"#utility.yul\":146:526   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":657:1175   */\ntag_64:\n    /* \"#utility.yul\":759:761   */\n  0x1f\n    /* \"#utility.yul\":754:757   */\n  dup3\n    /* \"#utility.yul\":751:762   */\n  gt\n    /* \"#utility.yul\":748:1169   */\n  iszero\n  tag_76\n  jumpi\n    /* \"#utility.yul\":795:800   */\n  dup1\n    /* \"#utility.yul\":792:793   */\n  0x00\n    /* \"#utility.yul\":785:801   */\n  mstore\n    /* \"#utility.yul\":839:843   */\n  0x20\n    /* \"#utility.yul\":836:837   */\n  0x00\n    /* \"#utility.yul\":826:844   */\n  keccak256\n    /* \"#utility.yul\":909:911   */\n  0x1f\n    /* \"#utility.yul\":897:907   */\n  dup5\n    /* \"#utility.yul\":893:912   */\n  add\n    /* \"#utility.yul\":890:891   */\n  0x05\n    /* \"#utility.yul\":886:913   */\n  shr\n    /* \"#utility.yul\":880:884   */\n  dup2\n    /* \"#utility.yul\":876:914   */\n  add\n    /* \"#utility.yul\":945:949   */\n  0x20\n    /* \"#utility.yul\":933:943   */\n  dup6\n    /* \"#utility.yul\":930:950   */\n  lt\n    /* \"#utility.yul\":927:974   */\n  iszero\n  tag_77\n  jumpi\n  pop\n    /* \"#utility.yul\":968:972   */\n  dup1\n    /* \"#utility.yul\":927:974   */\ntag_77:\n    /* \"#utility.yul\":1023:1025   */\n  0x1f\n    /* \"#utility.yul\":1018:1021   */\n  dup5\n    /* \"#utility.yul\":1014:1026   */\n  add\n    /* \"#utility.yul\":1011:1012   */\n  0x05\n    /* \"#utility.yul\":1007:1027   */\n  shr\n    /* \"#utility.yul\":1001:1005   */\n  dup3\n    /* \"#utility.yul\":997:1028   */\n  add\n    /* \"#utility.yul\":987:1028   */\n  swap2\n  pop\n    /* \"#utility.yul\":1078:1159   */\ntag_78:\n    /* \"#utility.yul\":1096:1098   */\n  dup2\n    /* \"#utility.yul\":1089:1094   */\n  dup2\n    /* \"#utility.yul\":1086:1099   */\n  lt\n    /* \"#utility.yul\":1078:1159   */\n  iszero\n  tag_80\n  jumpi\n    /* \"#utility.yul\":1155:1156   */\n  0x00\n    /* \"#utility.yul\":1141:1157   */\n  dup2\n  sstore\n    /* \"#utility.yul\":1122:1123   */\n  0x01\n    /* \"#utility.yul\":1111:1124   */\n  add\n    /* \"#utility.yul\":1078:1159   */\n  jump(tag_78)\ntag_80:\n    /* \"#utility.yul\":1082:1085   */\n  pop\n  pop\n    /* \"#utility.yul\":748:1169   */\ntag_76:\n    /* \"#utility.yul\":657:1175   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1351:2650   */\ntag_2:\n    /* \"#utility.yul\":1471:1481   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1493:1523   */\n  dup2\n  gt\n    /* \"#utility.yul\":1490:1546   */\n  iszero\n  tag_84\n  jumpi\n    /* \"#utility.yul\":1526:1544   */\n  tag_84\n  tag_62\n  jump\t// in\ntag_84:\n    /* \"#utility.yul\":1555:1652   */\n  tag_85\n    /* \"#utility.yul\":1645:1651   */\n  dup2\n    /* \"#utility.yul\":1605:1643   */\n  tag_86\n    /* \"#utility.yul\":1637:1641   */\n  dup5\n    /* \"#utility.yul\":1631:1642   */\n  sload\n    /* \"#utility.yul\":1605:1643   */\n  tag_10\n  jump\t// in\ntag_86:\n    /* \"#utility.yul\":1599:1603   */\n  dup5\n    /* \"#utility.yul\":1555:1652   */\n  tag_64\n  jump\t// in\ntag_85:\n    /* \"#utility.yul\":1701:1705   */\n  0x20\n    /* \"#utility.yul\":1732:1734   */\n  0x1f\n    /* \"#utility.yul\":1721:1735   */\n  dup3\n  gt\n    /* \"#utility.yul\":1749:1750   */\n  0x01\n    /* \"#utility.yul\":1744:2393   */\n  dup2\n  eq\n  tag_88\n  jumpi\n    /* \"#utility.yul\":2437:2438   */\n  0x00\n    /* \"#utility.yul\":2454:2460   */\n  dup4\n    /* \"#utility.yul\":2451:2540   */\n  iszero\n  tag_89\n  jumpi\n  pop\n    /* \"#utility.yul\":2506:2525   */\n  dup5\n  dup3\n  add\n    /* \"#utility.yul\":2500:2526   */\n  mload\n    /* \"#utility.yul\":2451:2540   */\ntag_89:\n  not(0x00)\n    /* \"#utility.yul\":1308:1309   */\n  0x03\n    /* \"#utility.yul\":1304:1315   */\n  dup6\n  swap1\n  shl\n    /* \"#utility.yul\":1300:1324   */\n  shr\n    /* \"#utility.yul\":1296:1325   */\n  not\n    /* \"#utility.yul\":1286:1326   */\n  and\n    /* \"#utility.yul\":1332:1333   */\n  0x01\n    /* \"#utility.yul\":1328:1339   */\n  dup5\n  swap1\n  shl\n    /* \"#utility.yul\":1283:1340   */\n  or\n    /* \"#utility.yul\":2553:2634   */\n  dup5\n  sstore\n    /* \"#utility.yul\":1714:2644   */\n  jump(tag_80)\n    /* \"#utility.yul\":1744:2393   */\ntag_88:\n    /* \"#utility.yul\":604:605   */\n  0x00\n    /* \"#utility.yul\":597:611   */\n  dup5\n  dup2\n  mstore\n    /* \"#utility.yul\":641:645   */\n  0x20\n    /* \"#utility.yul\":628:646   */\n  dup2\n  keccak256\n  not(0x1f)\n    /* \"#utility.yul\":1780:1800   */\n  dup6\n  and\n  swap2\n    /* \"#utility.yul\":1898:2120   */\ntag_92:\n    /* \"#utility.yul\":1912:1919   */\n  dup3\n    /* \"#utility.yul\":1909:1910   */\n  dup2\n    /* \"#utility.yul\":1906:1920   */\n  lt\n    /* \"#utility.yul\":1898:2120   */\n  iszero\n  tag_94\n  jumpi\n    /* \"#utility.yul\":1994:2013   */\n  dup8\n  dup6\n  add\n    /* \"#utility.yul\":1988:2014   */\n  mload\n    /* \"#utility.yul\":1973:2015   */\n  dup3\n  sstore\n    /* \"#utility.yul\":2101:2105   */\n  0x20\n    /* \"#utility.yul\":2086:2106   */\n  swap5\n  dup6\n  add\n  swap5\n    /* \"#utility.yul\":2054:2055   */\n  0x01\n    /* \"#utility.yul\":2042:2056   */\n  swap1\n  swap3\n  add\n  swap2\n    /* \"#utility.yul\":1928:1940   */\n  add\n    /* \"#utility.yul\":1898:2120   */\n  jump(tag_92)\ntag_94:\n    /* \"#utility.yul\":1902:1905   */\n  pop\n    /* \"#utility.yul\":2148:2154   */\n  dup5\n    /* \"#utility.yul\":2139:2146   */\n  dup3\n    /* \"#utility.yul\":2136:2155   */\n  lt\n    /* \"#utility.yul\":2133:2334   */\n  iszero\n  tag_95\n  jumpi\n    /* \"#utility.yul\":2209:2228   */\n  dup7\n  dup5\n  add\n    /* \"#utility.yul\":2203:2229   */\n  mload\n  not(0x00)\n    /* \"#utility.yul\":2292:2293   */\n  0x03\n    /* \"#utility.yul\":2288:2302   */\n  dup8\n  swap1\n  shl\n    /* \"#utility.yul\":2304:2307   */\n  0xf8\n    /* \"#utility.yul\":2284:2308   */\n  and\n    /* \"#utility.yul\":2280:2317   */\n  shr\n    /* \"#utility.yul\":2276:2318   */\n  not\n    /* \"#utility.yul\":2261:2319   */\n  and\n    /* \"#utility.yul\":2246:2320   */\n  dup2\n  sstore\n    /* \"#utility.yul\":2133:2334   */\ntag_95:\n  pop\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":2380:2381   */\n  0x01\n    /* \"#utility.yul\":2364:2378   */\n  swap1\n  dup2\n  shl\n    /* \"#utility.yul\":2360:2382   */\n  add\n    /* \"#utility.yul\":2347:2383   */\n  swap1\n  sstore\n  pop\n    /* \"#utility.yul\":1351:2650   */\n  jump\t// out\n    /* \"#utility.yul\":2863:2990   */\ntag_66:\n    /* \"#utility.yul\":2924:2934   */\n  0x4e487b71\n    /* \"#utility.yul\":2919:2922   */\n  0xe0\n    /* \"#utility.yul\":2915:2935   */\n  shl\n    /* \"#utility.yul\":2912:2913   */\n  0x00\n    /* \"#utility.yul\":2905:2936   */\n  mstore\n    /* \"#utility.yul\":2955:2959   */\n  0x11\n    /* \"#utility.yul\":2952:2953   */\n  0x04\n    /* \"#utility.yul\":2945:2960   */\n  mstore\n    /* \"#utility.yul\":2979:2983   */\n  0x24\n    /* \"#utility.yul\":2976:2977   */\n  0x00\n    /* \"#utility.yul\":2969:2984   */\n  revert\n    /* \"#utility.yul\":2995:3370   */\ntag_67:\n    /* \"#utility.yul\":3083:3084   */\n  0x01\n    /* \"#utility.yul\":3101:3106   */\n  dup2\n    /* \"#utility.yul\":3115:3364   */\ntag_99:\n    /* \"#utility.yul\":3136:3137   */\n  0x01\n    /* \"#utility.yul\":3126:3134   */\n  dup5\n    /* \"#utility.yul\":3123:3138   */\n  gt\n    /* \"#utility.yul\":3115:3364   */\n  iszero\n  tag_101\n  jumpi\n    /* \"#utility.yul\":3186:3190   */\n  dup1\n    /* \"#utility.yul\":3181:3184   */\n  dup6\n    /* \"#utility.yul\":3177:3191   */\n  div\n    /* \"#utility.yul\":3171:3175   */\n  dup2\n    /* \"#utility.yul\":3168:3192   */\n  gt\n    /* \"#utility.yul\":3165:3215   */\n  iszero\n  tag_103\n  jumpi\n    /* \"#utility.yul\":3195:3213   */\n  tag_103\n  tag_66\n  jump\t// in\ntag_103:\n    /* \"#utility.yul\":3245:3246   */\n  0x01\n    /* \"#utility.yul\":3235:3243   */\n  dup5\n    /* \"#utility.yul\":3231:3247   */\n  and\n    /* \"#utility.yul\":3228:3277   */\n  iszero\n  tag_104\n  jumpi\n    /* \"#utility.yul\":3259:3275   */\n  swap1\n  dup2\n  mul\n  swap1\n    /* \"#utility.yul\":3228:3277   */\ntag_104:\n    /* \"#utility.yul\":3342:3343   */\n  0x01\n    /* \"#utility.yul\":3338:3354   */\n  swap4\n  swap1\n  swap4\n  shr\n  swap3\n    /* \"#utility.yul\":3298:3313   */\n  dup1\n  mul\n    /* \"#utility.yul\":3115:3364   */\n  jump(tag_99)\ntag_101:\n    /* \"#utility.yul\":2995:3370   */\n  swap4\n  pop\n  swap4\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3375:4277   */\ntag_68:\n    /* \"#utility.yul\":3424:3429   */\n  0x00\n    /* \"#utility.yul\":3454:3462   */\n  dup3\n    /* \"#utility.yul\":3444:3524   */\n  tag_106\n  jumpi\n  pop\n    /* \"#utility.yul\":3495:3496   */\n  0x01\n    /* \"#utility.yul\":3509:3514   */\n  jump(tag_105)\n    /* \"#utility.yul\":3444:3524   */\ntag_106:\n    /* \"#utility.yul\":3543:3547   */\n  dup2\n    /* \"#utility.yul\":3533:3609   */\n  tag_107\n  jumpi\n  pop\n    /* \"#utility.yul\":3580:3581   */\n  0x00\n    /* \"#utility.yul\":3594:3599   */\n  jump(tag_105)\n    /* \"#utility.yul\":3533:3609   */\ntag_107:\n    /* \"#utility.yul\":3625:3629   */\n  dup2\n    /* \"#utility.yul\":3643:3644   */\n  0x01\n    /* \"#utility.yul\":3638:3697   */\n  dup2\n  eq\n  tag_109\n  jumpi\n    /* \"#utility.yul\":3711:3712   */\n  0x02\n    /* \"#utility.yul\":3706:3880   */\n  dup2\n  eq\n  tag_110\n  jumpi\n    /* \"#utility.yul\":3618:3880   */\n  jump(tag_108)\n    /* \"#utility.yul\":3638:3697   */\ntag_109:\n    /* \"#utility.yul\":3668:3669   */\n  0x01\n    /* \"#utility.yul\":3659:3669   */\n  swap2\n  pop\n    /* \"#utility.yul\":3682:3687   */\n  pop\n  jump(tag_105)\n    /* \"#utility.yul\":3706:3880   */\ntag_110:\n    /* \"#utility.yul\":3743:3746   */\n  0xff\n    /* \"#utility.yul\":3733:3741   */\n  dup5\n    /* \"#utility.yul\":3730:3747   */\n  gt\n    /* \"#utility.yul\":3727:3770   */\n  iszero\n  tag_112\n  jumpi\n    /* \"#utility.yul\":3750:3768   */\n  tag_112\n  tag_66\n  jump\t// in\ntag_112:\n  pop\n  pop\n    /* \"#utility.yul\":3806:3807   */\n  0x01\n    /* \"#utility.yul\":3792:3808   */\n  dup3\n  shl\n    /* \"#utility.yul\":3865:3870   */\n  jump(tag_105)\n    /* \"#utility.yul\":3618:3880   */\ntag_108:\n  pop\n    /* \"#utility.yul\":3964:3966   */\n  0x20\n    /* \"#utility.yul\":3954:3962   */\n  dup4\n    /* \"#utility.yul\":3951:3967   */\n  lt\n    /* \"#utility.yul\":3945:3948   */\n  0x0133\n    /* \"#utility.yul\":3939:3943   */\n  dup4\n    /* \"#utility.yul\":3936:3949   */\n  lt\n    /* \"#utility.yul\":3932:3968   */\n  and\n    /* \"#utility.yul\":3926:3928   */\n  0x4e\n    /* \"#utility.yul\":3916:3924   */\n  dup5\n    /* \"#utility.yul\":3913:3929   */\n  lt\n    /* \"#utility.yul\":3908:3910   */\n  0x0b\n    /* \"#utility.yul\":3902:3906   */\n  dup5\n    /* \"#utility.yul\":3899:3911   */\n  lt\n    /* \"#utility.yul\":3895:3930   */\n  and\n    /* \"#utility.yul\":3892:3969   */\n  or\n    /* \"#utility.yul\":3889:4092   */\n  iszero\n  tag_113\n  jumpi\n  pop\n    /* \"#utility.yul\":4001:4020   */\n  dup2\n  dup2\n  exp\n    /* \"#utility.yul\":4077:4082   */\n  jump(tag_105)\n    /* \"#utility.yul\":3889:4092   */\ntag_113:\n    /* \"#utility.yul\":4124:4166   */\n  tag_114\n  not(0x00)\n    /* \"#utility.yul\":4149:4157   */\n  dup5\n    /* \"#utility.yul\":4143:4147   */\n  dup5\n    /* \"#utility.yul\":4124:4166   */\n  tag_67\n  jump\t// in\ntag_114:\n    /* \"#utility.yul\":4202:4208   */\n  dup1\n    /* \"#utility.yul\":4198:4199   */\n  0x00\n    /* \"#utility.yul\":4194:4200   */\n  not\n    /* \"#utility.yul\":4190:4209   */\n  div\n    /* \"#utility.yul\":4181:4188   */\n  dup3\n    /* \"#utility.yul\":4178:4210   */\n  gt\n    /* \"#utility.yul\":4175:4233   */\n  iszero\n  tag_116\n  jumpi\n    /* \"#utility.yul\":4213:4231   */\n  tag_116\n  tag_66\n  jump\t// in\ntag_116:\n    /* \"#utility.yul\":4251:4271   */\n  mul\n  swap1\n  pop\n    /* \"#utility.yul\":3375:4277   */\ntag_105:\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4282:4422   */\ntag_34:\n    /* \"#utility.yul\":4340:4345   */\n  0x00\n    /* \"#utility.yul\":4369:4416   */\n  tag_118\n    /* \"#utility.yul\":4410:4414   */\n  0xff\n    /* \"#utility.yul\":4400:4408   */\n  dup5\n    /* \"#utility.yul\":4396:4415   */\n  and\n    /* \"#utility.yul\":4390:4394   */\n  dup4\n    /* \"#utility.yul\":4369:4416   */\n  tag_68\n  jump\t// in\ntag_118:\n    /* \"#utility.yul\":4360:4416   */\n  swap4\n    /* \"#utility.yul\":4282:4422   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4427:4595   */\ntag_36:\n    /* \"#utility.yul\":4500:4509   */\n  dup1\n  dup3\n  mul\n    /* \"#utility.yul\":4531:4540   */\n  dup2\n  iszero\n    /* \"#utility.yul\":4548:4563   */\n  dup3\n  dup3\n  div\n    /* \"#utility.yul\":4542:4564   */\n  dup5\n  eq\n    /* \"#utility.yul\":4528:4565   */\n  or\n    /* \"#utility.yul\":4518:4589   */\n  tag_105\n  jumpi\n    /* \"#utility.yul\":4569:4587   */\n  tag_105\n  tag_66\n  jump\t// in\n    /* \"#utility.yul\":4600:4725   */\ntag_53:\n    /* \"#utility.yul\":4665:4674   */\n  dup1\n  dup3\n  add\n    /* \"#utility.yul\":4686:4696   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":4683:4719   */\n  iszero\n  tag_105\n  jumpi\n    /* \"#utility.yul\":4699:4717   */\n  tag_105\n  tag_66\n  jump\t// in\n    /* \"#utility.yul\":5080:5257   */\ntag_69:\n    /* \"0x111111111-1717590038739-TimeCoin.sol\":27747:32568  contract TimeCoin is ERC20, Ownable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":27747:32568  contract TimeCoin is ERC20, Ownable {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x715018a6\n      gt\n      tag_28\n      jumpi\n      dup1\n      0xcc1776d3\n      gt\n      tag_29\n      jumpi\n      dup1\n      0xefdcd974\n      gt\n      tag_30\n      jumpi\n      dup1\n      0xefdcd974\n      eq\n      tag_24\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_25\n      jumpi\n      dup1\n      0xf4293890\n      eq\n      tag_26\n      jumpi\n      dup1\n      0xf9432517\n      eq\n      tag_27\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_30:\n      dup1\n      0xcc1776d3\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xd73792a9\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_23\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_29:\n      dup1\n      0x715018a6\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x77b54bad\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xb3f00674\n      eq\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_28:\n      dup1\n      0x4f7041a5\n      gt\n      tag_31\n      jumpi\n      dup1\n      0x4f7041a5\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x4f91e48c\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x52f7c988\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x589210d9\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x5a029535\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_31:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x3f4be31e\n      eq\n      tag_8\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      jumpi(tag_2, calldatasize)\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":18677:18766  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_34\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_34:\n      pop\n      tag_35\n      tag_36\n      jump\t// in\n    tag_35:\n      mload(0x40)\n      tag_37\n      swap2\n      swap1\n      tag_38\n      jump\t// in\n    tag_37:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":20896:21082  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_39\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_39:\n      pop\n      tag_40\n      tag_41\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_41:\n      tag_43\n      jump\t// in\n    tag_40:\n      mload(0x40)\n        /* \"#utility.yul\":1181:1195   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1174:1196   */\n      iszero\n        /* \"#utility.yul\":1156:1197   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1144:1146   */\n      0x20\n        /* \"#utility.yul\":1129:1147   */\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":20896:21082  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n      tag_37\n        /* \"#utility.yul\":1016:1203   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":19747:19844  function totalSupply() public view virtual returns (uint256) {... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_46\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_46:\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":19825:19837  _totalSupply */\n      sload(0x02)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":19747:19844  function totalSupply() public view virtual returns (uint256) {... */\n    tag_47:\n      mload(0x40)\n        /* \"#utility.yul\":1354:1379   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1342:1344   */\n      0x20\n        /* \"#utility.yul\":1327:1345   */\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":19747:19844  function totalSupply() public view virtual returns (uint256) {... */\n      tag_37\n        /* \"#utility.yul\":1208:1385   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30121:30627  function transferFrom(... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_51\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_51:\n      pop\n      tag_40\n      tag_53\n      calldatasize\n      0x04\n      tag_54\n      jump\t// in\n    tag_53:\n      tag_55\n      jump\t// in\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":19605:19687  function decimals() public view virtual returns (uint8) {... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_57\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_57:\n      pop\n      mload(0x40)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":19678:19680  18 */\n      0x12\n        /* \"#utility.yul\":1911:1947   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1899:1901   */\n      0x20\n        /* \"#utility.yul\":1884:1902   */\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":19605:19687  function decimals() public view virtual returns (uint8) {... */\n      tag_37\n        /* \"#utility.yul\":1769:1953   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28137:28186  uint256 public nextTransactionTimeGap = 2 minutes */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_62\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_62:\n      pop\n      tag_47\n      sload(0x0e)\n      dup2\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":27987:28008  uint256 public buyTax */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_66\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_66:\n      pop\n      tag_47\n      sload(0x09)\n      dup2\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28072:28096  uint256 public sellLimit */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_70\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_70:\n      pop\n      tag_47\n      sload(0x0c)\n      dup2\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32219:32338  function setFee(uint256 _buy, uint256 _sell) external onlyOwner {... */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_74\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_74:\n      pop\n      tag_75\n      tag_76\n      calldatasize\n      0x04\n      tag_77\n      jump\t// in\n    tag_76:\n      tag_78\n      jump\t// in\n    tag_75:\n      stop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28043:28066  uint256 public buyLimit */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_79\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_79:\n      pop\n      tag_47\n      sload(0x0b)\n      dup2\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29641:29764  function updateTransactionTimeLimit(uint256 _seconds) external onlyOwner {... */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_83\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_83:\n      pop\n      tag_75\n      tag_85\n      calldatasize\n      0x04\n      tag_86\n      jump\t// in\n    tag_85:\n      tag_87\n      jump\t// in\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":19902:20018  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_88\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_88:\n      pop\n      tag_47\n      tag_90\n      calldatasize\n      0x04\n      tag_91\n      jump\t// in\n    tag_90:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":19993:20011  _balances[account] */\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":19967:19974  uint256 */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":19993:20011  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":19902:20018  function balanceOf(address account) public view virtual returns (uint256) {... */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14210:14311  function renounceOwnership() public virtual onlyOwner {... */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_94\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_94:\n      pop\n      tag_75\n      tag_96\n      jump\t// in\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31800:32213  function clearStuckToken(address tokenAddress, uint256 tokens)... */\n    tag_16:\n      callvalue\n      dup1\n      iszero\n      tag_97\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_97:\n      pop\n      tag_40\n      tag_99\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_99:\n      tag_100\n      jump\t// in\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13555:13640  function owner() public view virtual returns (address) {... */\n    tag_17:\n      callvalue\n      dup1\n      iszero\n      tag_102\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_102:\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13627:13633  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x05))\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13555:13640  function owner() public view virtual returns (address) {... */\n    tag_103:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2895:2927   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":2877:2928   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2865:2867   */\n      0x20\n        /* \"#utility.yul\":2850:2868   */\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13555:13640  function owner() public view virtual returns (address) {... */\n      tag_37\n        /* \"#utility.yul\":2731:2934   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":18879:18972  function symbol() public view virtual returns (string memory) {... */\n    tag_18:\n      callvalue\n      dup1\n      iszero\n      tag_107\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_107:\n      pop\n      tag_35\n      tag_109\n      jump\t// in\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29770:30115  function transfer(address recipient, uint256 amount)... */\n    tag_19:\n      callvalue\n      dup1\n      iszero\n      tag_111\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_111:\n      pop\n      tag_40\n      tag_113\n      calldatasize\n      0x04\n      tag_42\n      jump\t// in\n    tag_113:\n      tag_114\n      jump\t// in\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28193:28219  address public feeReceiver */\n    tag_20:\n      callvalue\n      dup1\n      iszero\n      tag_116\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_116:\n      pop\n      sload(0x0f)\n      tag_103\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28014:28036  uint256 public sellTax */\n    tag_21:\n      callvalue\n      dup1\n      iszero\n      tag_120\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_120:\n      pop\n      tag_47\n      sload(0x0a)\n      dup2\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":27934:27980  uint256 public constant FEE_DENOMINATOR = 1000 */\n    tag_22:\n      callvalue\n      dup1\n      iszero\n      tag_124\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_124:\n      pop\n      tag_47\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":27976:27980  1000 */\n      0x03e8\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":27934:27980  uint256 public constant FEE_DENOMINATOR = 1000 */\n      dup2\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":20449:20589  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_23:\n      callvalue\n      dup1\n      iszero\n      tag_128\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_128:\n      pop\n      tag_47\n      tag_130\n      calldatasize\n      0x04\n      tag_131\n      jump\t// in\n    tag_130:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":20555:20573  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":20529:20536  uint256 */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":20555:20573  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":20555:20566  _allowances */\n      0x01\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":20555:20573  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":20555:20582  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":20449:20589  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32344:32566  function setFeeReceiver(address _feeReceiver) external {... */\n    tag_24:\n      callvalue\n      dup1\n      iszero\n      tag_134\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_134:\n      pop\n      tag_75\n      tag_136\n      calldatasize\n      0x04\n      tag_91\n      jump\t// in\n    tag_136:\n      tag_137\n      jump\t// in\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14460:14675  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_25:\n      callvalue\n      dup1\n      iszero\n      tag_138\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_138:\n      pop\n      tag_75\n      tag_140\n      calldatasize\n      0x04\n      tag_91\n      jump\t// in\n    tag_140:\n      tag_141\n      jump\t// in\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31574:31794  function manualSend() external {... */\n    tag_26:\n      callvalue\n      dup1\n      iszero\n      tag_142\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_142:\n      pop\n      tag_75\n      tag_144\n      jump\t// in\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28102:28130  uint256 public transferLimit */\n    tag_27:\n      callvalue\n      dup1\n      iszero\n      tag_145\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_145:\n      pop\n      tag_47\n      sload(0x0d)\n      dup2\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":18677:18766  function name() public view virtual returns (string memory) {... */\n    tag_36:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":18722:18735  string memory */\n      0x60\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":18754:18759  _name */\n      0x03\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":18747:18759  return _name */\n      dup1\n      sload\n      tag_150\n      swap1\n      tag_151\n      jump\t// in\n    tag_150:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_152\n      swap1\n      tag_151\n      jump\t// in\n    tag_152:\n      dup1\n      iszero\n      tag_153\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_154\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_153)\n    tag_154:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_155:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_155\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_153:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":18677:18766  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":20896:21082  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_43:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":20969:20973  bool */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":12351:12361  msg.sender */\n      caller\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":21023:21054  _approve(owner, spender, value) */\n      tag_159\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":12351:12361  msg.sender */\n      dup2\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":21039:21046  spender */\n      dup6\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":21048:21053  value */\n      dup6\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":21023:21031  _approve */\n      tag_160\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":21023:21054  _approve(owner, spender, value) */\n      jump\t// in\n    tag_159:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":21071:21075  true */\n      0x01\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":21064:21075  return true */\n      swap2\n      pop\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":20896:21082  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_156:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30121:30627  function transferFrom(... */\n    tag_55:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30249:30253  bool */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30282:30283  0 */\n      dup1\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30273:30279  amount */\n      dup3\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30273:30283  amount > 0 */\n      gt\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30265:30302  require(amount > 0, \"Invalid amount\") */\n      tag_163\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3791:3793   */\n      0x20\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30265:30302  require(amount > 0, \"Invalid amount\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3773:3794   */\n      mstore\n        /* \"#utility.yul\":3830:3832   */\n      0x0e\n        /* \"#utility.yul\":3810:3828   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3803:3833   */\n      mstore\n      shl(0x92, 0x125b9d985b1a5908185b5bdd5b9d)\n        /* \"#utility.yul\":3849:3867   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3842:3886   */\n      mstore\n        /* \"#utility.yul\":3903:3921   */\n      0x64\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30265:30302  require(amount > 0, \"Invalid amount\") */\n    tag_164:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_163:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30320:30343  recipient != address(0) */\n      dup4\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30312:30365  require(recipient != address(0), \"Invalid recipient\") */\n      tag_166\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4134:4136   */\n      0x20\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30312:30365  require(recipient != address(0), \"Invalid recipient\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4116:4137   */\n      mstore\n        /* \"#utility.yul\":4173:4175   */\n      0x11\n        /* \"#utility.yul\":4153:4171   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4146:4176   */\n      mstore\n      shl(0x7a, 0x125b9d985b1a59081c9958da5c1a595b9d)\n        /* \"#utility.yul\":4192:4210   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4185:4232   */\n      mstore\n        /* \"#utility.yul\":4249:4267   */\n      0x64\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30312:30365  require(recipient != address(0), \"Invalid recipient\") */\n      tag_164\n        /* \"#utility.yul\":3932:4273   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30312:30365  require(recipient != address(0), \"Invalid recipient\") */\n    tag_166:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30383:30403  sender != address(0) */\n      dup5\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30375:30422  require(sender != address(0), \"Invalid sender\") */\n      tag_169\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4480:4482   */\n      0x20\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30375:30422  require(sender != address(0), \"Invalid sender\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4462:4483   */\n      mstore\n        /* \"#utility.yul\":4519:4521   */\n      0x0e\n        /* \"#utility.yul\":4499:4517   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4492:4522   */\n      mstore\n      shl(0x91, 0x24b73b30b634b21039b2b73232b9)\n        /* \"#utility.yul\":4538:4556   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4531:4575   */\n      mstore\n        /* \"#utility.yul\":4592:4610   */\n      0x64\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30375:30422  require(sender != address(0), \"Invalid sender\") */\n      tag_164\n        /* \"#utility.yul\":4278:4616   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30375:30422  require(sender != address(0), \"Invalid sender\") */\n    tag_169:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30433:30457  uint256 currentAllowance */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30460:30491  allowance(sender, _msgSender()) */\n      tag_172\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30470:30476  sender */\n      dup6\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":12351:12361  msg.sender */\n      caller\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":20449:20589  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      tag_130\n      jump\t// in\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30460:30491  allowance(sender, _msgSender()) */\n    tag_172:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30433:30491  uint256 currentAllowance = allowance(sender, _msgSender()) */\n      swap1\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30529:30535  amount */\n      dup3\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30509:30525  currentAllowance */\n      dup2\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30509:30535  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30501:30562  require(currentAllowance >= amount, \"Insufficient Allowance\") */\n      tag_174\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4823:4825   */\n      0x20\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30501:30562  require(currentAllowance >= amount, \"Insufficient Allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4805:4826   */\n      mstore\n        /* \"#utility.yul\":4862:4864   */\n      0x16\n        /* \"#utility.yul\":4842:4860   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4835:4865   */\n      mstore\n      shl(0x50, 0x496e73756666696369656e7420416c6c6f77616e6365)\n        /* \"#utility.yul\":4881:4899   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4874:4926   */\n      mstore\n        /* \"#utility.yul\":4943:4961   */\n      0x64\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30501:30562  require(currentAllowance >= amount, \"Insufficient Allowance\") */\n      tag_164\n        /* \"#utility.yul\":4621:4967   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30501:30562  require(currentAllowance >= amount, \"Insufficient Allowance\") */\n    tag_174:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30580:30620  _transferFrom(sender, recipient, amount) */\n      tag_177\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30594:30600  sender */\n      dup6\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30602:30611  recipient */\n      dup6\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30613:30619  amount */\n      dup6\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30580:30593  _transferFrom */\n      tag_178\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30580:30620  _transferFrom(sender, recipient, amount) */\n      jump\t// in\n    tag_177:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30573:30620  return _transferFrom(sender, recipient, amount) */\n      swap6\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30121:30627  function transferFrom(... */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32219:32338  function setFee(uint256 _buy, uint256 _sell) external onlyOwner {... */\n    tag_78:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13448:13461  _checkOwner() */\n      tag_181\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13448:13459  _checkOwner */\n      tag_182\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13448:13461  _checkOwner() */\n      jump\t// in\n    tag_181:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32293:32299  buyTax */\n      0x09\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32293:32306  buyTax = _buy */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32316:32323  sellTax */\n      0x0a\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32316:32331  sellTax = _sell */\n      sstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32219:32338  function setFee(uint256 _buy, uint256 _sell) external onlyOwner {... */\n      jump\t// out\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29641:29764  function updateTransactionTimeLimit(uint256 _seconds) external onlyOwner {... */\n    tag_87:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13448:13461  _checkOwner() */\n      tag_185\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13448:13459  _checkOwner */\n      tag_182\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13448:13461  _checkOwner() */\n      jump\t// in\n    tag_185:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29724:29746  nextTransactionTimeGap */\n      0x0e\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29724:29757  nextTransactionTimeGap = _seconds */\n      sstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29641:29764  function updateTransactionTimeLimit(uint256 _seconds) external onlyOwner {... */\n      jump\t// out\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14210:14311  function renounceOwnership() public virtual onlyOwner {... */\n    tag_96:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13448:13461  _checkOwner() */\n      tag_189\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13448:13459  _checkOwner */\n      tag_182\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13448:13461  _checkOwner() */\n      jump\t// in\n    tag_189:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14274:14304  _transferOwnership(address(0)) */\n      tag_191\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14301:14302  0 */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14274:14292  _transferOwnership */\n      tag_192\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14274:14304  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_191:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14210:14311  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31800:32213  function clearStuckToken(address tokenAddress, uint256 tokens)... */\n    tag_100:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31962:31973  feeReceiver */\n      sload(0x0f)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31897:31909  bool success */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31962:31973  feeReceiver */\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":12351:12361  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31946:31973  _msgSender() == feeReceiver */\n      and\n      eq\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31925:32035  require(... */\n      tag_195\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_164\n      swap1\n      tag_197\n      jump\t// in\n    tag_195:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32050:32056  tokens */\n      dup2\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32060:32061  0 */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32050:32061  tokens == 0 */\n      sub\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32046:32141  if (tokens == 0) {... */\n      tag_198\n      jumpi\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32086:32130  ERC20(tokenAddress).balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32124:32128  this */\n      address\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32086:32130  ERC20(tokenAddress).balanceOf(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2877:2928   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32086:32115  ERC20(tokenAddress).balanceOf */\n      dup5\n      and\n      swap1\n      0x70a08231\n      swap1\n        /* \"#utility.yul\":2850:2868   */\n      0x24\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32086:32130  ERC20(tokenAddress).balanceOf(address(this)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_201\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_201:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_202\n      swap2\n      swap1\n      tag_203\n      jump\t// in\n    tag_202:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32077:32130  tokens = ERC20(tokenAddress).balanceOf(address(this)) */\n      swap2\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32046:32141  if (tokens == 0) {... */\n    tag_198:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32186:32197  feeReceiver */\n      sload(0x0f)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32157:32206  ERC20(tokenAddress).transfer(feeReceiver, tokens) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32186:32197  feeReceiver */\n      swap2\n      dup3\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32157:32206  ERC20(tokenAddress).transfer(feeReceiver, tokens) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5740:5791   */\n      mstore\n        /* \"#utility.yul\":5807:5825   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":5800:5834   */\n      dup5\n      swap1\n      mstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32157:32185  ERC20(tokenAddress).transfer */\n      swap1\n      dup5\n      and\n      swap1\n      0xa9059cbb\n      swap1\n        /* \"#utility.yul\":5713:5731   */\n      0x44\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32157:32206  ERC20(tokenAddress).transfer(feeReceiver, tokens) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_207\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_207:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_208\n      swap2\n      swap1\n      tag_209\n      jump\t// in\n    tag_208:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32150:32206  return ERC20(tokenAddress).transfer(feeReceiver, tokens) */\n      swap4\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31800:32213  function clearStuckToken(address tokenAddress, uint256 tokens)... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":18879:18972  function symbol() public view virtual returns (string memory) {... */\n    tag_109:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":18926:18939  string memory */\n      0x60\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":18958:18965  _symbol */\n      0x04\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":18951:18965  return _symbol */\n      dup1\n      sload\n      tag_150\n      swap1\n      tag_151\n      jump\t// in\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29770:30115  function transfer(address recipient, uint256 amount)... */\n    tag_114:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28864:28877  transferLimit */\n      sload(0x0d)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28887:28919  string memory _type = \"transfer\" */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x08\n      dup2\n      mstore\n      shl(0xc1, 0x3a3930b739b332b9)\n      0x20\n      dup3\n      add\n      mstore\n      0x00\n      swap2\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29876:29886  msg.sender */\n      caller\n      swap2\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29888:29897  recipient */\n      dup6\n      swap2\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29899:29905  amount */\n      dup6\n      swap2\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28668:28686  extcodesize(_addr) */\n      dup5\n      extcodesize\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28713:28721  size > 0 */\n      0xffffffff\n      and\n      iszero\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28930:29209  if (isContract(sender)) {... */\n      tag_220\n      jumpi\n      pop\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28976:28984  buyLimit */\n      sload(0x0b)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28998:29011  _type = \"buy\" */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x03\n      dup2\n      mstore\n      shl(0xe8, 0x627579)\n      0x20\n      dup3\n      add\n      mstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28930:29209  if (isContract(sender)) {... */\n      jump(tag_224)\n    tag_220:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28668:28686  extcodesize(_addr) */\n      dup4\n      extcodesize\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28713:28721  size > 0 */\n      0xffffffff\n      and\n      iszero\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29028:29209  if (isContract(recipient)) {... */\n      tag_223\n      jumpi\n      pop\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29077:29086  sellLimit */\n      sload(0x0c)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29100:29114  _type = \"sell\" */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x04\n      dup2\n      mstore\n      shl(0xe2, 0x1cd95b1b)\n      0x20\n      dup3\n      add\n      mstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29028:29209  if (isContract(recipient)) {... */\n      jump(tag_224)\n    tag_223:\n      pop\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29153:29166  transferLimit */\n      sload(0x0d)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29180:29198  _type = \"transfer\" */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x08\n      dup2\n      mstore\n      shl(0xc1, 0x3a3930b739b332b9)\n      0x20\n      dup3\n      add\n      mstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29028:29209  if (isContract(recipient)) {... */\n    tag_224:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29249:29255  amount */\n      dup3\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29240:29245  limit */\n      dup3\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29240:29255  limit >= amount */\n      lt\n      iszero\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29372:29378  amount */\n      dup4\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29445:29450  _type */\n      dup3\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29534:29539  limit */\n      dup5\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29293:29557  abi.encode(... */\n      add(0x20, mload(0x40))\n      tag_225\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_226\n      jump\t// in\n    tag_225:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29219:29581  require(... */\n      swap1\n      tag_227\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_164\n      swap2\n      swap1\n      tag_38\n      jump\t// in\n    tag_227:\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29961:29962  0 */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29952:29958  amount */\n      dup8\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29952:29962  amount > 0 */\n      gt\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29944:29981  require(amount > 0, \"Invalid amount\") */\n      tag_230\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3791:3793   */\n      0x20\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29944:29981  require(amount > 0, \"Invalid amount\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3773:3794   */\n      mstore\n        /* \"#utility.yul\":3830:3832   */\n      0x0e\n        /* \"#utility.yul\":3810:3828   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3803:3833   */\n      mstore\n      shl(0x92, 0x125b9d985b1a5908185b5bdd5b9d)\n        /* \"#utility.yul\":3849:3867   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3842:3886   */\n      mstore\n        /* \"#utility.yul\":3903:3921   */\n      0x64\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29944:29981  require(amount > 0, \"Invalid amount\") */\n      tag_164\n        /* \"#utility.yul\":3589:3927   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29944:29981  require(amount > 0, \"Invalid amount\") */\n    tag_230:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29999:30022  recipient != address(0) */\n      dup9\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29991:30044  require(recipient != address(0), \"Invalid recipient\") */\n      tag_232\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4134:4136   */\n      0x20\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29991:30044  require(recipient != address(0), \"Invalid recipient\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4116:4137   */\n      mstore\n        /* \"#utility.yul\":4173:4175   */\n      0x11\n        /* \"#utility.yul\":4153:4171   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4146:4176   */\n      mstore\n      shl(0x7a, 0x125b9d985b1a59081c9958da5c1a595b9d)\n        /* \"#utility.yul\":4192:4210   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4185:4232   */\n      mstore\n        /* \"#utility.yul\":4249:4267   */\n      0x64\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29991:30044  require(recipient != address(0), \"Invalid recipient\") */\n      tag_164\n        /* \"#utility.yul\":3932:4273   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29991:30044  require(recipient != address(0), \"Invalid recipient\") */\n    tag_232:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30062:30108  _transferFrom(_msgSender(), recipient, amount) */\n      tag_234\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":12351:12361  msg.sender */\n      caller\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30090:30099  recipient */\n      dup10\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30101:30107  amount */\n      dup10\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30062:30075  _transferFrom */\n      tag_178\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30062:30108  _transferFrom(_msgSender(), recipient, amount) */\n      jump\t// in\n    tag_234:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30055:30108  return _transferFrom(_msgSender(), recipient, amount) */\n      swap9\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29770:30115  function transfer(address recipient, uint256 amount)... */\n      swap8\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32344:32566  function setFeeReceiver(address _feeReceiver) external {... */\n    tag_137:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32446:32457  feeReceiver */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x0f))\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":12351:12361  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32430:32457  _msgSender() == feeReceiver */\n      and\n      eq\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32409:32522  require(... */\n      tag_239\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7525:7527   */\n      0x20\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32409:32522  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7507:7528   */\n      mstore\n        /* \"#utility.yul\":7564:7566   */\n      0x27\n        /* \"#utility.yul\":7544:7562   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7537:7567   */\n      mstore\n        /* \"#utility.yul\":7603:7637   */\n      0x596f7520617265206e6f7420616c6c6f77656420746f20736574206665652072\n        /* \"#utility.yul\":7583:7601   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7576:7638   */\n      mstore\n      shl(0xc9, 0x32b1b2b4bb32b9)\n        /* \"#utility.yul\":7654:7672   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7647:7684   */\n      mstore\n        /* \"#utility.yul\":7701:7720   */\n      0x84\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32409:32522  require(... */\n      tag_164\n        /* \"#utility.yul\":7323:7726   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32409:32522  require(... */\n    tag_239:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32533:32544  feeReceiver */\n      0x0f\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32533:32559  feeReceiver = _feeReceiver */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":32344:32566  function setFeeReceiver(address _feeReceiver) external {... */\n      jump\t// out\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14460:14675  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_141:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13448:13461  _checkOwner() */\n      tag_243\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13448:13459  _checkOwner */\n      tag_182\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13448:13461  _checkOwner() */\n      jump\t// in\n    tag_243:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14544:14566  newOwner == address(0) */\n      dup2\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14540:14631  if (newOwner == address(0)) {... */\n      tag_245\n      jumpi\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14589:14620  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0x1e4fbdf7)\n      dup2\n      mstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14617:14618  0 */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14589:14620  OwnableInvalidOwner(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2877:2928   */\n      mstore\n        /* \"#utility.yul\":2850:2868   */\n      0x24\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14589:14620  OwnableInvalidOwner(address(0)) */\n      tag_164\n        /* \"#utility.yul\":2731:2934   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14540:14631  if (newOwner == address(0)) {... */\n    tag_245:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14640:14668  _transferOwnership(newOwner) */\n      tag_247\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14659:14667  newOwner */\n      dup2\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14640:14658  _transferOwnership */\n      tag_192\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14640:14668  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_247:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14460:14675  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31574:31794  function manualSend() external {... */\n    tag_144:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31652:31663  feeReceiver */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x0f))\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":12351:12361  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31636:31663  _msgSender() == feeReceiver */\n      and\n      eq\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31615:31725  require(... */\n      tag_250\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_164\n      swap1\n      tag_197\n      jump\t// in\n    tag_250:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31743:31754  feeReceiver */\n      sload(0x0f)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31735:31787  payable(feeReceiver).transfer(address(this).balance) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31743:31754  feeReceiver */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31765:31786  address(this).balance */\n      selfbalance\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31735:31787  payable(feeReceiver).transfer(address(this).balance) */\n      dup1\n      iszero\n      0x08fc\n      mul\n      swap2\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31743:31754  feeReceiver */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31735:31787  payable(feeReceiver).transfer(address(this).balance) */\n      dup2\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31743:31754  feeReceiver */\n      dup2\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31735:31787  payable(feeReceiver).transfer(address(this).balance) */\n      dup2\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31765:31786  address(this).balance */\n      dup6\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31743:31754  feeReceiver */\n      dup9\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31735:31787  payable(feeReceiver).transfer(address(this).balance) */\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_247\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":25592:25720  function _approve(address owner, address spender, uint256 value) internal {... */\n    tag_160:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":25676:25713  _approve(owner, spender, value, true) */\n      tag_256\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":25685:25690  owner */\n      dup4\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":25692:25699  spender */\n      dup4\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":25701:25706  value */\n      dup4\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":25708:25712  true */\n      0x01\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":25676:25684  _approve */\n      tag_257\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":25676:25713  _approve(owner, spender, value, true) */\n      jump\t// in\n    tag_256:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":25592:25720  function _approve(address owner, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30633:31060  function _transferFrom(... */\n    tag_178:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28864:28877  transferLimit */\n      sload(0x0d)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28887:28919  string memory _type = \"transfer\" */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x08\n      dup2\n      mstore\n      shl(0xc1, 0x3a3930b739b332b9)\n      0x20\n      dup3\n      add\n      mstore\n      0x00\n      swap2\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30759:30765  sender */\n      dup6\n      swap2\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30767:30776  recipient */\n      dup6\n      swap2\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30778:30784  amount */\n      dup6\n      swap2\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28668:28686  extcodesize(_addr) */\n      dup5\n      extcodesize\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28713:28721  size > 0 */\n      0xffffffff\n      and\n      iszero\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28930:29209  if (isContract(sender)) {... */\n      tag_260\n      jumpi\n      pop\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28976:28984  buyLimit */\n      sload(0x0b)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28998:29011  _type = \"buy\" */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x03\n      dup2\n      mstore\n      shl(0xe8, 0x627579)\n      0x20\n      dup3\n      add\n      mstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28930:29209  if (isContract(sender)) {... */\n      jump(tag_264)\n    tag_260:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28668:28686  extcodesize(_addr) */\n      dup4\n      extcodesize\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":28713:28721  size > 0 */\n      0xffffffff\n      and\n      iszero\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29028:29209  if (isContract(recipient)) {... */\n      tag_263\n      jumpi\n      pop\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29077:29086  sellLimit */\n      sload(0x0c)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29100:29114  _type = \"sell\" */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x04\n      dup2\n      mstore\n      shl(0xe2, 0x1cd95b1b)\n      0x20\n      dup3\n      add\n      mstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29028:29209  if (isContract(recipient)) {... */\n      jump(tag_264)\n    tag_263:\n      pop\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29153:29166  transferLimit */\n      sload(0x0d)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29180:29198  _type = \"transfer\" */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x08\n      dup2\n      mstore\n      shl(0xc1, 0x3a3930b739b332b9)\n      0x20\n      dup3\n      add\n      mstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29028:29209  if (isContract(recipient)) {... */\n    tag_264:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29249:29255  amount */\n      dup3\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29240:29245  limit */\n      dup3\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29240:29255  limit >= amount */\n      lt\n      iszero\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29372:29378  amount */\n      dup4\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29445:29450  _type */\n      dup3\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29534:29539  limit */\n      dup5\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29293:29557  abi.encode(... */\n      add(0x20, mload(0x40))\n      tag_265\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_226\n      jump\t// in\n    tag_265:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":29219:29581  require(... */\n      swap1\n      tag_266\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_164\n      swap2\n      swap1\n      tag_38\n      jump\t// in\n    tag_266:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":19993:20011  _balances[account] */\n      dup10\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30811:30832  uint256 senderBalance */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":19993:20011  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30870:30893  senderBalance >= amount */\n      dup8\n      dup2\n      lt\n      iszero\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30862:30918  require(senderBalance >= amount, \"Insufficient Balance\") */\n      tag_270\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7933:7935   */\n      0x20\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30862:30918  require(senderBalance >= amount, \"Insufficient Balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7915:7936   */\n      mstore\n        /* \"#utility.yul\":7972:7974   */\n      0x14\n        /* \"#utility.yul\":7952:7970   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7945:7975   */\n      mstore\n      shl(0x60, 0x496e73756666696369656e742042616c616e6365)\n        /* \"#utility.yul\":7991:8009   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7984:8034   */\n      mstore\n        /* \"#utility.yul\":8051:8069   */\n      0x64\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30862:30918  require(senderBalance >= amount, \"Insufficient Balance\") */\n      tag_164\n        /* \"#utility.yul\":7731:8075   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30862:30918  require(senderBalance >= amount, \"Insufficient Balance\") */\n    tag_270:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30929:30951  uint256 amountReceived */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30954:30977  takeFee(sender, amount) */\n      tag_273\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30962:30968  sender */\n      dup12\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30970:30976  amount */\n      dup11\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30954:30961  takeFee */\n      tag_274\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30954:30977  takeFee(sender, amount) */\n      jump\t// in\n    tag_273:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30929:30977  uint256 amountReceived = takeFee(sender, amount) */\n      swap1\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30987:31031  _transfer(sender, recipient, amountReceived) */\n      tag_275\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30997:31003  sender */\n      dup12\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31005:31014  recipient */\n      dup12\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31016:31030  amountReceived */\n      dup4\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30987:30996  _transfer */\n      tag_276\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30987:31031  _transfer(sender, recipient, amountReceived) */\n      jump\t// in\n    tag_275:\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31049:31053  true */\n      0x01\n      swap11\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":30633:31060  function _transferFrom(... */\n      swap10\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13713:13875  function _checkOwner() internal view virtual {... */\n    tag_182:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13627:13633  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x05))\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":12351:12361  msg.sender */\n      caller\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13772:13795  owner() != _msgSender() */\n      eq\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13768:13869  if (owner() != _msgSender()) {... */\n      tag_191\n      jumpi\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13818:13858  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      shl(0xe0, 0x118cdaa7)\n      dup2\n      mstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":12351:12361  msg.sender */\n      caller\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13818:13858  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2877:2928   */\n      mstore\n        /* \"#utility.yul\":2850:2868   */\n      0x24\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":13818:13858  OwnableUnauthorizedAccount(_msgSender()) */\n      tag_164\n        /* \"#utility.yul\":2731:2934   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14829:15016  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_192:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14921:14927  _owner */\n      0x05\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14937:14954  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14969:15009  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14921:14927  _owner */\n      swap2\n      and\n      swap2\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14937:14954  _owner = newOwner */\n      swap1\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14921:14927  _owner */\n      dup3\n      swap1\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14969:15009  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14902:14918  address oldOwner */\n      0x00\n      swap1\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14969:15009  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14892:15016  {... */\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":14829:15016  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26552:26984  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n    tag_257:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26664:26683  owner == address(0) */\n      dup5\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26660:26749  if (owner == address(0)) {... */\n      tag_286\n      jumpi\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26706:26738  ERC20InvalidApprover(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xe602df05)\n      dup2\n      mstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26735:26736  0 */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26706:26738  ERC20InvalidApprover(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2877:2928   */\n      mstore\n        /* \"#utility.yul\":2850:2868   */\n      0x24\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26706:26738  ERC20InvalidApprover(address(0)) */\n      tag_164\n        /* \"#utility.yul\":2731:2934   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26660:26749  if (owner == address(0)) {... */\n    tag_286:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26762:26783  spender == address(0) */\n      dup4\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26758:26848  if (spender == address(0)) {... */\n      tag_288\n      jumpi\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26806:26837  ERC20InvalidSpender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4a1406b1)\n      dup2\n      mstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26834:26835  0 */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26806:26837  ERC20InvalidSpender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2877:2928   */\n      mstore\n        /* \"#utility.yul\":2850:2868   */\n      0x24\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26806:26837  ERC20InvalidSpender(address(0)) */\n      tag_164\n        /* \"#utility.yul\":2731:2934   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26758:26848  if (spender == address(0)) {... */\n    tag_288:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26857:26875  _allowances[owner] */\n      dup1\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26857:26868  _allowances */\n      0x01\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26857:26875  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26857:26884  _allowances[owner][spender] */\n      swap4\n      dup8\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26857:26892  _allowances[owner][spender] = value */\n      dup3\n      swap1\n      sstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26902:26978  if (emitEvent) {... */\n      dup1\n      iszero\n      tag_290\n      jumpi\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26952:26959  spender */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26936:26967  Approval(owner, spender, value) */\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26945:26950  owner */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26936:26967  Approval(owner, spender, value) */\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26961:26966  value */\n      dup5\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26936:26967  Approval(owner, spender, value) */\n      mload(0x40)\n      tag_291\n      swap2\n        /* \"#utility.yul\":1354:1379   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1342:1344   */\n      0x20\n        /* \"#utility.yul\":1327:1345   */\n      add\n      swap1\n        /* \"#utility.yul\":1208:1385   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26936:26967  Approval(owner, spender, value) */\n    tag_291:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26902:26978  if (emitEvent) {... */\n    tag_290:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":26552:26984  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31066:31568  function takeFee(address sender, uint256 amount)... */\n    tag_274:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31149:31156  uint256 */\n      0x00\n      dup1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31186:31208  sender == _msgSender() */\n      dup5\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":12351:12361  msg.sender */\n      caller\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31186:31208  sender == _msgSender() */\n      eq\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31186:31227  sender == _msgSender() ? sellTax : buyTax */\n      tag_294\n      jumpi\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31221:31227  buyTax */\n      sload(0x09)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31186:31227  sender == _msgSender() ? sellTax : buyTax */\n      jump(tag_295)\n    tag_294:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31211:31218  sellTax */\n      sload(0x0a)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31186:31227  sender == _msgSender() ? sellTax : buyTax */\n    tag_295:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31172:31227  uint256 fee = sender == _msgSender() ? sellTax : buyTax */\n      swap1\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31238:31255  uint256 feeAmount */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31258:31294  amount.mul(fee).div(FEE_DENOMINATOR) */\n      tag_296\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":27976:27980  1000 */\n      0x03e8\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31258:31273  amount.mul(fee) */\n      tag_297\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31258:31264  amount */\n      dup7\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31172:31227  uint256 fee = sender == _msgSender() ? sellTax : buyTax */\n      dup6\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31258:31268  amount.mul */\n      tag_298\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31258:31273  amount.mul(fee) */\n      jump\t// in\n    tag_297:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31258:31277  amount.mul(fee).div */\n      swap1\n      tag_299\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31258:31294  amount.mul(fee).div(FEE_DENOMINATOR) */\n      jump\t// in\n    tag_296:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31238:31294  uint256 feeAmount = amount.mul(fee).div(FEE_DENOMINATOR) */\n      swap1\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31304:31331  uint256 transferable_amount */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31334:31355  amount.sub(feeAmount) */\n      tag_300\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31334:31340  amount */\n      dup6\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31238:31294  uint256 feeAmount = amount.mul(fee).div(FEE_DENOMINATOR) */\n      dup4\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31334:31344  amount.sub */\n      tag_301\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31334:31355  amount.sub(feeAmount) */\n      jump\t// in\n    tag_300:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31304:31355  uint256 transferable_amount = amount.sub(feeAmount) */\n      swap1\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31366:31387  uint256 senderBalance */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31390:31407  balanceOf(sender) */\n      tag_302\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31400:31406  sender */\n      dup8\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":19993:20011  _balances[account] */\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":19967:19974  uint256 */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":19993:20011  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":19902:20018  function balanceOf(address account) public view virtual returns (uint256) {... */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31390:31407  balanceOf(sender) */\n    tag_302:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31366:31407  uint256 senderBalance = balanceOf(sender) */\n      swap1\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31442:31448  amount */\n      dup6\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31425:31438  senderBalance */\n      dup2\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31425:31448  senderBalance >= amount */\n      lt\n      iszero\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31417:31473  require(senderBalance >= amount, \"Insufficient Balance\") */\n      tag_303\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7933:7935   */\n      0x20\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31417:31473  require(senderBalance >= amount, \"Insufficient Balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7915:7936   */\n      mstore\n        /* \"#utility.yul\":7972:7974   */\n      0x14\n        /* \"#utility.yul\":7952:7970   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7945:7975   */\n      mstore\n      shl(0x60, 0x496e73756666696369656e742042616c616e6365)\n        /* \"#utility.yul\":7991:8009   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7984:8034   */\n      mstore\n        /* \"#utility.yul\":8051:8069   */\n      0x64\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31417:31473  require(senderBalance >= amount, \"Insufficient Balance\") */\n      tag_164\n        /* \"#utility.yul\":7731:8075   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31417:31473  require(senderBalance >= amount, \"Insufficient Balance\") */\n    tag_303:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31501:31512  feeReceiver */\n      sload(0x0f)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31483:31524  _transfer(sender, feeReceiver, feeAmount) */\n      tag_305\n      swap1\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31493:31499  sender */\n      dup9\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31501:31512  feeReceiver */\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31514:31523  feeAmount */\n      dup6\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31483:31492  _transfer */\n      tag_276\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31483:31524  _transfer(sender, feeReceiver, feeAmount) */\n      jump\t// in\n    tag_305:\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31542:31561  transferable_amount */\n      swap6\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":31066:31568  function takeFee(address sender, uint256 amount)... */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22259:22559  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_276:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22342:22360  from == address(0) */\n      dup4\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22338:22424  if (from == address(0)) {... */\n      tag_307\n      jumpi\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22383:22413  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4b637e8f)\n      dup2\n      mstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22410:22411  0 */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22383:22413  ERC20InvalidSender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2877:2928   */\n      mstore\n        /* \"#utility.yul\":2850:2868   */\n      0x24\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22383:22413  ERC20InvalidSender(address(0)) */\n      tag_164\n        /* \"#utility.yul\":2731:2934   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22338:22424  if (from == address(0)) {... */\n    tag_307:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22437:22453  to == address(0) */\n      dup3\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22433:22519  if (to == address(0)) {... */\n      tag_309\n      jumpi\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22476:22508  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xec442f05)\n      dup2\n      mstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22505:22506  0 */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22476:22508  ERC20InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2877:2928   */\n      mstore\n        /* \"#utility.yul\":2850:2868   */\n      0x24\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22476:22508  ERC20InvalidReceiver(address(0)) */\n      tag_164\n        /* \"#utility.yul\":2731:2934   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22433:22519  if (to == address(0)) {... */\n    tag_309:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22528:22552  _update(from, to, value) */\n      tag_256\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22536:22540  from */\n      dup4\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22542:22544  to */\n      dup4\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22546:22551  value */\n      dup4\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22528:22535  _update */\n      tag_312\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22528:22552  _update(from, to, value) */\n      jump\t// in\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":3042:3138  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_298:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":3100:3107  uint256 */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":3126:3131  a * b */\n      tag_208\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":3130:3131  b */\n      dup3\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":3126:3127  a */\n      dup5\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":3126:3131  a * b */\n      tag_315\n      jump\t// in\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":3427:3523  function div(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_299:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":3485:3492  uint256 */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":3511:3516  a / b */\n      tag_208\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":3515:3516  b */\n      dup3\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":3511:3512  a */\n      dup5\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":3511:3516  a / b */\n      tag_318\n      jump\t// in\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":2699:2795  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_301:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":2757:2764  uint256 */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":2783:2788  a - b */\n      tag_208\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":2787:2788  b */\n      dup3\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":2783:2784  a */\n      dup5\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":2783:2788  a - b */\n      tag_321\n      jump\t// in\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22874:23981  function _update(address from, address to, uint256 value) internal virtual {... */\n    tag_312:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22963:22981  from == address(0) */\n      dup4\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22959:23499  if (from == address(0)) {... */\n      tag_323\n      jumpi\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23115:23120  value */\n      dup1\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23099:23111  _totalSupply */\n      0x02\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23099:23120  _totalSupply += value */\n      dup3\n      dup3\n      sload\n      tag_324\n      swap2\n      swap1\n      tag_325\n      jump\t// in\n    tag_324:\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22959:23499  if (from == address(0)) {... */\n      tag_326\n      swap1\n      pop\n      jump\n    tag_323:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23173:23188  _balances[from] */\n      dup4\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23151:23170  uint256 fromBalance */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23173:23188  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23206:23225  fromBalance < value */\n      dup2\n      dup2\n      lt\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23202:23317  if (fromBalance < value) {... */\n      iszero\n      tag_327\n      jumpi\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23252:23302  ERC20InsufficientBalance(from, fromBalance, value) */\n      mload(0x40)\n      shl(0xe2, 0x391434e3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":9090:9122   */\n      dup6\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23252:23302  ERC20InsufficientBalance(from, fromBalance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9072:9123   */\n      mstore\n        /* \"#utility.yul\":9139:9157   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":9132:9166   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":9182:9200   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":9175:9209   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":9045:9063   */\n      0x64\n      add\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23252:23302  ERC20InsufficientBalance(from, fromBalance, value) */\n      tag_164\n        /* \"#utility.yul\":8870:9215   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23202:23317  if (fromBalance < value) {... */\n    tag_327:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23437:23452  _balances[from] */\n      dup5\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23437:23446  _balances */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23437:23452  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23455:23474  fromBalance - value */\n      swap1\n      dup3\n      swap1\n      sub\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23437:23474  _balances[from] = fromBalance - value */\n      swap1\n      sstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22959:23499  if (from == address(0)) {... */\n    tag_326:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23513:23529  to == address(0) */\n      dup3\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23509:23934  if (to == address(0)) {... */\n      tag_330\n      jumpi\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23676:23688  _totalSupply */\n      0x02\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23676:23697  _totalSupply -= value */\n      dup1\n      sload\n      dup3\n      swap1\n      sub\n      swap1\n      sstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23509:23934  if (to == address(0)) {... */\n      jump(tag_331)\n    tag_330:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23887:23900  _balances[to] */\n      dup3\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23887:23896  _balances */\n      0x00\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23887:23900  _balances[to] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23887:23909  _balances[to] += value */\n      dup1\n      sload\n      dup3\n      add\n      swap1\n      sstore\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23509:23934  if (to == address(0)) {... */\n    tag_331:\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23964:23966  to */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23949:23974  Transfer(from, to, value) */\n      and\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23958:23962  from */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23949:23974  Transfer(from, to, value) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23968:23973  value */\n      dup4\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23949:23974  Transfer(from, to, value) */\n      mload(0x40)\n      tag_332\n      swap2\n        /* \"#utility.yul\":1354:1379   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1342:1344   */\n      0x20\n        /* \"#utility.yul\":1327:1345   */\n      add\n      swap1\n        /* \"#utility.yul\":1208:1385   */\n      jump\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":23949:23974  Transfer(from, to, value) */\n    tag_332:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":22874:23981  function _update(address from, address to, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:303   */\n    tag_333:\n        /* \"#utility.yul\":56:59   */\n      0x00\n        /* \"#utility.yul\":94:99   */\n      dup2\n        /* \"#utility.yul\":88:100   */\n      mload\n        /* \"#utility.yul\":121:127   */\n      dup1\n        /* \"#utility.yul\":116:119   */\n      dup5\n        /* \"#utility.yul\":109:128   */\n      mstore\n        /* \"#utility.yul\":177:183   */\n      dup1\n        /* \"#utility.yul\":170:174   */\n      0x20\n        /* \"#utility.yul\":163:168   */\n      dup5\n        /* \"#utility.yul\":159:175   */\n      add\n        /* \"#utility.yul\":152:156   */\n      0x20\n        /* \"#utility.yul\":147:150   */\n      dup7\n        /* \"#utility.yul\":143:157   */\n      add\n        /* \"#utility.yul\":137:184   */\n      mcopy\n        /* \"#utility.yul\":229:230   */\n      0x00\n        /* \"#utility.yul\":222:226   */\n      0x20\n        /* \"#utility.yul\":213:219   */\n      dup3\n        /* \"#utility.yul\":208:211   */\n      dup7\n        /* \"#utility.yul\":204:220   */\n      add\n        /* \"#utility.yul\":200:227   */\n      add\n        /* \"#utility.yul\":193:231   */\n      mstore\n        /* \"#utility.yul\":292:296   */\n      0x20\n        /* \"#utility.yul\":285:287   */\n      0x1f\n        /* \"#utility.yul\":281:288   */\n      not\n        /* \"#utility.yul\":276:278   */\n      0x1f\n        /* \"#utility.yul\":268:274   */\n      dup4\n        /* \"#utility.yul\":264:279   */\n      add\n        /* \"#utility.yul\":260:289   */\n      and\n        /* \"#utility.yul\":255:258   */\n      dup6\n        /* \"#utility.yul\":251:290   */\n      add\n        /* \"#utility.yul\":247:297   */\n      add\n        /* \"#utility.yul\":240:297   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":14:303   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":308:528   */\n    tag_38:\n        /* \"#utility.yul\":457:459   */\n      0x20\n        /* \"#utility.yul\":446:455   */\n      dup2\n        /* \"#utility.yul\":439:460   */\n      mstore\n        /* \"#utility.yul\":420:424   */\n      0x00\n        /* \"#utility.yul\":477:522   */\n      tag_208\n        /* \"#utility.yul\":518:520   */\n      0x20\n        /* \"#utility.yul\":507:516   */\n      dup4\n        /* \"#utility.yul\":503:521   */\n      add\n        /* \"#utility.yul\":495:501   */\n      dup5\n        /* \"#utility.yul\":477:522   */\n      tag_333\n      jump\t// in\n        /* \"#utility.yul\":533:706   */\n    tag_334:\n        /* \"#utility.yul\":601:621   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":650:681   */\n      dup2\n      and\n        /* \"#utility.yul\":640:682   */\n      dup2\n      eq\n        /* \"#utility.yul\":630:700   */\n      tag_341\n      jumpi\n        /* \"#utility.yul\":696:697   */\n      0x00\n        /* \"#utility.yul\":693:694   */\n      dup1\n        /* \"#utility.yul\":686:698   */\n      revert\n        /* \"#utility.yul\":630:700   */\n    tag_341:\n        /* \"#utility.yul\":533:706   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":711:1011   */\n    tag_42:\n        /* \"#utility.yul\":779:785   */\n      0x00\n        /* \"#utility.yul\":787:793   */\n      dup1\n        /* \"#utility.yul\":840:842   */\n      0x40\n        /* \"#utility.yul\":828:837   */\n      dup4\n        /* \"#utility.yul\":819:826   */\n      dup6\n        /* \"#utility.yul\":815:838   */\n      sub\n        /* \"#utility.yul\":811:843   */\n      slt\n        /* \"#utility.yul\":808:860   */\n      iszero\n      tag_343\n      jumpi\n        /* \"#utility.yul\":856:857   */\n      0x00\n        /* \"#utility.yul\":853:854   */\n      dup1\n        /* \"#utility.yul\":846:858   */\n      revert\n        /* \"#utility.yul\":808:860   */\n    tag_343:\n        /* \"#utility.yul\":879:908   */\n      tag_344\n        /* \"#utility.yul\":898:907   */\n      dup4\n        /* \"#utility.yul\":879:908   */\n      tag_334\n      jump\t// in\n    tag_344:\n        /* \"#utility.yul\":869:908   */\n      swap5\n        /* \"#utility.yul\":977:979   */\n      0x20\n        /* \"#utility.yul\":962:980   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":949:981   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":711:1011   */\n      jump\t// out\n        /* \"#utility.yul\":1390:1764   */\n    tag_54:\n        /* \"#utility.yul\":1467:1473   */\n      0x00\n        /* \"#utility.yul\":1475:1481   */\n      dup1\n        /* \"#utility.yul\":1483:1489   */\n      0x00\n        /* \"#utility.yul\":1536:1538   */\n      0x60\n        /* \"#utility.yul\":1524:1533   */\n      dup5\n        /* \"#utility.yul\":1515:1522   */\n      dup7\n        /* \"#utility.yul\":1511:1534   */\n      sub\n        /* \"#utility.yul\":1507:1539   */\n      slt\n        /* \"#utility.yul\":1504:1556   */\n      iszero\n      tag_348\n      jumpi\n        /* \"#utility.yul\":1552:1553   */\n      0x00\n        /* \"#utility.yul\":1549:1550   */\n      dup1\n        /* \"#utility.yul\":1542:1554   */\n      revert\n        /* \"#utility.yul\":1504:1556   */\n    tag_348:\n        /* \"#utility.yul\":1575:1604   */\n      tag_349\n        /* \"#utility.yul\":1594:1603   */\n      dup5\n        /* \"#utility.yul\":1575:1604   */\n      tag_334\n      jump\t// in\n    tag_349:\n        /* \"#utility.yul\":1565:1604   */\n      swap3\n      pop\n        /* \"#utility.yul\":1623:1661   */\n      tag_350\n        /* \"#utility.yul\":1657:1659   */\n      0x20\n        /* \"#utility.yul\":1646:1655   */\n      dup6\n        /* \"#utility.yul\":1642:1660   */\n      add\n        /* \"#utility.yul\":1623:1661   */\n      tag_334\n      jump\t// in\n    tag_350:\n        /* \"#utility.yul\":1390:1764   */\n      swap3\n      swap6\n        /* \"#utility.yul\":1613:1661   */\n      swap3\n      swap5\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1730:1732   */\n      0x40\n        /* \"#utility.yul\":1715:1733   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":1702:1734   */\n      calldataload\n      swap1\n        /* \"#utility.yul\":1390:1764   */\n      jump\t// out\n        /* \"#utility.yul\":1958:2304   */\n    tag_77:\n        /* \"#utility.yul\":2026:2032   */\n      0x00\n        /* \"#utility.yul\":2034:2040   */\n      dup1\n        /* \"#utility.yul\":2087:2089   */\n      0x40\n        /* \"#utility.yul\":2075:2084   */\n      dup4\n        /* \"#utility.yul\":2066:2073   */\n      dup6\n        /* \"#utility.yul\":2062:2085   */\n      sub\n        /* \"#utility.yul\":2058:2090   */\n      slt\n        /* \"#utility.yul\":2055:2107   */\n      iszero\n      tag_353\n      jumpi\n        /* \"#utility.yul\":2103:2104   */\n      0x00\n        /* \"#utility.yul\":2100:2101   */\n      dup1\n        /* \"#utility.yul\":2093:2105   */\n      revert\n        /* \"#utility.yul\":2055:2107   */\n    tag_353:\n      pop\n      pop\n        /* \"#utility.yul\":2148:2171   */\n      dup1\n      calldataload\n      swap3\n        /* \"#utility.yul\":2268:2270   */\n      0x20\n        /* \"#utility.yul\":2253:2271   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":2240:2272   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":1958:2304   */\n      jump\t// out\n        /* \"#utility.yul\":2309:2535   */\n    tag_86:\n        /* \"#utility.yul\":2368:2374   */\n      0x00\n        /* \"#utility.yul\":2421:2423   */\n      0x20\n        /* \"#utility.yul\":2409:2418   */\n      dup3\n        /* \"#utility.yul\":2400:2407   */\n      dup5\n        /* \"#utility.yul\":2396:2419   */\n      sub\n        /* \"#utility.yul\":2392:2424   */\n      slt\n        /* \"#utility.yul\":2389:2441   */\n      iszero\n      tag_355\n      jumpi\n        /* \"#utility.yul\":2437:2438   */\n      0x00\n        /* \"#utility.yul\":2434:2435   */\n      dup1\n        /* \"#utility.yul\":2427:2439   */\n      revert\n        /* \"#utility.yul\":2389:2441   */\n    tag_355:\n      pop\n        /* \"#utility.yul\":2482:2505   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":2309:2535   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2540:2726   */\n    tag_91:\n        /* \"#utility.yul\":2599:2605   */\n      0x00\n        /* \"#utility.yul\":2652:2654   */\n      0x20\n        /* \"#utility.yul\":2640:2649   */\n      dup3\n        /* \"#utility.yul\":2631:2638   */\n      dup5\n        /* \"#utility.yul\":2627:2650   */\n      sub\n        /* \"#utility.yul\":2623:2655   */\n      slt\n        /* \"#utility.yul\":2620:2672   */\n      iszero\n      tag_357\n      jumpi\n        /* \"#utility.yul\":2668:2669   */\n      0x00\n        /* \"#utility.yul\":2665:2666   */\n      dup1\n        /* \"#utility.yul\":2658:2670   */\n      revert\n        /* \"#utility.yul\":2620:2672   */\n    tag_357:\n        /* \"#utility.yul\":2691:2720   */\n      tag_208\n        /* \"#utility.yul\":2710:2719   */\n      dup3\n        /* \"#utility.yul\":2691:2720   */\n      tag_334\n      jump\t// in\n        /* \"#utility.yul\":2939:3199   */\n    tag_131:\n        /* \"#utility.yul\":3007:3013   */\n      0x00\n        /* \"#utility.yul\":3015:3021   */\n      dup1\n        /* \"#utility.yul\":3068:3070   */\n      0x40\n        /* \"#utility.yul\":3056:3065   */\n      dup4\n        /* \"#utility.yul\":3047:3054   */\n      dup6\n        /* \"#utility.yul\":3043:3066   */\n      sub\n        /* \"#utility.yul\":3039:3071   */\n      slt\n        /* \"#utility.yul\":3036:3088   */\n      iszero\n      tag_361\n      jumpi\n        /* \"#utility.yul\":3084:3085   */\n      0x00\n        /* \"#utility.yul\":3081:3082   */\n      dup1\n        /* \"#utility.yul\":3074:3086   */\n      revert\n        /* \"#utility.yul\":3036:3088   */\n    tag_361:\n        /* \"#utility.yul\":3107:3136   */\n      tag_362\n        /* \"#utility.yul\":3126:3135   */\n      dup4\n        /* \"#utility.yul\":3107:3136   */\n      tag_334\n      jump\t// in\n    tag_362:\n        /* \"#utility.yul\":3097:3136   */\n      swap2\n      pop\n        /* \"#utility.yul\":3155:3193   */\n      tag_363\n        /* \"#utility.yul\":3189:3191   */\n      0x20\n        /* \"#utility.yul\":3178:3187   */\n      dup5\n        /* \"#utility.yul\":3174:3192   */\n      add\n        /* \"#utility.yul\":3155:3193   */\n      tag_334\n      jump\t// in\n    tag_363:\n        /* \"#utility.yul\":3145:3193   */\n      swap1\n      pop\n        /* \"#utility.yul\":2939:3199   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3204:3584   */\n    tag_151:\n        /* \"#utility.yul\":3283:3284   */\n      0x01\n        /* \"#utility.yul\":3279:3291   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":3326:3338   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":3347:3408   */\n      tag_365\n      jumpi\n        /* \"#utility.yul\":3401:3405   */\n      0x7f\n        /* \"#utility.yul\":3393:3399   */\n      dup3\n        /* \"#utility.yul\":3389:3406   */\n      and\n        /* \"#utility.yul\":3379:3406   */\n      swap2\n      pop\n        /* \"#utility.yul\":3347:3408   */\n    tag_365:\n        /* \"#utility.yul\":3454:3456   */\n      0x20\n        /* \"#utility.yul\":3446:3452   */\n      dup3\n        /* \"#utility.yul\":3443:3457   */\n      lt\n        /* \"#utility.yul\":3423:3441   */\n      dup2\n        /* \"#utility.yul\":3420:3458   */\n      sub\n        /* \"#utility.yul\":3417:3578   */\n      tag_366\n      jumpi\n        /* \"#utility.yul\":3500:3510   */\n      0x4e487b71\n        /* \"#utility.yul\":3495:3498   */\n      0xe0\n        /* \"#utility.yul\":3491:3511   */\n      shl\n        /* \"#utility.yul\":3488:3489   */\n      0x00\n        /* \"#utility.yul\":3481:3512   */\n      mstore\n        /* \"#utility.yul\":3535:3539   */\n      0x22\n        /* \"#utility.yul\":3532:3533   */\n      0x04\n        /* \"#utility.yul\":3525:3540   */\n      mstore\n        /* \"#utility.yul\":3563:3567   */\n      0x24\n        /* \"#utility.yul\":3560:3561   */\n      0x00\n        /* \"#utility.yul\":3553:3568   */\n      revert\n        /* \"#utility.yul\":3417:3578   */\n    tag_366:\n      pop\n        /* \"#utility.yul\":3204:3584   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4972:5372   */\n    tag_197:\n        /* \"#utility.yul\":5174:5176   */\n      0x20\n        /* \"#utility.yul\":5156:5177   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5213:5215   */\n      0x24\n        /* \"#utility.yul\":5193:5211   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":5186:5216   */\n      mstore\n        /* \"#utility.yul\":5252:5286   */\n      0x6f6e6c79206665652072656365697665722063616e207472616e736665722066\n        /* \"#utility.yul\":5247:5249   */\n      0x40\n        /* \"#utility.yul\":5232:5250   */\n      dup3\n      add\n        /* \"#utility.yul\":5225:5287   */\n      mstore\n      shl(0xe0, 0x756e6473)\n        /* \"#utility.yul\":5318:5320   */\n      0x60\n        /* \"#utility.yul\":5303:5321   */\n      dup3\n      add\n        /* \"#utility.yul\":5296:5330   */\n      mstore\n        /* \"#utility.yul\":5362:5365   */\n      0x80\n        /* \"#utility.yul\":5347:5366   */\n      add\n      swap1\n        /* \"#utility.yul\":4972:5372   */\n      jump\t// out\n        /* \"#utility.yul\":5377:5561   */\n    tag_203:\n        /* \"#utility.yul\":5447:5453   */\n      0x00\n        /* \"#utility.yul\":5500:5502   */\n      0x20\n        /* \"#utility.yul\":5488:5497   */\n      dup3\n        /* \"#utility.yul\":5479:5486   */\n      dup5\n        /* \"#utility.yul\":5475:5498   */\n      sub\n        /* \"#utility.yul\":5471:5503   */\n      slt\n        /* \"#utility.yul\":5468:5520   */\n      iszero\n      tag_373\n      jumpi\n        /* \"#utility.yul\":5516:5517   */\n      0x00\n        /* \"#utility.yul\":5513:5514   */\n      dup1\n        /* \"#utility.yul\":5506:5518   */\n      revert\n        /* \"#utility.yul\":5468:5520   */\n    tag_373:\n      pop\n        /* \"#utility.yul\":5539:5555   */\n      mload\n      swap2\n        /* \"#utility.yul\":5377:5561   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5845:6122   */\n    tag_209:\n        /* \"#utility.yul\":5912:5918   */\n      0x00\n        /* \"#utility.yul\":5965:5967   */\n      0x20\n        /* \"#utility.yul\":5953:5962   */\n      dup3\n        /* \"#utility.yul\":5944:5951   */\n      dup5\n        /* \"#utility.yul\":5940:5963   */\n      sub\n        /* \"#utility.yul\":5936:5968   */\n      slt\n        /* \"#utility.yul\":5933:5985   */\n      iszero\n      tag_376\n      jumpi\n        /* \"#utility.yul\":5981:5982   */\n      0x00\n        /* \"#utility.yul\":5978:5979   */\n      dup1\n        /* \"#utility.yul\":5971:5983   */\n      revert\n        /* \"#utility.yul\":5933:5985   */\n    tag_376:\n        /* \"#utility.yul\":6013:6022   */\n      dup2\n        /* \"#utility.yul\":6007:6023   */\n      mload\n        /* \"#utility.yul\":6066:6071   */\n      dup1\n        /* \"#utility.yul\":6059:6072   */\n      iszero\n        /* \"#utility.yul\":6052:6073   */\n      iszero\n        /* \"#utility.yul\":6045:6050   */\n      dup2\n        /* \"#utility.yul\":6042:6074   */\n      eq\n        /* \"#utility.yul\":6032:6092   */\n      tag_208\n      jumpi\n        /* \"#utility.yul\":6088:6089   */\n      0x00\n        /* \"#utility.yul\":6085:6086   */\n      dup1\n        /* \"#utility.yul\":6078:6090   */\n      revert\n        /* \"#utility.yul\":6127:7318   */\n    tag_226:\n        /* \"#utility.yul\":6635:6638   */\n      0xc0\n        /* \"#utility.yul\":6624:6633   */\n      dup2\n        /* \"#utility.yul\":6617:6639   */\n      mstore\n        /* \"#utility.yul\":6676:6678   */\n      0x17\n        /* \"#utility.yul\":6670:6673   */\n      0xc0\n        /* \"#utility.yul\":6659:6668   */\n      dup3\n        /* \"#utility.yul\":6655:6674   */\n      add\n        /* \"#utility.yul\":6648:6679   */\n      mstore\n        /* \"#utility.yul\":6716:6741   */\n      0x546865207472616e7366657220616d6f756e74206f6620000000000000000000\n        /* \"#utility.yul\":6710:6713   */\n      0xe0\n        /* \"#utility.yul\":6699:6708   */\n      dup3\n        /* \"#utility.yul\":6695:6714   */\n      add\n        /* \"#utility.yul\":6688:6742   */\n      mstore\n        /* \"#utility.yul\":6780:6786   */\n      dup4\n        /* \"#utility.yul\":6773:6777   */\n      0x20\n        /* \"#utility.yul\":6762:6771   */\n      dup3\n        /* \"#utility.yul\":6758:6778   */\n      add\n        /* \"#utility.yul\":6751:6787   */\n      mstore\n        /* \"#utility.yul\":6823:6826   */\n      0x0100\n        /* \"#utility.yul\":6818:6820   */\n      0x40\n        /* \"#utility.yul\":6807:6816   */\n      dup3\n        /* \"#utility.yul\":6803:6821   */\n      add\n        /* \"#utility.yul\":6796:6827   */\n      mstore\n        /* \"#utility.yul\":6864:6866   */\n      0x15\n        /* \"#utility.yul\":6858:6861   */\n      0x0100\n        /* \"#utility.yul\":6847:6856   */\n      dup3\n        /* \"#utility.yul\":6843:6862   */\n      add\n        /* \"#utility.yul\":6836:6867   */\n      mstore\n      shl(0x5d, 0x01032bc31b2b2b239903a34329030b63637bbb2b21)\n        /* \"#utility.yul\":6898:6901   */\n      0x0120\n        /* \"#utility.yul\":6887:6896   */\n      dup3\n        /* \"#utility.yul\":6883:6902   */\n      add\n        /* \"#utility.yul\":6876:6928   */\n      mstore\n        /* \"#utility.yul\":6964:6967   */\n      0x0140\n        /* \"#utility.yul\":6959:6961   */\n      0x60\n        /* \"#utility.yul\":6948:6957   */\n      dup3\n        /* \"#utility.yul\":6944:6962   */\n      add\n        /* \"#utility.yul\":6937:6968   */\n      mstore\n        /* \"#utility.yul\":6598:6602   */\n      0x00\n        /* \"#utility.yul\":6991:7037   */\n      tag_379\n        /* \"#utility.yul\":7032:7035   */\n      0x0140\n        /* \"#utility.yul\":7021:7030   */\n      dup4\n        /* \"#utility.yul\":7017:7036   */\n      add\n        /* \"#utility.yul\":7009:7015   */\n      dup6\n        /* \"#utility.yul\":6991:7037   */\n      tag_333\n      jump\t// in\n    tag_379:\n        /* \"#utility.yul\":7074:7096   */\n      dup3\n      dup2\n      sub\n        /* \"#utility.yul\":7068:7071   */\n      0x80\n        /* \"#utility.yul\":7053:7072   */\n      dup5\n      add\n        /* \"#utility.yul\":7046:7097   */\n      mstore\n        /* \"#utility.yul\":7121:7123   */\n      0x26\n        /* \"#utility.yul\":7106:7124   */\n      dup2\n      mstore\n        /* \"#utility.yul\":7159:7193   */\n      0x206c696d69742e20546865206d6178696d756d20616c6c6f77656420616d6f75\n        /* \"#utility.yul\":7152:7156   */\n      0x20\n        /* \"#utility.yul\":7140:7157   */\n      dup3\n      add\n        /* \"#utility.yul\":7133:7194   */\n      mstore\n      shl(0xd5, 0x0373a1034b99)\n        /* \"#utility.yul\":7222:7224   */\n      0x40\n        /* \"#utility.yul\":7210:7225   */\n      dup3\n      add\n        /* \"#utility.yul\":7203:7236   */\n      mstore\n        /* \"#utility.yul\":7299:7302   */\n      0xa0\n        /* \"#utility.yul\":7284:7303   */\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":7277:7312   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":7265:7267   */\n      0x60\n        /* \"#utility.yul\":7253:7268   */\n      add\n      swap4\n        /* \"#utility.yul\":6127:7318   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8080:8207   */\n    tag_335:\n        /* \"#utility.yul\":8141:8151   */\n      0x4e487b71\n        /* \"#utility.yul\":8136:8139   */\n      0xe0\n        /* \"#utility.yul\":8132:8152   */\n      shl\n        /* \"#utility.yul\":8129:8130   */\n      0x00\n        /* \"#utility.yul\":8122:8153   */\n      mstore\n        /* \"#utility.yul\":8172:8176   */\n      0x11\n        /* \"#utility.yul\":8169:8170   */\n      0x04\n        /* \"#utility.yul\":8162:8177   */\n      mstore\n        /* \"#utility.yul\":8196:8200   */\n      0x24\n        /* \"#utility.yul\":8193:8194   */\n      0x00\n        /* \"#utility.yul\":8186:8201   */\n      revert\n        /* \"#utility.yul\":8212:8380   */\n    tag_315:\n        /* \"#utility.yul\":8285:8294   */\n      dup1\n      dup3\n      mul\n        /* \"#utility.yul\":8316:8325   */\n      dup2\n      iszero\n        /* \"#utility.yul\":8333:8348   */\n      dup3\n      dup3\n      div\n        /* \"#utility.yul\":8327:8349   */\n      dup5\n      eq\n        /* \"#utility.yul\":8313:8350   */\n      or\n        /* \"#utility.yul\":8303:8374   */\n      tag_156\n      jumpi\n        /* \"#utility.yul\":8354:8372   */\n      tag_156\n      tag_335\n      jump\t// in\n        /* \"#utility.yul\":8385:8602   */\n    tag_318:\n        /* \"#utility.yul\":8425:8426   */\n      0x00\n        /* \"#utility.yul\":8451:8452   */\n      dup3\n        /* \"#utility.yul\":8441:8573   */\n      tag_387\n      jumpi\n        /* \"#utility.yul\":8495:8505   */\n      0x4e487b71\n        /* \"#utility.yul\":8490:8493   */\n      0xe0\n        /* \"#utility.yul\":8486:8506   */\n      shl\n        /* \"#utility.yul\":8483:8484   */\n      0x00\n        /* \"#utility.yul\":8476:8507   */\n      mstore\n        /* \"#utility.yul\":8530:8534   */\n      0x12\n        /* \"#utility.yul\":8527:8528   */\n      0x04\n        /* \"#utility.yul\":8520:8535   */\n      mstore\n        /* \"#utility.yul\":8558:8562   */\n      0x24\n        /* \"#utility.yul\":8555:8556   */\n      0x00\n        /* \"#utility.yul\":8548:8563   */\n      revert\n        /* \"#utility.yul\":8441:8573   */\n    tag_387:\n      pop\n        /* \"#utility.yul\":8587:8596   */\n      div\n      swap1\n        /* \"#utility.yul\":8385:8602   */\n      jump\t// out\n        /* \"#utility.yul\":8607:8735   */\n    tag_321:\n        /* \"#utility.yul\":8674:8683   */\n      dup2\n      dup2\n      sub\n        /* \"#utility.yul\":8695:8706   */\n      dup2\n      dup2\n      gt\n        /* \"#utility.yul\":8692:8729   */\n      iszero\n      tag_156\n      jumpi\n        /* \"#utility.yul\":8709:8727   */\n      tag_156\n      tag_335\n      jump\t// in\n        /* \"#utility.yul\":8740:8865   */\n    tag_325:\n        /* \"#utility.yul\":8805:8814   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":8826:8836   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":8823:8859   */\n      iszero\n      tag_156\n      jumpi\n        /* \"#utility.yul\":8839:8857   */\n      tag_156\n      tag_335\n      jump\t// in\n\n    auxdata: 0xa264697066735822122013491db28270216ab726e747e928e000b705fa4443e5403541f3629448dc9a6964736f6c634300081a0033\n}\n",
          "bytecode": {
            "functionDebugData": {
              "@_1297": {
                "entryPoint": null,
                "id": 1297,
                "parameterSlots": 0,
                "returnSlots": 0
              },
              "@_515": {
                "entryPoint": null,
                "id": 515,
                "parameterSlots": 1,
                "returnSlots": 0
              },
              "@_749": {
                "entryPoint": null,
                "id": 749,
                "parameterSlots": 2,
                "returnSlots": 0
              },
              "@_mint_1052": {
                "entryPoint": 631,
                "id": 1052,
                "parameterSlots": 2,
                "returnSlots": 0
              },
              "@_msgSender_451": {
                "entryPoint": null,
                "id": 451,
                "parameterSlots": 0,
                "returnSlots": 1
              },
              "@_transferOwnership_611": {
                "entryPoint": 550,
                "id": 611,
                "parameterSlots": 1,
                "returnSlots": 0
              },
              "@_update_1019": {
                "entryPoint": 687,
                "id": 1019,
                "parameterSlots": 3,
                "returnSlots": 0
              },
              "@decimals_776": {
                "entryPoint": null,
                "id": 776,
                "parameterSlots": 0,
                "returnSlots": 1
              },
              "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
                "entryPoint": null,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
                "entryPoint": null,
                "id": null,
                "parameterSlots": 4,
                "returnSlots": 1
              },
              "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
                "entryPoint": null,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "array_dataslot_string_storage": {
                "entryPoint": null,
                "id": null,
                "parameterSlots": 1,
                "returnSlots": 1
              },
              "checked_add_t_uint256": {
                "entryPoint": 1612,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "checked_exp_helper": {
                "entryPoint": 1339,
                "id": null,
                "parameterSlots": 3,
                "returnSlots": 2
              },
              "checked_exp_t_uint256_t_uint8": {
                "entryPoint": 1568,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "checked_exp_unsigned": {
                "entryPoint": 1406,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "checked_mul_t_uint256": {
                "entryPoint": 1589,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "clean_up_bytearray_end_slots_string_storage": {
                "entryPoint": 1057,
                "id": null,
                "parameterSlots": 3,
                "returnSlots": 0
              },
              "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
                "entryPoint": 1133,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 0
              },
              "extract_byte_array_length": {
                "entryPoint": 1001,
                "id": null,
                "parameterSlots": 1,
                "returnSlots": 1
              },
              "extract_used_part_and_set_length_of_short_byte_array": {
                "entryPoint": null,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "panic_error_0x11": {
                "entryPoint": 1319,
                "id": null,
                "parameterSlots": 0,
                "returnSlots": 0
              },
              "panic_error_0x41": {
                "entryPoint": 981,
                "id": null,
                "parameterSlots": 0,
                "returnSlots": 0
              }
            },
            "generatedSources": [
              {
                "ast": {
                  "nativeSrc": "0:5259:1",
                  "nodeType": "YulBlock",
                  "src": "0:5259:1",
                  "statements": [
                    {
                      "nativeSrc": "6:3:1",
                      "nodeType": "YulBlock",
                      "src": "6:3:1",
                      "statements": []
                    },
                    {
                      "body": {
                        "nativeSrc": "46:95:1",
                        "nodeType": "YulBlock",
                        "src": "46:95:1",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nativeSrc": "63:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "63:1:1",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "70:3:1",
                                      "nodeType": "YulLiteral",
                                      "src": "70:3:1",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "75:10:1",
                                      "nodeType": "YulLiteral",
                                      "src": "75:10:1",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nativeSrc": "66:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "66:3:1"
                                  },
                                  "nativeSrc": "66:20:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "66:20:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "56:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "56:6:1"
                              },
                              "nativeSrc": "56:31:1",
                              "nodeType": "YulFunctionCall",
                              "src": "56:31:1"
                            },
                            "nativeSrc": "56:31:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "56:31:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nativeSrc": "103:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "103:1:1",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "106:4:1",
                                  "nodeType": "YulLiteral",
                                  "src": "106:4:1",
                                  "type": "",
                                  "value": "0x41"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "96:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "96:6:1"
                              },
                              "nativeSrc": "96:15:1",
                              "nodeType": "YulFunctionCall",
                              "src": "96:15:1"
                            },
                            "nativeSrc": "96:15:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "96:15:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nativeSrc": "127:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "127:1:1",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "130:4:1",
                                  "nodeType": "YulLiteral",
                                  "src": "130:4:1",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nativeSrc": "120:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "120:6:1"
                              },
                              "nativeSrc": "120:15:1",
                              "nodeType": "YulFunctionCall",
                              "src": "120:15:1"
                            },
                            "nativeSrc": "120:15:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "120:15:1"
                          }
                        ]
                      },
                      "name": "panic_error_0x41",
                      "nativeSrc": "14:127:1",
                      "nodeType": "YulFunctionDefinition",
                      "src": "14:127:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "201:325:1",
                        "nodeType": "YulBlock",
                        "src": "201:325:1",
                        "statements": [
                          {
                            "nativeSrc": "211:22:1",
                            "nodeType": "YulAssignment",
                            "src": "211:22:1",
                            "value": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nativeSrc": "225:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "225:1:1",
                                  "type": "",
                                  "value": "1"
                                },
                                {
                                  "name": "data",
                                  "nativeSrc": "228:4:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "228:4:1"
                                }
                              ],
                              "functionName": {
                                "name": "shr",
                                "nativeSrc": "221:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "221:3:1"
                              },
                              "nativeSrc": "221:12:1",
                              "nodeType": "YulFunctionCall",
                              "src": "221:12:1"
                            },
                            "variableNames": [
                              {
                                "name": "length",
                                "nativeSrc": "211:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "211:6:1"
                              }
                            ]
                          },
                          {
                            "nativeSrc": "242:38:1",
                            "nodeType": "YulVariableDeclaration",
                            "src": "242:38:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "data",
                                  "nativeSrc": "272:4:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "272:4:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "278:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "278:1:1",
                                  "type": "",
                                  "value": "1"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nativeSrc": "268:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "268:3:1"
                              },
                              "nativeSrc": "268:12:1",
                              "nodeType": "YulFunctionCall",
                              "src": "268:12:1"
                            },
                            "variables": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "246:18:1",
                                "nodeType": "YulTypedName",
                                "src": "246:18:1",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nativeSrc": "319:31:1",
                              "nodeType": "YulBlock",
                              "src": "319:31:1",
                              "statements": [
                                {
                                  "nativeSrc": "321:27:1",
                                  "nodeType": "YulAssignment",
                                  "src": "321:27:1",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nativeSrc": "335:6:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "335:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "343:4:1",
                                        "nodeType": "YulLiteral",
                                        "src": "343:4:1",
                                        "type": "",
                                        "value": "0x7f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "331:3:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "331:3:1"
                                    },
                                    "nativeSrc": "331:17:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "331:17:1"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "length",
                                      "nativeSrc": "321:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "321:6:1"
                                    }
                                  ]
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "outOfPlaceEncoding",
                                  "nativeSrc": "299:18:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "299:18:1"
                                }
                              ],
                              "functionName": {
                                "name": "iszero",
                                "nativeSrc": "292:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "292:6:1"
                              },
                              "nativeSrc": "292:26:1",
                              "nodeType": "YulFunctionCall",
                              "src": "292:26:1"
                            },
                            "nativeSrc": "289:61:1",
                            "nodeType": "YulIf",
                            "src": "289:61:1"
                          },
                          {
                            "body": {
                              "nativeSrc": "409:111:1",
                              "nodeType": "YulBlock",
                              "src": "409:111:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "430:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "430:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "437:3:1",
                                            "nodeType": "YulLiteral",
                                            "src": "437:3:1",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "442:10:1",
                                            "nodeType": "YulLiteral",
                                            "src": "442:10:1",
                                            "type": "",
                                            "value": "0x4e487b71"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nativeSrc": "433:3:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "433:3:1"
                                        },
                                        "nativeSrc": "433:20:1",
                                        "nodeType": "YulFunctionCall",
                                        "src": "433:20:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mstore",
                                      "nativeSrc": "423:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "423:6:1"
                                    },
                                    "nativeSrc": "423:31:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "423:31:1"
                                  },
                                  "nativeSrc": "423:31:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "423:31:1"
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "474:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "474:1:1",
                                        "type": "",
                                        "value": "4"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "477:4:1",
                                        "nodeType": "YulLiteral",
                                        "src": "477:4:1",
                                        "type": "",
                                        "value": "0x22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mstore",
                                      "nativeSrc": "467:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "467:6:1"
                                    },
                                    "nativeSrc": "467:15:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "467:15:1"
                                  },
                                  "nativeSrc": "467:15:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "467:15:1"
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "502:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "502:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "505:4:1",
                                        "nodeType": "YulLiteral",
                                        "src": "505:4:1",
                                        "type": "",
                                        "value": "0x24"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "revert",
                                      "nativeSrc": "495:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "495:6:1"
                                    },
                                    "nativeSrc": "495:15:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "495:15:1"
                                  },
                                  "nativeSrc": "495:15:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "495:15:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "outOfPlaceEncoding",
                                  "nativeSrc": "365:18:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "365:18:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nativeSrc": "388:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "388:6:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "396:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "396:2:1",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nativeSrc": "385:2:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "385:2:1"
                                  },
                                  "nativeSrc": "385:14:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "385:14:1"
                                }
                              ],
                              "functionName": {
                                "name": "eq",
                                "nativeSrc": "362:2:1",
                                "nodeType": "YulIdentifier",
                                "src": "362:2:1"
                              },
                              "nativeSrc": "362:38:1",
                              "nodeType": "YulFunctionCall",
                              "src": "362:38:1"
                            },
                            "nativeSrc": "359:161:1",
                            "nodeType": "YulIf",
                            "src": "359:161:1"
                          }
                        ]
                      },
                      "name": "extract_byte_array_length",
                      "nativeSrc": "146:380:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "data",
                          "nativeSrc": "181:4:1",
                          "nodeType": "YulTypedName",
                          "src": "181:4:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "length",
                          "nativeSrc": "190:6:1",
                          "nodeType": "YulTypedName",
                          "src": "190:6:1",
                          "type": ""
                        }
                      ],
                      "src": "146:380:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "587:65:1",
                        "nodeType": "YulBlock",
                        "src": "587:65:1",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nativeSrc": "604:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "604:1:1",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "name": "ptr",
                                  "nativeSrc": "607:3:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "607:3:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "597:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "597:6:1"
                              },
                              "nativeSrc": "597:14:1",
                              "nodeType": "YulFunctionCall",
                              "src": "597:14:1"
                            },
                            "nativeSrc": "597:14:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "597:14:1"
                          },
                          {
                            "nativeSrc": "620:26:1",
                            "nodeType": "YulAssignment",
                            "src": "620:26:1",
                            "value": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nativeSrc": "638:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "638:1:1",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "641:4:1",
                                  "nodeType": "YulLiteral",
                                  "src": "641:4:1",
                                  "type": "",
                                  "value": "0x20"
                                }
                              ],
                              "functionName": {
                                "name": "keccak256",
                                "nativeSrc": "628:9:1",
                                "nodeType": "YulIdentifier",
                                "src": "628:9:1"
                              },
                              "nativeSrc": "628:18:1",
                              "nodeType": "YulFunctionCall",
                              "src": "628:18:1"
                            },
                            "variableNames": [
                              {
                                "name": "data",
                                "nativeSrc": "620:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "620:4:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "array_dataslot_string_storage",
                      "nativeSrc": "531:121:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "ptr",
                          "nativeSrc": "570:3:1",
                          "nodeType": "YulTypedName",
                          "src": "570:3:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "data",
                          "nativeSrc": "578:4:1",
                          "nodeType": "YulTypedName",
                          "src": "578:4:1",
                          "type": ""
                        }
                      ],
                      "src": "531:121:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "738:437:1",
                        "nodeType": "YulBlock",
                        "src": "738:437:1",
                        "statements": [
                          {
                            "body": {
                              "nativeSrc": "771:398:1",
                              "nodeType": "YulBlock",
                              "src": "771:398:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "792:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "792:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "name": "array",
                                        "nativeSrc": "795:5:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "795:5:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mstore",
                                      "nativeSrc": "785:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "785:6:1"
                                    },
                                    "nativeSrc": "785:16:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "785:16:1"
                                  },
                                  "nativeSrc": "785:16:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "785:16:1"
                                },
                                {
                                  "nativeSrc": "814:30:1",
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "814:30:1",
                                  "value": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "836:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "836:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "839:4:1",
                                        "nodeType": "YulLiteral",
                                        "src": "839:4:1",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "keccak256",
                                      "nativeSrc": "826:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "826:9:1"
                                    },
                                    "nativeSrc": "826:18:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "826:18:1"
                                  },
                                  "variables": [
                                    {
                                      "name": "data",
                                      "nativeSrc": "818:4:1",
                                      "nodeType": "YulTypedName",
                                      "src": "818:4:1",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "nativeSrc": "857:57:1",
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "857:57:1",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "data",
                                        "nativeSrc": "880:4:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "880:4:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "890:1:1",
                                            "nodeType": "YulLiteral",
                                            "src": "890:1:1",
                                            "type": "",
                                            "value": "5"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "name": "startIndex",
                                                "nativeSrc": "897:10:1",
                                                "nodeType": "YulIdentifier",
                                                "src": "897:10:1"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "909:2:1",
                                                "nodeType": "YulLiteral",
                                                "src": "909:2:1",
                                                "type": "",
                                                "value": "31"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "893:3:1",
                                              "nodeType": "YulIdentifier",
                                              "src": "893:3:1"
                                            },
                                            "nativeSrc": "893:19:1",
                                            "nodeType": "YulFunctionCall",
                                            "src": "893:19:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shr",
                                          "nativeSrc": "886:3:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "886:3:1"
                                        },
                                        "nativeSrc": "886:27:1",
                                        "nodeType": "YulFunctionCall",
                                        "src": "886:27:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "876:3:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "876:3:1"
                                    },
                                    "nativeSrc": "876:38:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "876:38:1"
                                  },
                                  "variables": [
                                    {
                                      "name": "deleteStart",
                                      "nativeSrc": "861:11:1",
                                      "nodeType": "YulTypedName",
                                      "src": "861:11:1",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "body": {
                                    "nativeSrc": "951:23:1",
                                    "nodeType": "YulBlock",
                                    "src": "951:23:1",
                                    "statements": [
                                      {
                                        "nativeSrc": "953:19:1",
                                        "nodeType": "YulAssignment",
                                        "src": "953:19:1",
                                        "value": {
                                          "name": "data",
                                          "nativeSrc": "968:4:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "968:4:1"
                                        },
                                        "variableNames": [
                                          {
                                            "name": "deleteStart",
                                            "nativeSrc": "953:11:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "953:11:1"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "condition": {
                                    "arguments": [
                                      {
                                        "name": "startIndex",
                                        "nativeSrc": "933:10:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "933:10:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "945:4:1",
                                        "nodeType": "YulLiteral",
                                        "src": "945:4:1",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nativeSrc": "930:2:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "930:2:1"
                                    },
                                    "nativeSrc": "930:20:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "930:20:1"
                                  },
                                  "nativeSrc": "927:47:1",
                                  "nodeType": "YulIf",
                                  "src": "927:47:1"
                                },
                                {
                                  "nativeSrc": "987:41:1",
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "987:41:1",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "data",
                                        "nativeSrc": "1001:4:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "1001:4:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "1011:1:1",
                                            "nodeType": "YulLiteral",
                                            "src": "1011:1:1",
                                            "type": "",
                                            "value": "5"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "name": "len",
                                                "nativeSrc": "1018:3:1",
                                                "nodeType": "YulIdentifier",
                                                "src": "1018:3:1"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "1023:2:1",
                                                "nodeType": "YulLiteral",
                                                "src": "1023:2:1",
                                                "type": "",
                                                "value": "31"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "1014:3:1",
                                              "nodeType": "YulIdentifier",
                                              "src": "1014:3:1"
                                            },
                                            "nativeSrc": "1014:12:1",
                                            "nodeType": "YulFunctionCall",
                                            "src": "1014:12:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shr",
                                          "nativeSrc": "1007:3:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "1007:3:1"
                                        },
                                        "nativeSrc": "1007:20:1",
                                        "nodeType": "YulFunctionCall",
                                        "src": "1007:20:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "997:3:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "997:3:1"
                                    },
                                    "nativeSrc": "997:31:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "997:31:1"
                                  },
                                  "variables": [
                                    {
                                      "name": "_1",
                                      "nativeSrc": "991:2:1",
                                      "nodeType": "YulTypedName",
                                      "src": "991:2:1",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "nativeSrc": "1041:24:1",
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "1041:24:1",
                                  "value": {
                                    "name": "deleteStart",
                                    "nativeSrc": "1054:11:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1054:11:1"
                                  },
                                  "variables": [
                                    {
                                      "name": "start",
                                      "nativeSrc": "1045:5:1",
                                      "nodeType": "YulTypedName",
                                      "src": "1045:5:1",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "body": {
                                    "nativeSrc": "1139:20:1",
                                    "nodeType": "YulBlock",
                                    "src": "1139:20:1",
                                    "statements": [
                                      {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "name": "start",
                                              "nativeSrc": "1148:5:1",
                                              "nodeType": "YulIdentifier",
                                              "src": "1148:5:1"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "1155:1:1",
                                              "nodeType": "YulLiteral",
                                              "src": "1155:1:1",
                                              "type": "",
                                              "value": "0"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sstore",
                                            "nativeSrc": "1141:6:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "1141:6:1"
                                          },
                                          "nativeSrc": "1141:16:1",
                                          "nodeType": "YulFunctionCall",
                                          "src": "1141:16:1"
                                        },
                                        "nativeSrc": "1141:16:1",
                                        "nodeType": "YulExpressionStatement",
                                        "src": "1141:16:1"
                                      }
                                    ]
                                  },
                                  "condition": {
                                    "arguments": [
                                      {
                                        "name": "start",
                                        "nativeSrc": "1089:5:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "1089:5:1"
                                      },
                                      {
                                        "name": "_1",
                                        "nativeSrc": "1096:2:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "1096:2:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nativeSrc": "1086:2:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1086:2:1"
                                    },
                                    "nativeSrc": "1086:13:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1086:13:1"
                                  },
                                  "nativeSrc": "1078:81:1",
                                  "nodeType": "YulForLoop",
                                  "post": {
                                    "nativeSrc": "1100:26:1",
                                    "nodeType": "YulBlock",
                                    "src": "1100:26:1",
                                    "statements": [
                                      {
                                        "nativeSrc": "1102:22:1",
                                        "nodeType": "YulAssignment",
                                        "src": "1102:22:1",
                                        "value": {
                                          "arguments": [
                                            {
                                              "name": "start",
                                              "nativeSrc": "1115:5:1",
                                              "nodeType": "YulIdentifier",
                                              "src": "1115:5:1"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "1122:1:1",
                                              "nodeType": "YulLiteral",
                                              "src": "1122:1:1",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "1111:3:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "1111:3:1"
                                          },
                                          "nativeSrc": "1111:13:1",
                                          "nodeType": "YulFunctionCall",
                                          "src": "1111:13:1"
                                        },
                                        "variableNames": [
                                          {
                                            "name": "start",
                                            "nativeSrc": "1102:5:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "1102:5:1"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "pre": {
                                    "nativeSrc": "1082:3:1",
                                    "nodeType": "YulBlock",
                                    "src": "1082:3:1",
                                    "statements": []
                                  },
                                  "src": "1078:81:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "len",
                                  "nativeSrc": "754:3:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "754:3:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "759:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "759:2:1",
                                  "type": "",
                                  "value": "31"
                                }
                              ],
                              "functionName": {
                                "name": "gt",
                                "nativeSrc": "751:2:1",
                                "nodeType": "YulIdentifier",
                                "src": "751:2:1"
                              },
                              "nativeSrc": "751:11:1",
                              "nodeType": "YulFunctionCall",
                              "src": "751:11:1"
                            },
                            "nativeSrc": "748:421:1",
                            "nodeType": "YulIf",
                            "src": "748:421:1"
                          }
                        ]
                      },
                      "name": "clean_up_bytearray_end_slots_string_storage",
                      "nativeSrc": "657:518:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "array",
                          "nativeSrc": "710:5:1",
                          "nodeType": "YulTypedName",
                          "src": "710:5:1",
                          "type": ""
                        },
                        {
                          "name": "len",
                          "nativeSrc": "717:3:1",
                          "nodeType": "YulTypedName",
                          "src": "717:3:1",
                          "type": ""
                        },
                        {
                          "name": "startIndex",
                          "nativeSrc": "722:10:1",
                          "nodeType": "YulTypedName",
                          "src": "722:10:1",
                          "type": ""
                        }
                      ],
                      "src": "657:518:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "1265:81:1",
                        "nodeType": "YulBlock",
                        "src": "1265:81:1",
                        "statements": [
                          {
                            "nativeSrc": "1275:65:1",
                            "nodeType": "YulAssignment",
                            "src": "1275:65:1",
                            "value": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nativeSrc": "1290:4:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1290:4:1"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "1308:1:1",
                                                  "nodeType": "YulLiteral",
                                                  "src": "1308:1:1",
                                                  "type": "",
                                                  "value": "3"
                                                },
                                                {
                                                  "name": "len",
                                                  "nativeSrc": "1311:3:1",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "1311:3:1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nativeSrc": "1304:3:1",
                                                "nodeType": "YulIdentifier",
                                                "src": "1304:3:1"
                                              },
                                              "nativeSrc": "1304:11:1",
                                              "nodeType": "YulFunctionCall",
                                              "src": "1304:11:1"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "1321:1:1",
                                                  "nodeType": "YulLiteral",
                                                  "src": "1321:1:1",
                                                  "type": "",
                                                  "value": "0"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nativeSrc": "1317:3:1",
                                                "nodeType": "YulIdentifier",
                                                "src": "1317:3:1"
                                              },
                                              "nativeSrc": "1317:6:1",
                                              "nodeType": "YulFunctionCall",
                                              "src": "1317:6:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shr",
                                            "nativeSrc": "1300:3:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "1300:3:1"
                                          },
                                          "nativeSrc": "1300:24:1",
                                          "nodeType": "YulFunctionCall",
                                          "src": "1300:24:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "not",
                                        "nativeSrc": "1296:3:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "1296:3:1"
                                      },
                                      "nativeSrc": "1296:29:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "1296:29:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "1286:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1286:3:1"
                                  },
                                  "nativeSrc": "1286:40:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1286:40:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1332:1:1",
                                      "nodeType": "YulLiteral",
                                      "src": "1332:1:1",
                                      "type": "",
                                      "value": "1"
                                    },
                                    {
                                      "name": "len",
                                      "nativeSrc": "1335:3:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1335:3:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nativeSrc": "1328:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1328:3:1"
                                  },
                                  "nativeSrc": "1328:11:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1328:11:1"
                                }
                              ],
                              "functionName": {
                                "name": "or",
                                "nativeSrc": "1283:2:1",
                                "nodeType": "YulIdentifier",
                                "src": "1283:2:1"
                              },
                              "nativeSrc": "1283:57:1",
                              "nodeType": "YulFunctionCall",
                              "src": "1283:57:1"
                            },
                            "variableNames": [
                              {
                                "name": "used",
                                "nativeSrc": "1275:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "1275:4:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "extract_used_part_and_set_length_of_short_byte_array",
                      "nativeSrc": "1180:166:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "data",
                          "nativeSrc": "1242:4:1",
                          "nodeType": "YulTypedName",
                          "src": "1242:4:1",
                          "type": ""
                        },
                        {
                          "name": "len",
                          "nativeSrc": "1248:3:1",
                          "nodeType": "YulTypedName",
                          "src": "1248:3:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "used",
                          "nativeSrc": "1256:4:1",
                          "nodeType": "YulTypedName",
                          "src": "1256:4:1",
                          "type": ""
                        }
                      ],
                      "src": "1180:166:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "1447:1203:1",
                        "nodeType": "YulBlock",
                        "src": "1447:1203:1",
                        "statements": [
                          {
                            "nativeSrc": "1457:24:1",
                            "nodeType": "YulVariableDeclaration",
                            "src": "1457:24:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "src",
                                  "nativeSrc": "1477:3:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1477:3:1"
                                }
                              ],
                              "functionName": {
                                "name": "mload",
                                "nativeSrc": "1471:5:1",
                                "nodeType": "YulIdentifier",
                                "src": "1471:5:1"
                              },
                              "nativeSrc": "1471:10:1",
                              "nodeType": "YulFunctionCall",
                              "src": "1471:10:1"
                            },
                            "variables": [
                              {
                                "name": "newLen",
                                "nativeSrc": "1461:6:1",
                                "nodeType": "YulTypedName",
                                "src": "1461:6:1",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nativeSrc": "1524:22:1",
                              "nodeType": "YulBlock",
                              "src": "1524:22:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "panic_error_0x41",
                                      "nativeSrc": "1526:16:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1526:16:1"
                                    },
                                    "nativeSrc": "1526:18:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1526:18:1"
                                  },
                                  "nativeSrc": "1526:18:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "1526:18:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "newLen",
                                  "nativeSrc": "1496:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1496:6:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "1512:2:1",
                                          "nodeType": "YulLiteral",
                                          "src": "1512:2:1",
                                          "type": "",
                                          "value": "64"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "1516:1:1",
                                          "nodeType": "YulLiteral",
                                          "src": "1516:1:1",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nativeSrc": "1508:3:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "1508:3:1"
                                      },
                                      "nativeSrc": "1508:10:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "1508:10:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1520:1:1",
                                      "nodeType": "YulLiteral",
                                      "src": "1520:1:1",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sub",
                                    "nativeSrc": "1504:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1504:3:1"
                                  },
                                  "nativeSrc": "1504:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1504:18:1"
                                }
                              ],
                              "functionName": {
                                "name": "gt",
                                "nativeSrc": "1493:2:1",
                                "nodeType": "YulIdentifier",
                                "src": "1493:2:1"
                              },
                              "nativeSrc": "1493:30:1",
                              "nodeType": "YulFunctionCall",
                              "src": "1493:30:1"
                            },
                            "nativeSrc": "1490:56:1",
                            "nodeType": "YulIf",
                            "src": "1490:56:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "slot",
                                  "nativeSrc": "1599:4:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1599:4:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nativeSrc": "1637:4:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "1637:4:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sload",
                                        "nativeSrc": "1631:5:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "1631:5:1"
                                      },
                                      "nativeSrc": "1631:11:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "1631:11:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "extract_byte_array_length",
                                    "nativeSrc": "1605:25:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1605:25:1"
                                  },
                                  "nativeSrc": "1605:38:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1605:38:1"
                                },
                                {
                                  "name": "newLen",
                                  "nativeSrc": "1645:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1645:6:1"
                                }
                              ],
                              "functionName": {
                                "name": "clean_up_bytearray_end_slots_string_storage",
                                "nativeSrc": "1555:43:1",
                                "nodeType": "YulIdentifier",
                                "src": "1555:43:1"
                              },
                              "nativeSrc": "1555:97:1",
                              "nodeType": "YulFunctionCall",
                              "src": "1555:97:1"
                            },
                            "nativeSrc": "1555:97:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "1555:97:1"
                          },
                          {
                            "nativeSrc": "1661:18:1",
                            "nodeType": "YulVariableDeclaration",
                            "src": "1661:18:1",
                            "value": {
                              "kind": "number",
                              "nativeSrc": "1678:1:1",
                              "nodeType": "YulLiteral",
                              "src": "1678:1:1",
                              "type": "",
                              "value": "0"
                            },
                            "variables": [
                              {
                                "name": "srcOffset",
                                "nativeSrc": "1665:9:1",
                                "nodeType": "YulTypedName",
                                "src": "1665:9:1",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nativeSrc": "1688:17:1",
                            "nodeType": "YulAssignment",
                            "src": "1688:17:1",
                            "value": {
                              "kind": "number",
                              "nativeSrc": "1701:4:1",
                              "nodeType": "YulLiteral",
                              "src": "1701:4:1",
                              "type": "",
                              "value": "0x20"
                            },
                            "variableNames": [
                              {
                                "name": "srcOffset",
                                "nativeSrc": "1688:9:1",
                                "nodeType": "YulIdentifier",
                                "src": "1688:9:1"
                              }
                            ]
                          },
                          {
                            "cases": [
                              {
                                "body": {
                                  "nativeSrc": "1751:642:1",
                                  "nodeType": "YulBlock",
                                  "src": "1751:642:1",
                                  "statements": [
                                    {
                                      "nativeSrc": "1765:35:1",
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "1765:35:1",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "newLen",
                                            "nativeSrc": "1784:6:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "1784:6:1"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nativeSrc": "1796:2:1",
                                                "nodeType": "YulLiteral",
                                                "src": "1796:2:1",
                                                "type": "",
                                                "value": "31"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nativeSrc": "1792:3:1",
                                              "nodeType": "YulIdentifier",
                                              "src": "1792:3:1"
                                            },
                                            "nativeSrc": "1792:7:1",
                                            "nodeType": "YulFunctionCall",
                                            "src": "1792:7:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nativeSrc": "1780:3:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "1780:3:1"
                                        },
                                        "nativeSrc": "1780:20:1",
                                        "nodeType": "YulFunctionCall",
                                        "src": "1780:20:1"
                                      },
                                      "variables": [
                                        {
                                          "name": "loopEnd",
                                          "nativeSrc": "1769:7:1",
                                          "nodeType": "YulTypedName",
                                          "src": "1769:7:1",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "nativeSrc": "1813:49:1",
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "1813:49:1",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "slot",
                                            "nativeSrc": "1857:4:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "1857:4:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "array_dataslot_string_storage",
                                          "nativeSrc": "1827:29:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "1827:29:1"
                                        },
                                        "nativeSrc": "1827:35:1",
                                        "nodeType": "YulFunctionCall",
                                        "src": "1827:35:1"
                                      },
                                      "variables": [
                                        {
                                          "name": "dstPtr",
                                          "nativeSrc": "1817:6:1",
                                          "nodeType": "YulTypedName",
                                          "src": "1817:6:1",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "nativeSrc": "1875:10:1",
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "1875:10:1",
                                      "value": {
                                        "kind": "number",
                                        "nativeSrc": "1884:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "1884:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      "variables": [
                                        {
                                          "name": "i",
                                          "nativeSrc": "1879:1:1",
                                          "nodeType": "YulTypedName",
                                          "src": "1879:1:1",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "body": {
                                        "nativeSrc": "1955:165:1",
                                        "nodeType": "YulBlock",
                                        "src": "1955:165:1",
                                        "statements": [
                                          {
                                            "expression": {
                                              "arguments": [
                                                {
                                                  "name": "dstPtr",
                                                  "nativeSrc": "1980:6:1",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "1980:6:1"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "arguments": [
                                                        {
                                                          "name": "src",
                                                          "nativeSrc": "1998:3:1",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "1998:3:1"
                                                        },
                                                        {
                                                          "name": "srcOffset",
                                                          "nativeSrc": "2003:9:1",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "2003:9:1"
                                                        }
                                                      ],
                                                      "functionName": {
                                                        "name": "add",
                                                        "nativeSrc": "1994:3:1",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "1994:3:1"
                                                      },
                                                      "nativeSrc": "1994:19:1",
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "1994:19:1"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "mload",
                                                    "nativeSrc": "1988:5:1",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "1988:5:1"
                                                  },
                                                  "nativeSrc": "1988:26:1",
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "1988:26:1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sstore",
                                                "nativeSrc": "1973:6:1",
                                                "nodeType": "YulIdentifier",
                                                "src": "1973:6:1"
                                              },
                                              "nativeSrc": "1973:42:1",
                                              "nodeType": "YulFunctionCall",
                                              "src": "1973:42:1"
                                            },
                                            "nativeSrc": "1973:42:1",
                                            "nodeType": "YulExpressionStatement",
                                            "src": "1973:42:1"
                                          },
                                          {
                                            "nativeSrc": "2032:24:1",
                                            "nodeType": "YulAssignment",
                                            "src": "2032:24:1",
                                            "value": {
                                              "arguments": [
                                                {
                                                  "name": "dstPtr",
                                                  "nativeSrc": "2046:6:1",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2046:6:1"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "2054:1:1",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2054:1:1",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nativeSrc": "2042:3:1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2042:3:1"
                                              },
                                              "nativeSrc": "2042:14:1",
                                              "nodeType": "YulFunctionCall",
                                              "src": "2042:14:1"
                                            },
                                            "variableNames": [
                                              {
                                                "name": "dstPtr",
                                                "nativeSrc": "2032:6:1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2032:6:1"
                                              }
                                            ]
                                          },
                                          {
                                            "nativeSrc": "2073:33:1",
                                            "nodeType": "YulAssignment",
                                            "src": "2073:33:1",
                                            "value": {
                                              "arguments": [
                                                {
                                                  "name": "srcOffset",
                                                  "nativeSrc": "2090:9:1",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2090:9:1"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "2101:4:1",
                                                  "nodeType": "YulLiteral",
                                                  "src": "2101:4:1",
                                                  "type": "",
                                                  "value": "0x20"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nativeSrc": "2086:3:1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2086:3:1"
                                              },
                                              "nativeSrc": "2086:20:1",
                                              "nodeType": "YulFunctionCall",
                                              "src": "2086:20:1"
                                            },
                                            "variableNames": [
                                              {
                                                "name": "srcOffset",
                                                "nativeSrc": "2073:9:1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2073:9:1"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      "condition": {
                                        "arguments": [
                                          {
                                            "name": "i",
                                            "nativeSrc": "1909:1:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "1909:1:1"
                                          },
                                          {
                                            "name": "loopEnd",
                                            "nativeSrc": "1912:7:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "1912:7:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "lt",
                                          "nativeSrc": "1906:2:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "1906:2:1"
                                        },
                                        "nativeSrc": "1906:14:1",
                                        "nodeType": "YulFunctionCall",
                                        "src": "1906:14:1"
                                      },
                                      "nativeSrc": "1898:222:1",
                                      "nodeType": "YulForLoop",
                                      "post": {
                                        "nativeSrc": "1921:21:1",
                                        "nodeType": "YulBlock",
                                        "src": "1921:21:1",
                                        "statements": [
                                          {
                                            "nativeSrc": "1923:17:1",
                                            "nodeType": "YulAssignment",
                                            "src": "1923:17:1",
                                            "value": {
                                              "arguments": [
                                                {
                                                  "name": "i",
                                                  "nativeSrc": "1932:1:1",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "1932:1:1"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "1935:4:1",
                                                  "nodeType": "YulLiteral",
                                                  "src": "1935:4:1",
                                                  "type": "",
                                                  "value": "0x20"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nativeSrc": "1928:3:1",
                                                "nodeType": "YulIdentifier",
                                                "src": "1928:3:1"
                                              },
                                              "nativeSrc": "1928:12:1",
                                              "nodeType": "YulFunctionCall",
                                              "src": "1928:12:1"
                                            },
                                            "variableNames": [
                                              {
                                                "name": "i",
                                                "nativeSrc": "1923:1:1",
                                                "nodeType": "YulIdentifier",
                                                "src": "1923:1:1"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      "pre": {
                                        "nativeSrc": "1902:3:1",
                                        "nodeType": "YulBlock",
                                        "src": "1902:3:1",
                                        "statements": []
                                      },
                                      "src": "1898:222:1"
                                    },
                                    {
                                      "body": {
                                        "nativeSrc": "2168:166:1",
                                        "nodeType": "YulBlock",
                                        "src": "2168:166:1",
                                        "statements": [
                                          {
                                            "nativeSrc": "2186:43:1",
                                            "nodeType": "YulVariableDeclaration",
                                            "src": "2186:43:1",
                                            "value": {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "src",
                                                      "nativeSrc": "2213:3:1",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2213:3:1"
                                                    },
                                                    {
                                                      "name": "srcOffset",
                                                      "nativeSrc": "2218:9:1",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2218:9:1"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "add",
                                                    "nativeSrc": "2209:3:1",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2209:3:1"
                                                  },
                                                  "nativeSrc": "2209:19:1",
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "2209:19:1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "mload",
                                                "nativeSrc": "2203:5:1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2203:5:1"
                                              },
                                              "nativeSrc": "2203:26:1",
                                              "nodeType": "YulFunctionCall",
                                              "src": "2203:26:1"
                                            },
                                            "variables": [
                                              {
                                                "name": "lastValue",
                                                "nativeSrc": "2190:9:1",
                                                "nodeType": "YulTypedName",
                                                "src": "2190:9:1",
                                                "type": ""
                                              }
                                            ]
                                          },
                                          {
                                            "expression": {
                                              "arguments": [
                                                {
                                                  "name": "dstPtr",
                                                  "nativeSrc": "2253:6:1",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2253:6:1"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "lastValue",
                                                      "nativeSrc": "2265:9:1",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2265:9:1"
                                                    },
                                                    {
                                                      "arguments": [
                                                        {
                                                          "arguments": [
                                                            {
                                                              "arguments": [
                                                                {
                                                                  "arguments": [
                                                                    {
                                                                      "kind": "number",
                                                                      "nativeSrc": "2292:1:1",
                                                                      "nodeType": "YulLiteral",
                                                                      "src": "2292:1:1",
                                                                      "type": "",
                                                                      "value": "3"
                                                                    },
                                                                    {
                                                                      "name": "newLen",
                                                                      "nativeSrc": "2295:6:1",
                                                                      "nodeType": "YulIdentifier",
                                                                      "src": "2295:6:1"
                                                                    }
                                                                  ],
                                                                  "functionName": {
                                                                    "name": "shl",
                                                                    "nativeSrc": "2288:3:1",
                                                                    "nodeType": "YulIdentifier",
                                                                    "src": "2288:3:1"
                                                                  },
                                                                  "nativeSrc": "2288:14:1",
                                                                  "nodeType": "YulFunctionCall",
                                                                  "src": "2288:14:1"
                                                                },
                                                                {
                                                                  "kind": "number",
                                                                  "nativeSrc": "2304:3:1",
                                                                  "nodeType": "YulLiteral",
                                                                  "src": "2304:3:1",
                                                                  "type": "",
                                                                  "value": "248"
                                                                }
                                                              ],
                                                              "functionName": {
                                                                "name": "and",
                                                                "nativeSrc": "2284:3:1",
                                                                "nodeType": "YulIdentifier",
                                                                "src": "2284:3:1"
                                                              },
                                                              "nativeSrc": "2284:24:1",
                                                              "nodeType": "YulFunctionCall",
                                                              "src": "2284:24:1"
                                                            },
                                                            {
                                                              "arguments": [
                                                                {
                                                                  "kind": "number",
                                                                  "nativeSrc": "2314:1:1",
                                                                  "nodeType": "YulLiteral",
                                                                  "src": "2314:1:1",
                                                                  "type": "",
                                                                  "value": "0"
                                                                }
                                                              ],
                                                              "functionName": {
                                                                "name": "not",
                                                                "nativeSrc": "2310:3:1",
                                                                "nodeType": "YulIdentifier",
                                                                "src": "2310:3:1"
                                                              },
                                                              "nativeSrc": "2310:6:1",
                                                              "nodeType": "YulFunctionCall",
                                                              "src": "2310:6:1"
                                                            }
                                                          ],
                                                          "functionName": {
                                                            "name": "shr",
                                                            "nativeSrc": "2280:3:1",
                                                            "nodeType": "YulIdentifier",
                                                            "src": "2280:3:1"
                                                          },
                                                          "nativeSrc": "2280:37:1",
                                                          "nodeType": "YulFunctionCall",
                                                          "src": "2280:37:1"
                                                        }
                                                      ],
                                                      "functionName": {
                                                        "name": "not",
                                                        "nativeSrc": "2276:3:1",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "2276:3:1"
                                                      },
                                                      "nativeSrc": "2276:42:1",
                                                      "nodeType": "YulFunctionCall",
                                                      "src": "2276:42:1"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "and",
                                                    "nativeSrc": "2261:3:1",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2261:3:1"
                                                  },
                                                  "nativeSrc": "2261:58:1",
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "2261:58:1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sstore",
                                                "nativeSrc": "2246:6:1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2246:6:1"
                                              },
                                              "nativeSrc": "2246:74:1",
                                              "nodeType": "YulFunctionCall",
                                              "src": "2246:74:1"
                                            },
                                            "nativeSrc": "2246:74:1",
                                            "nodeType": "YulExpressionStatement",
                                            "src": "2246:74:1"
                                          }
                                        ]
                                      },
                                      "condition": {
                                        "arguments": [
                                          {
                                            "name": "loopEnd",
                                            "nativeSrc": "2139:7:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "2139:7:1"
                                          },
                                          {
                                            "name": "newLen",
                                            "nativeSrc": "2148:6:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "2148:6:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "lt",
                                          "nativeSrc": "2136:2:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "2136:2:1"
                                        },
                                        "nativeSrc": "2136:19:1",
                                        "nodeType": "YulFunctionCall",
                                        "src": "2136:19:1"
                                      },
                                      "nativeSrc": "2133:201:1",
                                      "nodeType": "YulIf",
                                      "src": "2133:201:1"
                                    },
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "slot",
                                            "nativeSrc": "2354:4:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "2354:4:1"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nativeSrc": "2368:1:1",
                                                    "nodeType": "YulLiteral",
                                                    "src": "2368:1:1",
                                                    "type": "",
                                                    "value": "1"
                                                  },
                                                  {
                                                    "name": "newLen",
                                                    "nativeSrc": "2371:6:1",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2371:6:1"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "shl",
                                                  "nativeSrc": "2364:3:1",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "2364:3:1"
                                                },
                                                "nativeSrc": "2364:14:1",
                                                "nodeType": "YulFunctionCall",
                                                "src": "2364:14:1"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "2380:1:1",
                                                "nodeType": "YulLiteral",
                                                "src": "2380:1:1",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "2360:3:1",
                                              "nodeType": "YulIdentifier",
                                              "src": "2360:3:1"
                                            },
                                            "nativeSrc": "2360:22:1",
                                            "nodeType": "YulFunctionCall",
                                            "src": "2360:22:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nativeSrc": "2347:6:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "2347:6:1"
                                        },
                                        "nativeSrc": "2347:36:1",
                                        "nodeType": "YulFunctionCall",
                                        "src": "2347:36:1"
                                      },
                                      "nativeSrc": "2347:36:1",
                                      "nodeType": "YulExpressionStatement",
                                      "src": "2347:36:1"
                                    }
                                  ]
                                },
                                "nativeSrc": "1744:649:1",
                                "nodeType": "YulCase",
                                "src": "1744:649:1",
                                "value": {
                                  "kind": "number",
                                  "nativeSrc": "1749:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "1749:1:1",
                                  "type": "",
                                  "value": "1"
                                }
                              },
                              {
                                "body": {
                                  "nativeSrc": "2410:234:1",
                                  "nodeType": "YulBlock",
                                  "src": "2410:234:1",
                                  "statements": [
                                    {
                                      "nativeSrc": "2424:14:1",
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "2424:14:1",
                                      "value": {
                                        "kind": "number",
                                        "nativeSrc": "2437:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "2437:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      "variables": [
                                        {
                                          "name": "value",
                                          "nativeSrc": "2428:5:1",
                                          "nodeType": "YulTypedName",
                                          "src": "2428:5:1",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "body": {
                                        "nativeSrc": "2473:67:1",
                                        "nodeType": "YulBlock",
                                        "src": "2473:67:1",
                                        "statements": [
                                          {
                                            "nativeSrc": "2491:35:1",
                                            "nodeType": "YulAssignment",
                                            "src": "2491:35:1",
                                            "value": {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "src",
                                                      "nativeSrc": "2510:3:1",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2510:3:1"
                                                    },
                                                    {
                                                      "name": "srcOffset",
                                                      "nativeSrc": "2515:9:1",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "2515:9:1"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "add",
                                                    "nativeSrc": "2506:3:1",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "2506:3:1"
                                                  },
                                                  "nativeSrc": "2506:19:1",
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "2506:19:1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "mload",
                                                "nativeSrc": "2500:5:1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2500:5:1"
                                              },
                                              "nativeSrc": "2500:26:1",
                                              "nodeType": "YulFunctionCall",
                                              "src": "2500:26:1"
                                            },
                                            "variableNames": [
                                              {
                                                "name": "value",
                                                "nativeSrc": "2491:5:1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2491:5:1"
                                              }
                                            ]
                                          }
                                        ]
                                      },
                                      "condition": {
                                        "name": "newLen",
                                        "nativeSrc": "2454:6:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "2454:6:1"
                                      },
                                      "nativeSrc": "2451:89:1",
                                      "nodeType": "YulIf",
                                      "src": "2451:89:1"
                                    },
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "slot",
                                            "nativeSrc": "2560:4:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "2560:4:1"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "name": "value",
                                                "nativeSrc": "2619:5:1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2619:5:1"
                                              },
                                              {
                                                "name": "newLen",
                                                "nativeSrc": "2626:6:1",
                                                "nodeType": "YulIdentifier",
                                                "src": "2626:6:1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "extract_used_part_and_set_length_of_short_byte_array",
                                              "nativeSrc": "2566:52:1",
                                              "nodeType": "YulIdentifier",
                                              "src": "2566:52:1"
                                            },
                                            "nativeSrc": "2566:67:1",
                                            "nodeType": "YulFunctionCall",
                                            "src": "2566:67:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nativeSrc": "2553:6:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "2553:6:1"
                                        },
                                        "nativeSrc": "2553:81:1",
                                        "nodeType": "YulFunctionCall",
                                        "src": "2553:81:1"
                                      },
                                      "nativeSrc": "2553:81:1",
                                      "nodeType": "YulExpressionStatement",
                                      "src": "2553:81:1"
                                    }
                                  ]
                                },
                                "nativeSrc": "2402:242:1",
                                "nodeType": "YulCase",
                                "src": "2402:242:1",
                                "value": "default"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "name": "newLen",
                                  "nativeSrc": "1724:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1724:6:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "1732:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "1732:2:1",
                                  "type": "",
                                  "value": "31"
                                }
                              ],
                              "functionName": {
                                "name": "gt",
                                "nativeSrc": "1721:2:1",
                                "nodeType": "YulIdentifier",
                                "src": "1721:2:1"
                              },
                              "nativeSrc": "1721:14:1",
                              "nodeType": "YulFunctionCall",
                              "src": "1721:14:1"
                            },
                            "nativeSrc": "1714:930:1",
                            "nodeType": "YulSwitch",
                            "src": "1714:930:1"
                          }
                        ]
                      },
                      "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                      "nativeSrc": "1351:1299:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "slot",
                          "nativeSrc": "1432:4:1",
                          "nodeType": "YulTypedName",
                          "src": "1432:4:1",
                          "type": ""
                        },
                        {
                          "name": "src",
                          "nativeSrc": "1438:3:1",
                          "nodeType": "YulTypedName",
                          "src": "1438:3:1",
                          "type": ""
                        }
                      ],
                      "src": "1351:1299:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "2756:102:1",
                        "nodeType": "YulBlock",
                        "src": "2756:102:1",
                        "statements": [
                          {
                            "nativeSrc": "2766:26:1",
                            "nodeType": "YulAssignment",
                            "src": "2766:26:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "2778:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2778:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "2789:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "2789:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "2774:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "2774:3:1"
                              },
                              "nativeSrc": "2774:18:1",
                              "nodeType": "YulFunctionCall",
                              "src": "2774:18:1"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nativeSrc": "2766:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "2766:4:1"
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "2808:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2808:9:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nativeSrc": "2823:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2823:6:1"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "2839:3:1",
                                              "nodeType": "YulLiteral",
                                              "src": "2839:3:1",
                                              "type": "",
                                              "value": "160"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "2844:1:1",
                                              "nodeType": "YulLiteral",
                                              "src": "2844:1:1",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nativeSrc": "2835:3:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "2835:3:1"
                                          },
                                          "nativeSrc": "2835:11:1",
                                          "nodeType": "YulFunctionCall",
                                          "src": "2835:11:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "2848:1:1",
                                          "nodeType": "YulLiteral",
                                          "src": "2848:1:1",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nativeSrc": "2831:3:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "2831:3:1"
                                      },
                                      "nativeSrc": "2831:19:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "2831:19:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "2819:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2819:3:1"
                                  },
                                  "nativeSrc": "2819:32:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2819:32:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "2801:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "2801:6:1"
                              },
                              "nativeSrc": "2801:51:1",
                              "nodeType": "YulFunctionCall",
                              "src": "2801:51:1"
                            },
                            "nativeSrc": "2801:51:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "2801:51:1"
                          }
                        ]
                      },
                      "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                      "nativeSrc": "2655:203:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "2725:9:1",
                          "nodeType": "YulTypedName",
                          "src": "2725:9:1",
                          "type": ""
                        },
                        {
                          "name": "value0",
                          "nativeSrc": "2736:6:1",
                          "nodeType": "YulTypedName",
                          "src": "2736:6:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "tail",
                          "nativeSrc": "2747:4:1",
                          "nodeType": "YulTypedName",
                          "src": "2747:4:1",
                          "type": ""
                        }
                      ],
                      "src": "2655:203:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "2895:95:1",
                        "nodeType": "YulBlock",
                        "src": "2895:95:1",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nativeSrc": "2912:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "2912:1:1",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2919:3:1",
                                      "nodeType": "YulLiteral",
                                      "src": "2919:3:1",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2924:10:1",
                                      "nodeType": "YulLiteral",
                                      "src": "2924:10:1",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nativeSrc": "2915:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2915:3:1"
                                  },
                                  "nativeSrc": "2915:20:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2915:20:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "2905:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "2905:6:1"
                              },
                              "nativeSrc": "2905:31:1",
                              "nodeType": "YulFunctionCall",
                              "src": "2905:31:1"
                            },
                            "nativeSrc": "2905:31:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "2905:31:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nativeSrc": "2952:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "2952:1:1",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "2955:4:1",
                                  "nodeType": "YulLiteral",
                                  "src": "2955:4:1",
                                  "type": "",
                                  "value": "0x11"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "2945:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "2945:6:1"
                              },
                              "nativeSrc": "2945:15:1",
                              "nodeType": "YulFunctionCall",
                              "src": "2945:15:1"
                            },
                            "nativeSrc": "2945:15:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "2945:15:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nativeSrc": "2976:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "2976:1:1",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "2979:4:1",
                                  "nodeType": "YulLiteral",
                                  "src": "2979:4:1",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nativeSrc": "2969:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "2969:6:1"
                              },
                              "nativeSrc": "2969:15:1",
                              "nodeType": "YulFunctionCall",
                              "src": "2969:15:1"
                            },
                            "nativeSrc": "2969:15:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "2969:15:1"
                          }
                        ]
                      },
                      "name": "panic_error_0x11",
                      "nativeSrc": "2863:127:1",
                      "nodeType": "YulFunctionDefinition",
                      "src": "2863:127:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "3064:306:1",
                        "nodeType": "YulBlock",
                        "src": "3064:306:1",
                        "statements": [
                          {
                            "nativeSrc": "3074:10:1",
                            "nodeType": "YulAssignment",
                            "src": "3074:10:1",
                            "value": {
                              "kind": "number",
                              "nativeSrc": "3083:1:1",
                              "nodeType": "YulLiteral",
                              "src": "3083:1:1",
                              "type": "",
                              "value": "1"
                            },
                            "variableNames": [
                              {
                                "name": "power",
                                "nativeSrc": "3074:5:1",
                                "nodeType": "YulIdentifier",
                                "src": "3074:5:1"
                              }
                            ]
                          },
                          {
                            "nativeSrc": "3093:13:1",
                            "nodeType": "YulAssignment",
                            "src": "3093:13:1",
                            "value": {
                              "name": "_base",
                              "nativeSrc": "3101:5:1",
                              "nodeType": "YulIdentifier",
                              "src": "3101:5:1"
                            },
                            "variableNames": [
                              {
                                "name": "base",
                                "nativeSrc": "3093:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "3093:4:1"
                              }
                            ]
                          },
                          {
                            "body": {
                              "nativeSrc": "3151:213:1",
                              "nodeType": "YulBlock",
                              "src": "3151:213:1",
                              "statements": [
                                {
                                  "body": {
                                    "nativeSrc": "3193:22:1",
                                    "nodeType": "YulBlock",
                                    "src": "3193:22:1",
                                    "statements": [
                                      {
                                        "expression": {
                                          "arguments": [],
                                          "functionName": {
                                            "name": "panic_error_0x11",
                                            "nativeSrc": "3195:16:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "3195:16:1"
                                          },
                                          "nativeSrc": "3195:18:1",
                                          "nodeType": "YulFunctionCall",
                                          "src": "3195:18:1"
                                        },
                                        "nativeSrc": "3195:18:1",
                                        "nodeType": "YulExpressionStatement",
                                        "src": "3195:18:1"
                                      }
                                    ]
                                  },
                                  "condition": {
                                    "arguments": [
                                      {
                                        "name": "base",
                                        "nativeSrc": "3171:4:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3171:4:1"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "max",
                                            "nativeSrc": "3181:3:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "3181:3:1"
                                          },
                                          {
                                            "name": "base",
                                            "nativeSrc": "3186:4:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "3186:4:1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "div",
                                          "nativeSrc": "3177:3:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3177:3:1"
                                        },
                                        "nativeSrc": "3177:14:1",
                                        "nodeType": "YulFunctionCall",
                                        "src": "3177:14:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nativeSrc": "3168:2:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3168:2:1"
                                    },
                                    "nativeSrc": "3168:24:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3168:24:1"
                                  },
                                  "nativeSrc": "3165:50:1",
                                  "nodeType": "YulIf",
                                  "src": "3165:50:1"
                                },
                                {
                                  "body": {
                                    "nativeSrc": "3248:29:1",
                                    "nodeType": "YulBlock",
                                    "src": "3248:29:1",
                                    "statements": [
                                      {
                                        "nativeSrc": "3250:25:1",
                                        "nodeType": "YulAssignment",
                                        "src": "3250:25:1",
                                        "value": {
                                          "arguments": [
                                            {
                                              "name": "power",
                                              "nativeSrc": "3263:5:1",
                                              "nodeType": "YulIdentifier",
                                              "src": "3263:5:1"
                                            },
                                            {
                                              "name": "base",
                                              "nativeSrc": "3270:4:1",
                                              "nodeType": "YulIdentifier",
                                              "src": "3270:4:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mul",
                                            "nativeSrc": "3259:3:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "3259:3:1"
                                          },
                                          "nativeSrc": "3259:16:1",
                                          "nodeType": "YulFunctionCall",
                                          "src": "3259:16:1"
                                        },
                                        "variableNames": [
                                          {
                                            "name": "power",
                                            "nativeSrc": "3250:5:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "3250:5:1"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "condition": {
                                    "arguments": [
                                      {
                                        "name": "exponent",
                                        "nativeSrc": "3235:8:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3235:8:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "3245:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "3245:1:1",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "3231:3:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3231:3:1"
                                    },
                                    "nativeSrc": "3231:16:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3231:16:1"
                                  },
                                  "nativeSrc": "3228:49:1",
                                  "nodeType": "YulIf",
                                  "src": "3228:49:1"
                                },
                                {
                                  "nativeSrc": "3290:23:1",
                                  "nodeType": "YulAssignment",
                                  "src": "3290:23:1",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "base",
                                        "nativeSrc": "3302:4:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3302:4:1"
                                      },
                                      {
                                        "name": "base",
                                        "nativeSrc": "3308:4:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3308:4:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mul",
                                      "nativeSrc": "3298:3:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3298:3:1"
                                    },
                                    "nativeSrc": "3298:15:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3298:15:1"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "base",
                                      "nativeSrc": "3290:4:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3290:4:1"
                                    }
                                  ]
                                },
                                {
                                  "nativeSrc": "3326:28:1",
                                  "nodeType": "YulAssignment",
                                  "src": "3326:28:1",
                                  "value": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "3342:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "3342:1:1",
                                        "type": "",
                                        "value": "1"
                                      },
                                      {
                                        "name": "exponent",
                                        "nativeSrc": "3345:8:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3345:8:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shr",
                                      "nativeSrc": "3338:3:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3338:3:1"
                                    },
                                    "nativeSrc": "3338:16:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3338:16:1"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "exponent",
                                      "nativeSrc": "3326:8:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3326:8:1"
                                    }
                                  ]
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "exponent",
                                  "nativeSrc": "3126:8:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "3126:8:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "3136:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "3136:1:1",
                                  "type": "",
                                  "value": "1"
                                }
                              ],
                              "functionName": {
                                "name": "gt",
                                "nativeSrc": "3123:2:1",
                                "nodeType": "YulIdentifier",
                                "src": "3123:2:1"
                              },
                              "nativeSrc": "3123:15:1",
                              "nodeType": "YulFunctionCall",
                              "src": "3123:15:1"
                            },
                            "nativeSrc": "3115:249:1",
                            "nodeType": "YulForLoop",
                            "post": {
                              "nativeSrc": "3139:3:1",
                              "nodeType": "YulBlock",
                              "src": "3139:3:1",
                              "statements": []
                            },
                            "pre": {
                              "nativeSrc": "3119:3:1",
                              "nodeType": "YulBlock",
                              "src": "3119:3:1",
                              "statements": []
                            },
                            "src": "3115:249:1"
                          }
                        ]
                      },
                      "name": "checked_exp_helper",
                      "nativeSrc": "2995:375:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "_base",
                          "nativeSrc": "3023:5:1",
                          "nodeType": "YulTypedName",
                          "src": "3023:5:1",
                          "type": ""
                        },
                        {
                          "name": "exponent",
                          "nativeSrc": "3030:8:1",
                          "nodeType": "YulTypedName",
                          "src": "3030:8:1",
                          "type": ""
                        },
                        {
                          "name": "max",
                          "nativeSrc": "3040:3:1",
                          "nodeType": "YulTypedName",
                          "src": "3040:3:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "power",
                          "nativeSrc": "3048:5:1",
                          "nodeType": "YulTypedName",
                          "src": "3048:5:1",
                          "type": ""
                        },
                        {
                          "name": "base",
                          "nativeSrc": "3055:4:1",
                          "nodeType": "YulTypedName",
                          "src": "3055:4:1",
                          "type": ""
                        }
                      ],
                      "src": "2995:375:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "3434:843:1",
                        "nodeType": "YulBlock",
                        "src": "3434:843:1",
                        "statements": [
                          {
                            "body": {
                              "nativeSrc": "3472:52:1",
                              "nodeType": "YulBlock",
                              "src": "3472:52:1",
                              "statements": [
                                {
                                  "nativeSrc": "3486:10:1",
                                  "nodeType": "YulAssignment",
                                  "src": "3486:10:1",
                                  "value": {
                                    "kind": "number",
                                    "nativeSrc": "3495:1:1",
                                    "nodeType": "YulLiteral",
                                    "src": "3495:1:1",
                                    "type": "",
                                    "value": "1"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "power",
                                      "nativeSrc": "3486:5:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3486:5:1"
                                    }
                                  ]
                                },
                                {
                                  "nativeSrc": "3509:5:1",
                                  "nodeType": "YulLeave",
                                  "src": "3509:5:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "exponent",
                                  "nativeSrc": "3454:8:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "3454:8:1"
                                }
                              ],
                              "functionName": {
                                "name": "iszero",
                                "nativeSrc": "3447:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "3447:6:1"
                              },
                              "nativeSrc": "3447:16:1",
                              "nodeType": "YulFunctionCall",
                              "src": "3447:16:1"
                            },
                            "nativeSrc": "3444:80:1",
                            "nodeType": "YulIf",
                            "src": "3444:80:1"
                          },
                          {
                            "body": {
                              "nativeSrc": "3557:52:1",
                              "nodeType": "YulBlock",
                              "src": "3557:52:1",
                              "statements": [
                                {
                                  "nativeSrc": "3571:10:1",
                                  "nodeType": "YulAssignment",
                                  "src": "3571:10:1",
                                  "value": {
                                    "kind": "number",
                                    "nativeSrc": "3580:1:1",
                                    "nodeType": "YulLiteral",
                                    "src": "3580:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "power",
                                      "nativeSrc": "3571:5:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3571:5:1"
                                    }
                                  ]
                                },
                                {
                                  "nativeSrc": "3594:5:1",
                                  "nodeType": "YulLeave",
                                  "src": "3594:5:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "base",
                                  "nativeSrc": "3543:4:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "3543:4:1"
                                }
                              ],
                              "functionName": {
                                "name": "iszero",
                                "nativeSrc": "3536:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "3536:6:1"
                              },
                              "nativeSrc": "3536:12:1",
                              "nodeType": "YulFunctionCall",
                              "src": "3536:12:1"
                            },
                            "nativeSrc": "3533:76:1",
                            "nodeType": "YulIf",
                            "src": "3533:76:1"
                          },
                          {
                            "cases": [
                              {
                                "body": {
                                  "nativeSrc": "3645:52:1",
                                  "nodeType": "YulBlock",
                                  "src": "3645:52:1",
                                  "statements": [
                                    {
                                      "nativeSrc": "3659:10:1",
                                      "nodeType": "YulAssignment",
                                      "src": "3659:10:1",
                                      "value": {
                                        "kind": "number",
                                        "nativeSrc": "3668:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "3668:1:1",
                                        "type": "",
                                        "value": "1"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "power",
                                          "nativeSrc": "3659:5:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3659:5:1"
                                        }
                                      ]
                                    },
                                    {
                                      "nativeSrc": "3682:5:1",
                                      "nodeType": "YulLeave",
                                      "src": "3682:5:1"
                                    }
                                  ]
                                },
                                "nativeSrc": "3638:59:1",
                                "nodeType": "YulCase",
                                "src": "3638:59:1",
                                "value": {
                                  "kind": "number",
                                  "nativeSrc": "3643:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "3643:1:1",
                                  "type": "",
                                  "value": "1"
                                }
                              },
                              {
                                "body": {
                                  "nativeSrc": "3713:167:1",
                                  "nodeType": "YulBlock",
                                  "src": "3713:167:1",
                                  "statements": [
                                    {
                                      "body": {
                                        "nativeSrc": "3748:22:1",
                                        "nodeType": "YulBlock",
                                        "src": "3748:22:1",
                                        "statements": [
                                          {
                                            "expression": {
                                              "arguments": [],
                                              "functionName": {
                                                "name": "panic_error_0x11",
                                                "nativeSrc": "3750:16:1",
                                                "nodeType": "YulIdentifier",
                                                "src": "3750:16:1"
                                              },
                                              "nativeSrc": "3750:18:1",
                                              "nodeType": "YulFunctionCall",
                                              "src": "3750:18:1"
                                            },
                                            "nativeSrc": "3750:18:1",
                                            "nodeType": "YulExpressionStatement",
                                            "src": "3750:18:1"
                                          }
                                        ]
                                      },
                                      "condition": {
                                        "arguments": [
                                          {
                                            "name": "exponent",
                                            "nativeSrc": "3733:8:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "3733:8:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "3743:3:1",
                                            "nodeType": "YulLiteral",
                                            "src": "3743:3:1",
                                            "type": "",
                                            "value": "255"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "gt",
                                          "nativeSrc": "3730:2:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3730:2:1"
                                        },
                                        "nativeSrc": "3730:17:1",
                                        "nodeType": "YulFunctionCall",
                                        "src": "3730:17:1"
                                      },
                                      "nativeSrc": "3727:43:1",
                                      "nodeType": "YulIf",
                                      "src": "3727:43:1"
                                    },
                                    {
                                      "nativeSrc": "3783:25:1",
                                      "nodeType": "YulAssignment",
                                      "src": "3783:25:1",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "exponent",
                                            "nativeSrc": "3796:8:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "3796:8:1"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "3806:1:1",
                                            "nodeType": "YulLiteral",
                                            "src": "3806:1:1",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nativeSrc": "3792:3:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3792:3:1"
                                        },
                                        "nativeSrc": "3792:16:1",
                                        "nodeType": "YulFunctionCall",
                                        "src": "3792:16:1"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "power",
                                          "nativeSrc": "3783:5:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3783:5:1"
                                        }
                                      ]
                                    },
                                    {
                                      "nativeSrc": "3821:11:1",
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "3821:11:1",
                                      "value": {
                                        "kind": "number",
                                        "nativeSrc": "3831:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "3831:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      "variables": [
                                        {
                                          "name": "_1",
                                          "nativeSrc": "3825:2:1",
                                          "nodeType": "YulTypedName",
                                          "src": "3825:2:1",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "nativeSrc": "3845:7:1",
                                      "nodeType": "YulAssignment",
                                      "src": "3845:7:1",
                                      "value": {
                                        "kind": "number",
                                        "nativeSrc": "3851:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "3851:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "_1",
                                          "nativeSrc": "3845:2:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3845:2:1"
                                        }
                                      ]
                                    },
                                    {
                                      "nativeSrc": "3865:5:1",
                                      "nodeType": "YulLeave",
                                      "src": "3865:5:1"
                                    }
                                  ]
                                },
                                "nativeSrc": "3706:174:1",
                                "nodeType": "YulCase",
                                "src": "3706:174:1",
                                "value": {
                                  "kind": "number",
                                  "nativeSrc": "3711:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "3711:1:1",
                                  "type": "",
                                  "value": "2"
                                }
                              }
                            ],
                            "expression": {
                              "name": "base",
                              "nativeSrc": "3625:4:1",
                              "nodeType": "YulIdentifier",
                              "src": "3625:4:1"
                            },
                            "nativeSrc": "3618:262:1",
                            "nodeType": "YulSwitch",
                            "src": "3618:262:1"
                          },
                          {
                            "body": {
                              "nativeSrc": "3978:114:1",
                              "nodeType": "YulBlock",
                              "src": "3978:114:1",
                              "statements": [
                                {
                                  "nativeSrc": "3992:28:1",
                                  "nodeType": "YulAssignment",
                                  "src": "3992:28:1",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "base",
                                        "nativeSrc": "4005:4:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "4005:4:1"
                                      },
                                      {
                                        "name": "exponent",
                                        "nativeSrc": "4011:8:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "4011:8:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "exp",
                                      "nativeSrc": "4001:3:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "4001:3:1"
                                    },
                                    "nativeSrc": "4001:19:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4001:19:1"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "power",
                                      "nativeSrc": "3992:5:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3992:5:1"
                                    }
                                  ]
                                },
                                {
                                  "nativeSrc": "4033:11:1",
                                  "nodeType": "YulVariableDeclaration",
                                  "src": "4033:11:1",
                                  "value": {
                                    "kind": "number",
                                    "nativeSrc": "4043:1:1",
                                    "nodeType": "YulLiteral",
                                    "src": "4043:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  "variables": [
                                    {
                                      "name": "_2",
                                      "nativeSrc": "4037:2:1",
                                      "nodeType": "YulTypedName",
                                      "src": "4037:2:1",
                                      "type": ""
                                    }
                                  ]
                                },
                                {
                                  "nativeSrc": "4057:7:1",
                                  "nodeType": "YulAssignment",
                                  "src": "4057:7:1",
                                  "value": {
                                    "kind": "number",
                                    "nativeSrc": "4063:1:1",
                                    "nodeType": "YulLiteral",
                                    "src": "4063:1:1",
                                    "type": "",
                                    "value": "0"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "_2",
                                      "nativeSrc": "4057:2:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "4057:2:1"
                                    }
                                  ]
                                },
                                {
                                  "nativeSrc": "4077:5:1",
                                  "nodeType": "YulLeave",
                                  "src": "4077:5:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "base",
                                          "nativeSrc": "3902:4:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3902:4:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "3908:2:1",
                                          "nodeType": "YulLiteral",
                                          "src": "3908:2:1",
                                          "type": "",
                                          "value": "11"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nativeSrc": "3899:2:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3899:2:1"
                                      },
                                      "nativeSrc": "3899:12:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "3899:12:1"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "exponent",
                                          "nativeSrc": "3916:8:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3916:8:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "3926:2:1",
                                          "nodeType": "YulLiteral",
                                          "src": "3926:2:1",
                                          "type": "",
                                          "value": "78"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nativeSrc": "3913:2:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3913:2:1"
                                      },
                                      "nativeSrc": "3913:16:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "3913:16:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "3895:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3895:3:1"
                                  },
                                  "nativeSrc": "3895:35:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3895:35:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "base",
                                          "nativeSrc": "3939:4:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3939:4:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "3945:3:1",
                                          "nodeType": "YulLiteral",
                                          "src": "3945:3:1",
                                          "type": "",
                                          "value": "307"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nativeSrc": "3936:2:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3936:2:1"
                                      },
                                      "nativeSrc": "3936:13:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "3936:13:1"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "exponent",
                                          "nativeSrc": "3954:8:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3954:8:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "3964:2:1",
                                          "nodeType": "YulLiteral",
                                          "src": "3964:2:1",
                                          "type": "",
                                          "value": "32"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nativeSrc": "3951:2:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3951:2:1"
                                      },
                                      "nativeSrc": "3951:16:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "3951:16:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "3932:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3932:3:1"
                                  },
                                  "nativeSrc": "3932:36:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3932:36:1"
                                }
                              ],
                              "functionName": {
                                "name": "or",
                                "nativeSrc": "3892:2:1",
                                "nodeType": "YulIdentifier",
                                "src": "3892:2:1"
                              },
                              "nativeSrc": "3892:77:1",
                              "nodeType": "YulFunctionCall",
                              "src": "3892:77:1"
                            },
                            "nativeSrc": "3889:203:1",
                            "nodeType": "YulIf",
                            "src": "3889:203:1"
                          },
                          {
                            "nativeSrc": "4101:65:1",
                            "nodeType": "YulVariableDeclaration",
                            "src": "4101:65:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "base",
                                  "nativeSrc": "4143:4:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4143:4:1"
                                },
                                {
                                  "name": "exponent",
                                  "nativeSrc": "4149:8:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4149:8:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4163:1:1",
                                      "nodeType": "YulLiteral",
                                      "src": "4163:1:1",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "not",
                                    "nativeSrc": "4159:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4159:3:1"
                                  },
                                  "nativeSrc": "4159:6:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4159:6:1"
                                }
                              ],
                              "functionName": {
                                "name": "checked_exp_helper",
                                "nativeSrc": "4124:18:1",
                                "nodeType": "YulIdentifier",
                                "src": "4124:18:1"
                              },
                              "nativeSrc": "4124:42:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4124:42:1"
                            },
                            "variables": [
                              {
                                "name": "power_1",
                                "nativeSrc": "4105:7:1",
                                "nodeType": "YulTypedName",
                                "src": "4105:7:1",
                                "type": ""
                              },
                              {
                                "name": "base_1",
                                "nativeSrc": "4114:6:1",
                                "nodeType": "YulTypedName",
                                "src": "4114:6:1",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nativeSrc": "4211:22:1",
                              "nodeType": "YulBlock",
                              "src": "4211:22:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "panic_error_0x11",
                                      "nativeSrc": "4213:16:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "4213:16:1"
                                    },
                                    "nativeSrc": "4213:18:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4213:18:1"
                                  },
                                  "nativeSrc": "4213:18:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "4213:18:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "power_1",
                                  "nativeSrc": "4181:7:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4181:7:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "4198:1:1",
                                          "nodeType": "YulLiteral",
                                          "src": "4198:1:1",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "not",
                                        "nativeSrc": "4194:3:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "4194:3:1"
                                      },
                                      "nativeSrc": "4194:6:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "4194:6:1"
                                    },
                                    {
                                      "name": "base_1",
                                      "nativeSrc": "4202:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "4202:6:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "div",
                                    "nativeSrc": "4190:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4190:3:1"
                                  },
                                  "nativeSrc": "4190:19:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4190:19:1"
                                }
                              ],
                              "functionName": {
                                "name": "gt",
                                "nativeSrc": "4178:2:1",
                                "nodeType": "YulIdentifier",
                                "src": "4178:2:1"
                              },
                              "nativeSrc": "4178:32:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4178:32:1"
                            },
                            "nativeSrc": "4175:58:1",
                            "nodeType": "YulIf",
                            "src": "4175:58:1"
                          },
                          {
                            "nativeSrc": "4242:29:1",
                            "nodeType": "YulAssignment",
                            "src": "4242:29:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "power_1",
                                  "nativeSrc": "4255:7:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4255:7:1"
                                },
                                {
                                  "name": "base_1",
                                  "nativeSrc": "4264:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4264:6:1"
                                }
                              ],
                              "functionName": {
                                "name": "mul",
                                "nativeSrc": "4251:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "4251:3:1"
                              },
                              "nativeSrc": "4251:20:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4251:20:1"
                            },
                            "variableNames": [
                              {
                                "name": "power",
                                "nativeSrc": "4242:5:1",
                                "nodeType": "YulIdentifier",
                                "src": "4242:5:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "checked_exp_unsigned",
                      "nativeSrc": "3375:902:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "base",
                          "nativeSrc": "3405:4:1",
                          "nodeType": "YulTypedName",
                          "src": "3405:4:1",
                          "type": ""
                        },
                        {
                          "name": "exponent",
                          "nativeSrc": "3411:8:1",
                          "nodeType": "YulTypedName",
                          "src": "3411:8:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "power",
                          "nativeSrc": "3424:5:1",
                          "nodeType": "YulTypedName",
                          "src": "3424:5:1",
                          "type": ""
                        }
                      ],
                      "src": "3375:902:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "4350:72:1",
                        "nodeType": "YulBlock",
                        "src": "4350:72:1",
                        "statements": [
                          {
                            "nativeSrc": "4360:56:1",
                            "nodeType": "YulAssignment",
                            "src": "4360:56:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "base",
                                  "nativeSrc": "4390:4:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4390:4:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "exponent",
                                      "nativeSrc": "4400:8:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "4400:8:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4410:4:1",
                                      "nodeType": "YulLiteral",
                                      "src": "4410:4:1",
                                      "type": "",
                                      "value": "0xff"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "4396:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4396:3:1"
                                  },
                                  "nativeSrc": "4396:19:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4396:19:1"
                                }
                              ],
                              "functionName": {
                                "name": "checked_exp_unsigned",
                                "nativeSrc": "4369:20:1",
                                "nodeType": "YulIdentifier",
                                "src": "4369:20:1"
                              },
                              "nativeSrc": "4369:47:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4369:47:1"
                            },
                            "variableNames": [
                              {
                                "name": "power",
                                "nativeSrc": "4360:5:1",
                                "nodeType": "YulIdentifier",
                                "src": "4360:5:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "checked_exp_t_uint256_t_uint8",
                      "nativeSrc": "4282:140:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "base",
                          "nativeSrc": "4321:4:1",
                          "nodeType": "YulTypedName",
                          "src": "4321:4:1",
                          "type": ""
                        },
                        {
                          "name": "exponent",
                          "nativeSrc": "4327:8:1",
                          "nodeType": "YulTypedName",
                          "src": "4327:8:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "power",
                          "nativeSrc": "4340:5:1",
                          "nodeType": "YulTypedName",
                          "src": "4340:5:1",
                          "type": ""
                        }
                      ],
                      "src": "4282:140:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "4479:116:1",
                        "nodeType": "YulBlock",
                        "src": "4479:116:1",
                        "statements": [
                          {
                            "nativeSrc": "4489:20:1",
                            "nodeType": "YulAssignment",
                            "src": "4489:20:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "x",
                                  "nativeSrc": "4504:1:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4504:1:1"
                                },
                                {
                                  "name": "y",
                                  "nativeSrc": "4507:1:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4507:1:1"
                                }
                              ],
                              "functionName": {
                                "name": "mul",
                                "nativeSrc": "4500:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "4500:3:1"
                              },
                              "nativeSrc": "4500:9:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4500:9:1"
                            },
                            "variableNames": [
                              {
                                "name": "product",
                                "nativeSrc": "4489:7:1",
                                "nodeType": "YulIdentifier",
                                "src": "4489:7:1"
                              }
                            ]
                          },
                          {
                            "body": {
                              "nativeSrc": "4567:22:1",
                              "nodeType": "YulBlock",
                              "src": "4567:22:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "panic_error_0x11",
                                      "nativeSrc": "4569:16:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "4569:16:1"
                                    },
                                    "nativeSrc": "4569:18:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4569:18:1"
                                  },
                                  "nativeSrc": "4569:18:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "4569:18:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "x",
                                          "nativeSrc": "4538:1:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "4538:1:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "iszero",
                                        "nativeSrc": "4531:6:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "4531:6:1"
                                      },
                                      "nativeSrc": "4531:9:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "4531:9:1"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "y",
                                          "nativeSrc": "4545:1:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "4545:1:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "product",
                                              "nativeSrc": "4552:7:1",
                                              "nodeType": "YulIdentifier",
                                              "src": "4552:7:1"
                                            },
                                            {
                                              "name": "x",
                                              "nativeSrc": "4561:1:1",
                                              "nodeType": "YulIdentifier",
                                              "src": "4561:1:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "div",
                                            "nativeSrc": "4548:3:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "4548:3:1"
                                          },
                                          "nativeSrc": "4548:15:1",
                                          "nodeType": "YulFunctionCall",
                                          "src": "4548:15:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "eq",
                                        "nativeSrc": "4542:2:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "4542:2:1"
                                      },
                                      "nativeSrc": "4542:22:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "4542:22:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "or",
                                    "nativeSrc": "4528:2:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4528:2:1"
                                  },
                                  "nativeSrc": "4528:37:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4528:37:1"
                                }
                              ],
                              "functionName": {
                                "name": "iszero",
                                "nativeSrc": "4521:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "4521:6:1"
                              },
                              "nativeSrc": "4521:45:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4521:45:1"
                            },
                            "nativeSrc": "4518:71:1",
                            "nodeType": "YulIf",
                            "src": "4518:71:1"
                          }
                        ]
                      },
                      "name": "checked_mul_t_uint256",
                      "nativeSrc": "4427:168:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "x",
                          "nativeSrc": "4458:1:1",
                          "nodeType": "YulTypedName",
                          "src": "4458:1:1",
                          "type": ""
                        },
                        {
                          "name": "y",
                          "nativeSrc": "4461:1:1",
                          "nodeType": "YulTypedName",
                          "src": "4461:1:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "product",
                          "nativeSrc": "4467:7:1",
                          "nodeType": "YulTypedName",
                          "src": "4467:7:1",
                          "type": ""
                        }
                      ],
                      "src": "4427:168:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "4648:77:1",
                        "nodeType": "YulBlock",
                        "src": "4648:77:1",
                        "statements": [
                          {
                            "nativeSrc": "4658:16:1",
                            "nodeType": "YulAssignment",
                            "src": "4658:16:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "x",
                                  "nativeSrc": "4669:1:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4669:1:1"
                                },
                                {
                                  "name": "y",
                                  "nativeSrc": "4672:1:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4672:1:1"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "4665:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "4665:3:1"
                              },
                              "nativeSrc": "4665:9:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4665:9:1"
                            },
                            "variableNames": [
                              {
                                "name": "sum",
                                "nativeSrc": "4658:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "4658:3:1"
                              }
                            ]
                          },
                          {
                            "body": {
                              "nativeSrc": "4697:22:1",
                              "nodeType": "YulBlock",
                              "src": "4697:22:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "panic_error_0x11",
                                      "nativeSrc": "4699:16:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "4699:16:1"
                                    },
                                    "nativeSrc": "4699:18:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4699:18:1"
                                  },
                                  "nativeSrc": "4699:18:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "4699:18:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "x",
                                  "nativeSrc": "4689:1:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4689:1:1"
                                },
                                {
                                  "name": "sum",
                                  "nativeSrc": "4692:3:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4692:3:1"
                                }
                              ],
                              "functionName": {
                                "name": "gt",
                                "nativeSrc": "4686:2:1",
                                "nodeType": "YulIdentifier",
                                "src": "4686:2:1"
                              },
                              "nativeSrc": "4686:10:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4686:10:1"
                            },
                            "nativeSrc": "4683:36:1",
                            "nodeType": "YulIf",
                            "src": "4683:36:1"
                          }
                        ]
                      },
                      "name": "checked_add_t_uint256",
                      "nativeSrc": "4600:125:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "x",
                          "nativeSrc": "4631:1:1",
                          "nodeType": "YulTypedName",
                          "src": "4631:1:1",
                          "type": ""
                        },
                        {
                          "name": "y",
                          "nativeSrc": "4634:1:1",
                          "nodeType": "YulTypedName",
                          "src": "4634:1:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "sum",
                          "nativeSrc": "4640:3:1",
                          "nodeType": "YulTypedName",
                          "src": "4640:3:1",
                          "type": ""
                        }
                      ],
                      "src": "4600:125:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "4887:188:1",
                        "nodeType": "YulBlock",
                        "src": "4887:188:1",
                        "statements": [
                          {
                            "nativeSrc": "4897:26:1",
                            "nodeType": "YulAssignment",
                            "src": "4897:26:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "4909:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4909:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "4920:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "4920:2:1",
                                  "type": "",
                                  "value": "96"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "4905:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "4905:3:1"
                              },
                              "nativeSrc": "4905:18:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4905:18:1"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nativeSrc": "4897:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "4897:4:1"
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "4939:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4939:9:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nativeSrc": "4954:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "4954:6:1"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "4970:3:1",
                                              "nodeType": "YulLiteral",
                                              "src": "4970:3:1",
                                              "type": "",
                                              "value": "160"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "4975:1:1",
                                              "nodeType": "YulLiteral",
                                              "src": "4975:1:1",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nativeSrc": "4966:3:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "4966:3:1"
                                          },
                                          "nativeSrc": "4966:11:1",
                                          "nodeType": "YulFunctionCall",
                                          "src": "4966:11:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "4979:1:1",
                                          "nodeType": "YulLiteral",
                                          "src": "4979:1:1",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nativeSrc": "4962:3:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "4962:3:1"
                                      },
                                      "nativeSrc": "4962:19:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "4962:19:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "4950:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4950:3:1"
                                  },
                                  "nativeSrc": "4950:32:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4950:32:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "4932:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "4932:6:1"
                              },
                              "nativeSrc": "4932:51:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4932:51:1"
                            },
                            "nativeSrc": "4932:51:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "4932:51:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "5003:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5003:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "5014:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "5014:2:1",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "4999:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4999:3:1"
                                  },
                                  "nativeSrc": "4999:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4999:18:1"
                                },
                                {
                                  "name": "value1",
                                  "nativeSrc": "5019:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5019:6:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "4992:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "4992:6:1"
                              },
                              "nativeSrc": "4992:34:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4992:34:1"
                            },
                            "nativeSrc": "4992:34:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "4992:34:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "5046:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5046:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "5057:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "5057:2:1",
                                      "type": "",
                                      "value": "64"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "5042:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5042:3:1"
                                  },
                                  "nativeSrc": "5042:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5042:18:1"
                                },
                                {
                                  "name": "value2",
                                  "nativeSrc": "5062:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5062:6:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "5035:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "5035:6:1"
                              },
                              "nativeSrc": "5035:34:1",
                              "nodeType": "YulFunctionCall",
                              "src": "5035:34:1"
                            },
                            "nativeSrc": "5035:34:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "5035:34:1"
                          }
                        ]
                      },
                      "name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
                      "nativeSrc": "4730:345:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "4840:9:1",
                          "nodeType": "YulTypedName",
                          "src": "4840:9:1",
                          "type": ""
                        },
                        {
                          "name": "value2",
                          "nativeSrc": "4851:6:1",
                          "nodeType": "YulTypedName",
                          "src": "4851:6:1",
                          "type": ""
                        },
                        {
                          "name": "value1",
                          "nativeSrc": "4859:6:1",
                          "nodeType": "YulTypedName",
                          "src": "4859:6:1",
                          "type": ""
                        },
                        {
                          "name": "value0",
                          "nativeSrc": "4867:6:1",
                          "nodeType": "YulTypedName",
                          "src": "4867:6:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "tail",
                          "nativeSrc": "4878:4:1",
                          "nodeType": "YulTypedName",
                          "src": "4878:4:1",
                          "type": ""
                        }
                      ],
                      "src": "4730:345:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "5181:76:1",
                        "nodeType": "YulBlock",
                        "src": "5181:76:1",
                        "statements": [
                          {
                            "nativeSrc": "5191:26:1",
                            "nodeType": "YulAssignment",
                            "src": "5191:26:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "5203:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5203:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "5214:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "5214:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "5199:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "5199:3:1"
                              },
                              "nativeSrc": "5199:18:1",
                              "nodeType": "YulFunctionCall",
                              "src": "5199:18:1"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nativeSrc": "5191:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "5191:4:1"
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "5233:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5233:9:1"
                                },
                                {
                                  "name": "value0",
                                  "nativeSrc": "5244:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5244:6:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "5226:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "5226:6:1"
                              },
                              "nativeSrc": "5226:25:1",
                              "nodeType": "YulFunctionCall",
                              "src": "5226:25:1"
                            },
                            "nativeSrc": "5226:25:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "5226:25:1"
                          }
                        ]
                      },
                      "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                      "nativeSrc": "5080:177:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "5150:9:1",
                          "nodeType": "YulTypedName",
                          "src": "5150:9:1",
                          "type": ""
                        },
                        {
                          "name": "value0",
                          "nativeSrc": "5161:6:1",
                          "nodeType": "YulTypedName",
                          "src": "5161:6:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "tail",
                          "nativeSrc": "5172:4:1",
                          "nodeType": "YulTypedName",
                          "src": "5172:4:1",
                          "type": ""
                        }
                      ],
                      "src": "5080:177:1"
                    }
                  ]
                },
                "contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _1 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _1) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_exp_helper(_base, exponent, max) -> power, base\n    {\n        power := 1\n        base := _base\n        for { } gt(exponent, 1) { }\n        {\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            let _1 := 0\n            _1 := 0\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            let _2 := 0\n            _2 := 0\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent, not(0))\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}",
                "id": 1,
                "language": "Yul",
                "name": "#utility.yul"
              }
            ],
            "linkReferences": {},
            "object": "60c060405260096080908152682a34b6b29021b7b4b760b91b60a052600690610028908261046d565b5060408051808201909152600481526354494d4560e01b6020820152600790610051908261046d565b506078600e55348015610062575f80fd5b503360068054610071906103e9565b80601f016020809104026020016040519081016040528092919081815260200182805461009d906103e9565b80156100e85780601f106100bf576101008083540402835291602001916100e8565b820191905f5260205f20905b8154815290600101906020018083116100cb57829003601f168201915b5050505050600780546100fa906103e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610126906103e9565b80156101715780601f1061014857610100808354040283529160200191610171565b820191905f5260205f20905b81548152906001019060200180831161015457829003601f168201915b50505050508160039081610185919061046d565b506004610192828261046d565b5050506001600160a01b0381166101c357604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b6101cc81610226565b506101d96012600a610620565b6101e690620f4240610635565b6008556101f533600854610277565b60036009556005600a8181556002600b55600c91909155600d55600f80546001600160a01b0319163317905561065f565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b0382166102a05760405163ec442f0560e01b81525f60048201526024016101ba565b6102ab5f83836102af565b5050565b6001600160a01b0383166102d9578060025f8282546102ce919061064c565b909155506103499050565b6001600160a01b0383165f908152602081905260409020548181101561032b5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016101ba565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b03821661036557600280548290039055610383565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516103c891815260200190565b60405180910390a3505050565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806103fd57607f821691505b60208210810361041b57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561046857805f5260205f20601f840160051c810160208510156104465750805b601f840160051c820191505b81811015610465575f8155600101610452565b50505b505050565b81516001600160401b03811115610486576104866103d5565b61049a8161049484546103e9565b84610421565b6020601f8211600181146104cc575f83156104b55750848201515b5f19600385901b1c1916600184901b178455610465565b5f84815260208120601f198516915b828110156104fb57878501518255602094850194600190920191016104db565b508482101561051857868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b5f52601160045260245ffd5b6001815b60018411156105765780850481111561055a5761055a610527565b600184161561056857908102905b60019390931c92800261053f565b935093915050565b5f8261058c5750600161061a565b8161059857505f61061a565b81600181146105ae57600281146105b8576105d4565b600191505061061a565b60ff8411156105c9576105c9610527565b50506001821b61061a565b5060208310610133831016604e8410600b84101617156105f7575081810a61061a565b6106035f19848461053b565b805f190482111561061657610616610527565b0290505b92915050565b5f61062e60ff84168361057e565b9392505050565b808202811582820484141761061a5761061a610527565b8082018082111561061a5761061a610527565b6113538061066c5f395ff3fe608060405260043610610164575f3560e01c8063715018a6116100cd578063cc1776d311610087578063efdcd97411610062578063efdcd9741461040c578063f2fde38b1461042b578063f42938901461044a578063f94325171461045e575f80fd5b8063cc1776d31461039e578063d73792a9146103b3578063dd62ed3e146103c8575f80fd5b8063715018a6146102e857806377b54bad146102fc5780638da5cb5b1461031b57806395d89b411461034c578063a9059cbb14610360578063b3f006741461037f575f80fd5b80634f7041a51161011e5780634f7041a5146102355780634f91e48c1461024a57806352f7c9881461025f578063589210d9146102805780635a0295351461029557806370a08231146102b4575f80fd5b806306fdde031461016f578063095ea7b31461019957806318160ddd146101c857806323b872dd146101e6578063313ce567146102055780633f4be31e14610220575f80fd5b3661016b57005b5f80fd5b34801561017a575f80fd5b50610183610473565b604051610190919061101a565b60405180910390f35b3480156101a4575f80fd5b506101b86101b3366004611047565b610503565b6040519015158152602001610190565b3480156101d3575f80fd5b506002545b604051908152602001610190565b3480156101f1575f80fd5b506101b861020036600461106f565b61051c565b348015610210575f80fd5b5060405160128152602001610190565b34801561022b575f80fd5b506101d8600e5481565b348015610240575f80fd5b506101d860095481565b348015610255575f80fd5b506101d8600c5481565b34801561026a575f80fd5b5061027e6102793660046110a9565b61065d565b005b34801561028b575f80fd5b506101d8600b5481565b3480156102a0575f80fd5b5061027e6102af3660046110c9565b610670565b3480156102bf575f80fd5b506101d86102ce3660046110e0565b6001600160a01b03165f9081526020819052604090205490565b3480156102f3575f80fd5b5061027e61067d565b348015610307575f80fd5b506101b8610316366004611047565b610690565b348015610326575f80fd5b506005546001600160a01b03165b6040516001600160a01b039091168152602001610190565b348015610357575f80fd5b506101836107b0565b34801561036b575f80fd5b506101b861037a366004611047565b6107bf565b34801561038a575f80fd5b50600f54610334906001600160a01b031681565b3480156103a9575f80fd5b506101d8600a5481565b3480156103be575f80fd5b506101d86103e881565b3480156103d3575f80fd5b506101d86103e23660046110f9565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b348015610417575f80fd5b5061027e6104263660046110e0565b610959565b348015610436575f80fd5b5061027e6104453660046110e0565b6109ee565b348015610455575f80fd5b5061027e610a2b565b348015610469575f80fd5b506101d8600d5481565b6060600380546104829061112a565b80601f01602080910402602001604051908101604052809291908181526020018280546104ae9061112a565b80156104f95780601f106104d0576101008083540402835291602001916104f9565b820191905f5260205f20905b8154815290600101906020018083116104dc57829003601f168201915b5050505050905090565b5f33610510818585610a94565b60019150505b92915050565b5f8082116105625760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b60448201526064015b60405180910390fd5b6001600160a01b0383166105ac5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606401610559565b6001600160a01b0384166105f35760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b2b73232b960911b6044820152606401610559565b5f6105fe85336103e2565b9050828110156106495760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420416c6c6f77616e636560501b6044820152606401610559565b610654858585610aa6565b95945050505050565b610665610c27565b600991909155600a55565b610678610c27565b600e55565b610685610c27565b61068e5f610c54565b565b600f545f906001600160a01b0316336001600160a01b0316146106c55760405162461bcd60e51b815260040161055990611162565b815f03610735576040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa15801561070e573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061073291906111a6565b91505b600f5460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490529084169063a9059cbb906044016020604051808303815f875af1158015610785573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107a991906111bd565b9392505050565b6060600480546104829061112a565b600d546040805180820190915260088152673a3930b739b332b960c11b60208201525f91339185918591843b63ffffffff161561081a575050600b5460408051808201909152600381526262757960e81b6020820152610871565b833b63ffffffff161561084c575050600c546040805180820190915260048152631cd95b1b60e21b6020820152610871565b5050600d546040805180820190915260088152673a3930b739b332b960c11b60208201525b8282101583828460405160200161088a939291906111dc565b604051602081830303815290604052906108b75760405162461bcd60e51b8152600401610559919061101a565b505f87116108f85760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610559565b6001600160a01b0388166109425760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606401610559565b61094d338989610aa6565b98975050505050505050565b600f546001600160a01b0316336001600160a01b0316146109cc5760405162461bcd60e51b815260206004820152602760248201527f596f7520617265206e6f7420616c6c6f77656420746f2073657420666565207260448201526632b1b2b4bb32b960c91b6064820152608401610559565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b6109f6610c27565b6001600160a01b038116610a1f57604051631e4fbdf760e01b81525f6004820152602401610559565b610a2881610c54565b50565b600f546001600160a01b0316336001600160a01b031614610a5e5760405162461bcd60e51b815260040161055990611162565b600f546040516001600160a01b03909116904780156108fc02915f818181858888f19350505050158015610a28573d5f803e3d5ffd5b610aa18383836001610ca5565b505050565b600d546040805180820190915260088152673a3930b739b332b960c11b60208201525f91859185918591843b63ffffffff1615610b01575050600b5460408051808201909152600381526262757960e81b6020820152610b58565b833b63ffffffff1615610b33575050600c546040805180820190915260048152631cd95b1b60e21b6020820152610b58565b5050600d546040805180820190915260088152673a3930b739b332b960c11b60208201525b82821015838284604051602001610b71939291906111dc565b60405160208183030381529060405290610b9e5760405162461bcd60e51b8152600401610559919061101a565b506001600160a01b0389165f9081526020819052604090205487811015610bfe5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742042616c616e636560601b6044820152606401610559565b5f610c098b8a610d78565b9050610c168b8b83610e48565b5060019a9950505050505050505050565b6005546001600160a01b0316331461068e5760405163118cdaa760e01b8152336004820152602401610559565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b038416610cce5760405163e602df0560e01b81525f6004820152602401610559565b6001600160a01b038316610cf757604051634a1406b160e11b81525f6004820152602401610559565b6001600160a01b038085165f9081526001602090815260408083209387168352929052208290558015610d7257826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610d6991815260200190565b60405180910390a35b50505050565b5f806001600160a01b0384163314610d9257600954610d96565b600a545b90505f610daf6103e8610da98685610ea5565b90610eb0565b90505f610dbc8583610ebb565b90505f610ddd876001600160a01b03165f9081526020819052604090205490565b905085811015610e265760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742042616c616e636560601b6044820152606401610559565b600f54610e3e9088906001600160a01b031685610e48565b5095945050505050565b6001600160a01b038316610e7157604051634b637e8f60e11b81525f6004820152602401610559565b6001600160a01b038216610e9a5760405163ec442f0560e01b81525f6004820152602401610559565b610aa1838383610ec6565b5f6107a982846112c1565b5f6107a982846112d8565b5f6107a982846112f7565b6001600160a01b038316610ef0578060025f828254610ee5919061130a565b90915550610f609050565b6001600160a01b0383165f9081526020819052604090205481811015610f425760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610559565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b038216610f7c57600280548290039055610f9a565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610fdf91815260200190565b60405180910390a3505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6107a96020830184610fec565b80356001600160a01b0381168114611042575f80fd5b919050565b5f8060408385031215611058575f80fd5b6110618361102c565b946020939093013593505050565b5f805f60608486031215611081575f80fd5b61108a8461102c565b92506110986020850161102c565b929592945050506040919091013590565b5f80604083850312156110ba575f80fd5b50508035926020909101359150565b5f602082840312156110d9575f80fd5b5035919050565b5f602082840312156110f0575f80fd5b6107a98261102c565b5f806040838503121561110a575f80fd5b6111138361102c565b91506111216020840161102c565b90509250929050565b600181811c9082168061113e57607f821691505b60208210810361115c57634e487b7160e01b5f52602260045260245ffd5b50919050565b60208082526024908201527f6f6e6c79206665652072656365697665722063616e207472616e736665722066604082015263756e647360e01b606082015260800190565b5f602082840312156111b6575f80fd5b5051919050565b5f602082840312156111cd575f80fd5b815180151581146107a9575f80fd5b60c08152601760c08201527f546865207472616e7366657220616d6f756e74206f662000000000000000000060e0820152836020820152610100604082015260156101008201527401032bc31b2b2b239903a34329030b63637bbb2b21605d1b61012082015261014060608201525f611259610140830185610fec565b8281036080840152602681527f206c696d69742e20546865206d6178696d756d20616c6c6f77656420616d6f756020820152650373a1034b9960d51b604082015260a0909201929092526060019392505050565b634e487b7160e01b5f52601160045260245ffd5b8082028115828204841417610516576105166112ad565b5f826112f257634e487b7160e01b5f52601260045260245ffd5b500490565b81810381811115610516576105166112ad565b80820180821115610516576105166112ad56fea264697066735822122013491db28270216ab726e747e928e000b705fa4443e5403541f3629448dc9a6964736f6c634300081a0033",
            "opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE PUSH1 0x9 PUSH1 0x80 SWAP1 DUP2 MSTORE PUSH9 0x2A34B6B29021B7B4B7 PUSH1 0xB9 SHL PUSH1 0xA0 MSTORE PUSH1 0x6 SWAP1 PUSH2 0x28 SWAP1 DUP3 PUSH2 0x46D JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0x54494D45 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x7 SWAP1 PUSH2 0x51 SWAP1 DUP3 PUSH2 0x46D JUMP JUMPDEST POP PUSH1 0x78 PUSH1 0xE SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x62 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x6 DUP1 SLOAD PUSH2 0x71 SWAP1 PUSH2 0x3E9 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9D SWAP1 PUSH2 0x3E9 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xE8 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xBF JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xE8 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xCB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH1 0x7 DUP1 SLOAD PUSH2 0xFA SWAP1 PUSH2 0x3E9 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x126 SWAP1 PUSH2 0x3E9 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x171 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x148 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x171 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x154 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH2 0x185 SWAP2 SWAP1 PUSH2 0x46D JUMP JUMPDEST POP PUSH1 0x4 PUSH2 0x192 DUP3 DUP3 PUSH2 0x46D JUMP JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1C3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1CC DUP2 PUSH2 0x226 JUMP JUMPDEST POP PUSH2 0x1D9 PUSH1 0x12 PUSH1 0xA PUSH2 0x620 JUMP JUMPDEST PUSH2 0x1E6 SWAP1 PUSH3 0xF4240 PUSH2 0x635 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0x1F5 CALLER PUSH1 0x8 SLOAD PUSH2 0x277 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x9 SSTORE PUSH1 0x5 PUSH1 0xA DUP2 DUP2 SSTORE PUSH1 0x2 PUSH1 0xB SSTORE PUSH1 0xC SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xD SSTORE PUSH1 0xF DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x65F JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2A0 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1BA JUMP JUMPDEST PUSH2 0x2AB PUSH0 DUP4 DUP4 PUSH2 0x2AF JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2D9 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x2CE SWAP2 SWAP1 PUSH2 0x64C JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x349 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x32B JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x1BA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x365 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0x383 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x3C8 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x3FD JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x41B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x468 JUMPI DUP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x446 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x465 JUMPI PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x452 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x486 JUMPI PUSH2 0x486 PUSH2 0x3D5 JUMP JUMPDEST PUSH2 0x49A DUP2 PUSH2 0x494 DUP5 SLOAD PUSH2 0x3E9 JUMP JUMPDEST DUP5 PUSH2 0x421 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0x4CC JUMPI PUSH0 DUP4 ISZERO PUSH2 0x4B5 JUMPI POP DUP5 DUP3 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x465 JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP6 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4FB JUMPI DUP8 DUP6 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x4DB JUMP JUMPDEST POP DUP5 DUP3 LT ISZERO PUSH2 0x518 JUMPI DUP7 DUP5 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP8 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 JUMPDEST PUSH1 0x1 DUP5 GT ISZERO PUSH2 0x576 JUMPI DUP1 DUP6 DIV DUP2 GT ISZERO PUSH2 0x55A JUMPI PUSH2 0x55A PUSH2 0x527 JUMP JUMPDEST PUSH1 0x1 DUP5 AND ISZERO PUSH2 0x568 JUMPI SWAP1 DUP2 MUL SWAP1 JUMPDEST PUSH1 0x1 SWAP4 SWAP1 SWAP4 SHR SWAP3 DUP1 MUL PUSH2 0x53F JUMP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x58C JUMPI POP PUSH1 0x1 PUSH2 0x61A JUMP JUMPDEST DUP2 PUSH2 0x598 JUMPI POP PUSH0 PUSH2 0x61A JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x5AE JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x5B8 JUMPI PUSH2 0x5D4 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x61A JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x5C9 JUMPI PUSH2 0x5C9 PUSH2 0x527 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x61A JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x5F7 JUMPI POP DUP2 DUP2 EXP PUSH2 0x61A JUMP JUMPDEST PUSH2 0x603 PUSH0 NOT DUP5 DUP5 PUSH2 0x53B JUMP JUMPDEST DUP1 PUSH0 NOT DIV DUP3 GT ISZERO PUSH2 0x616 JUMPI PUSH2 0x616 PUSH2 0x527 JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x62E PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x57E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x61A JUMPI PUSH2 0x61A PUSH2 0x527 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x61A JUMPI PUSH2 0x61A PUSH2 0x527 JUMP JUMPDEST PUSH2 0x1353 DUP1 PUSH2 0x66C PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x164 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xCD JUMPI DUP1 PUSH4 0xCC1776D3 GT PUSH2 0x87 JUMPI DUP1 PUSH4 0xEFDCD974 GT PUSH2 0x62 JUMPI DUP1 PUSH4 0xEFDCD974 EQ PUSH2 0x40C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x42B JUMPI DUP1 PUSH4 0xF4293890 EQ PUSH2 0x44A JUMPI DUP1 PUSH4 0xF9432517 EQ PUSH2 0x45E JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCC1776D3 EQ PUSH2 0x39E JUMPI DUP1 PUSH4 0xD73792A9 EQ PUSH2 0x3B3 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x3C8 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2E8 JUMPI DUP1 PUSH4 0x77B54BAD EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x31B JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x34C JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x360 JUMPI DUP1 PUSH4 0xB3F00674 EQ PUSH2 0x37F JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4F7041A5 GT PUSH2 0x11E JUMPI DUP1 PUSH4 0x4F7041A5 EQ PUSH2 0x235 JUMPI DUP1 PUSH4 0x4F91E48C EQ PUSH2 0x24A JUMPI DUP1 PUSH4 0x52F7C988 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0x589210D9 EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0x5A029535 EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2B4 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x199 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x205 JUMPI DUP1 PUSH4 0x3F4BE31E EQ PUSH2 0x220 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x16B JUMPI STOP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x183 PUSH2 0x473 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x190 SWAP2 SWAP1 PUSH2 0x101A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A4 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x1B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1047 JUMP JUMPDEST PUSH2 0x503 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x190 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D3 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x190 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F1 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x200 CALLDATASIZE PUSH1 0x4 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x51C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x210 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x190 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D8 PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x240 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D8 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x255 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D8 PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x27E PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0x10A9 JUMP JUMPDEST PUSH2 0x65D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D8 PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A0 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x27E PUSH2 0x2AF CALLDATASIZE PUSH1 0x4 PUSH2 0x10C9 JUMP JUMPDEST PUSH2 0x670 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D8 PUSH2 0x2CE CALLDATASIZE PUSH1 0x4 PUSH2 0x10E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F3 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x27E PUSH2 0x67D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x307 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x316 CALLDATASIZE PUSH1 0x4 PUSH2 0x1047 JUMP JUMPDEST PUSH2 0x690 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x326 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x190 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x357 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x183 PUSH2 0x7B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x37A CALLDATASIZE PUSH1 0x4 PUSH2 0x1047 JUMP JUMPDEST PUSH2 0x7BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0xF SLOAD PUSH2 0x334 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A9 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D8 PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D8 PUSH2 0x3E8 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D3 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D8 PUSH2 0x3E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x10F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x417 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x27E PUSH2 0x426 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E0 JUMP JUMPDEST PUSH2 0x959 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x436 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x27E PUSH2 0x445 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E0 JUMP JUMPDEST PUSH2 0x9EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x455 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x27E PUSH2 0xA2B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x469 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D8 PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x482 SWAP1 PUSH2 0x112A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4AE SWAP1 PUSH2 0x112A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4F9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4D0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4F9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4DC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x510 DUP2 DUP6 DUP6 PUSH2 0xA94 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 DUP3 GT PUSH2 0x562 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x125B9D985B1A5908185B5BDD5B9D PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x125B9D985B1A59081C9958DA5C1A595B9D PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x5F3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x24B73B30B634B21039B2B73232B9 PUSH1 0x91 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x559 JUMP JUMPDEST PUSH0 PUSH2 0x5FE DUP6 CALLER PUSH2 0x3E2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x649 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x496E73756666696369656E7420416C6C6F77616E6365 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x559 JUMP JUMPDEST PUSH2 0x654 DUP6 DUP6 DUP6 PUSH2 0xAA6 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x665 PUSH2 0xC27 JUMP JUMPDEST PUSH1 0x9 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xA SSTORE JUMP JUMPDEST PUSH2 0x678 PUSH2 0xC27 JUMP JUMPDEST PUSH1 0xE SSTORE JUMP JUMPDEST PUSH2 0x685 PUSH2 0xC27 JUMP JUMPDEST PUSH2 0x68E PUSH0 PUSH2 0xC54 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xF SLOAD PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x559 SWAP1 PUSH2 0x1162 JUMP JUMPDEST DUP2 PUSH0 SUB PUSH2 0x735 JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x70E JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x732 SWAP2 SWAP1 PUSH2 0x11A6 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 DUP5 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x785 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7A9 SWAP2 SWAP1 PUSH2 0x11BD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x482 SWAP1 PUSH2 0x112A JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP2 MSTORE PUSH8 0x3A3930B739B332B9 PUSH1 0xC1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH0 SWAP2 CALLER SWAP2 DUP6 SWAP2 DUP6 SWAP2 DUP5 EXTCODESIZE PUSH4 0xFFFFFFFF AND ISZERO PUSH2 0x81A JUMPI POP POP PUSH1 0xB SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH3 0x627579 PUSH1 0xE8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x871 JUMP JUMPDEST DUP4 EXTCODESIZE PUSH4 0xFFFFFFFF AND ISZERO PUSH2 0x84C JUMPI POP POP PUSH1 0xC SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0x1CD95B1B PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x871 JUMP JUMPDEST POP POP PUSH1 0xD SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP2 MSTORE PUSH8 0x3A3930B739B332B9 PUSH1 0xC1 SHL PUSH1 0x20 DUP3 ADD MSTORE JUMPDEST DUP3 DUP3 LT ISZERO DUP4 DUP3 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x88A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH2 0x8B7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x559 SWAP2 SWAP1 PUSH2 0x101A JUMP JUMPDEST POP PUSH0 DUP8 GT PUSH2 0x8F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x125B9D985B1A5908185B5BDD5B9D PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x942 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x125B9D985B1A59081C9958DA5C1A595B9D PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x559 JUMP JUMPDEST PUSH2 0x94D CALLER DUP10 DUP10 PUSH2 0xAA6 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x9CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7520617265206E6F7420616C6C6F77656420746F20736574206665652072 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x32B1B2B4BB32B9 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0xF DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x9F6 PUSH2 0xC27 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xA1F JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x559 JUMP JUMPDEST PUSH2 0xA28 DUP2 PUSH2 0xC54 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA5E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x559 SWAP1 PUSH2 0x1162 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xA28 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST PUSH2 0xAA1 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xCA5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP2 MSTORE PUSH8 0x3A3930B739B332B9 PUSH1 0xC1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH0 SWAP2 DUP6 SWAP2 DUP6 SWAP2 DUP6 SWAP2 DUP5 EXTCODESIZE PUSH4 0xFFFFFFFF AND ISZERO PUSH2 0xB01 JUMPI POP POP PUSH1 0xB SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH3 0x627579 PUSH1 0xE8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xB58 JUMP JUMPDEST DUP4 EXTCODESIZE PUSH4 0xFFFFFFFF AND ISZERO PUSH2 0xB33 JUMPI POP POP PUSH1 0xC SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0x1CD95B1B PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xB58 JUMP JUMPDEST POP POP PUSH1 0xD SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP2 MSTORE PUSH8 0x3A3930B739B332B9 PUSH1 0xC1 SHL PUSH1 0x20 DUP3 ADD MSTORE JUMPDEST DUP3 DUP3 LT ISZERO DUP4 DUP3 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB71 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH2 0xB9E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x559 SWAP2 SWAP1 PUSH2 0x101A JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP8 DUP2 LT ISZERO PUSH2 0xBFE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E73756666696369656E742042616C616E6365 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x559 JUMP JUMPDEST PUSH0 PUSH2 0xC09 DUP12 DUP11 PUSH2 0xD78 JUMP JUMPDEST SWAP1 POP PUSH2 0xC16 DUP12 DUP12 DUP4 PUSH2 0xE48 JUMP JUMPDEST POP PUSH1 0x1 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x68E JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xCCE JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xCF7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0xD72 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0xD69 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND CALLER EQ PUSH2 0xD92 JUMPI PUSH1 0x9 SLOAD PUSH2 0xD96 JUMP JUMPDEST PUSH1 0xA SLOAD JUMPDEST SWAP1 POP PUSH0 PUSH2 0xDAF PUSH2 0x3E8 PUSH2 0xDA9 DUP7 DUP6 PUSH2 0xEA5 JUMP JUMPDEST SWAP1 PUSH2 0xEB0 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xDBC DUP6 DUP4 PUSH2 0xEBB JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xDDD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 LT ISZERO PUSH2 0xE26 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E73756666696369656E742042616C616E6365 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH2 0xE3E SWAP1 DUP9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH2 0xE48 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xE71 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xE9A JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x559 JUMP JUMPDEST PUSH2 0xAA1 DUP4 DUP4 DUP4 PUSH2 0xEC6 JUMP JUMPDEST PUSH0 PUSH2 0x7A9 DUP3 DUP5 PUSH2 0x12C1 JUMP JUMPDEST PUSH0 PUSH2 0x7A9 DUP3 DUP5 PUSH2 0x12D8 JUMP JUMPDEST PUSH0 PUSH2 0x7A9 DUP3 DUP5 PUSH2 0x12F7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xEF0 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xEE5 SWAP2 SWAP1 PUSH2 0x130A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xF60 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xF42 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xF7C JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0xF9A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xFDF SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD MCOPY PUSH0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0x7A9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xFEC JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1042 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1058 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1061 DUP4 PUSH2 0x102C JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1081 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x108A DUP5 PUSH2 0x102C JUMP JUMPDEST SWAP3 POP PUSH2 0x1098 PUSH1 0x20 DUP6 ADD PUSH2 0x102C JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10BA JUMPI PUSH0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10D9 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10F0 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x7A9 DUP3 PUSH2 0x102C JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x110A JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1113 DUP4 PUSH2 0x102C JUMP JUMPDEST SWAP2 POP PUSH2 0x1121 PUSH1 0x20 DUP5 ADD PUSH2 0x102C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x113E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x115C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x6F6E6C79206665652072656365697665722063616E207472616E736665722066 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x756E6473 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11B6 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11CD JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x7A9 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0xC0 DUP2 MSTORE PUSH1 0x17 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x546865207472616E7366657220616D6F756E74206F6620000000000000000000 PUSH1 0xE0 DUP3 ADD MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x100 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x15 PUSH2 0x100 DUP3 ADD MSTORE PUSH21 0x1032BC31B2B2B239903A34329030B63637BBB2B21 PUSH1 0x5D SHL PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x140 PUSH1 0x60 DUP3 ADD MSTORE PUSH0 PUSH2 0x1259 PUSH2 0x140 DUP4 ADD DUP6 PUSH2 0xFEC JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x26 DUP2 MSTORE PUSH32 0x206C696D69742E20546865206D6178696D756D20616C6C6F77656420616D6F75 PUSH1 0x20 DUP3 ADD MSTORE PUSH6 0x373A1034B99 PUSH1 0xD5 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x516 JUMPI PUSH2 0x516 PUSH2 0x12AD JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x12F2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x516 JUMPI PUSH2 0x516 PUSH2 0x12AD JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x516 JUMPI PUSH2 0x516 PUSH2 0x12AD JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SGT BLOBHASH SAR 0xB2 DUP3 PUSH17 0x216AB726E747E928E000B705FA4443E540 CALLDATALOAD COINBASE RETURN PUSH3 0x9448DC SWAP11 PUSH10 0x64736F6C634300081A00 CALLER ",
            "sourceMap": "27822:34:0:-:0;27747:4821;27822:34;;27747:4821;27822:34;;;-1:-1:-1;;;27822:34:0;;;;;;;;:::i;:::-;-1:-1:-1;27862:31:0;;;;;;;;;;;;-1:-1:-1;;;27862:31:0;;;;;;;;;;:::i;:::-;;28177:9;28137:49;;28226:311;;;;;;;;;-1:-1:-1;12351:10:0;28246:5;18499:113;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28253:7;18499:113;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18573:5;18565;:13;;;;;;:::i;:::-;-1:-1:-1;18588:7:0;:17;18598:7;18588;:17;:::i;:::-;-1:-1:-1;;;;;;;;13190:26:0;;13186:95;;13239:31;;-1:-1:-1;;;13239:31:0;;13267:1;13239:31;;;2801:51:1;2774:18;;13239:31:0;;;;;;;;13186:95;13290:32;13309:12;13290:18;:32::i;:::-;-1:-1:-1;28319:14:0::2;19678:2:::0;28319::::2;:14;:::i;:::-;28309:24;::::0;:7:::2;:24;:::i;:::-;28294:12;:39:::0;28344:33:::2;12351:10:::0;28364:12:::2;::::0;28344:5:::2;:33::i;:::-;28397:1;28388:6;:10:::0;28418:1:::2;28408:7;:11:::0;;;28441:1:::2;28430:8;:12:::0;28452:9:::2;:13:::0;;;;28475::::2;:18:::0;28504:11:::2;:26:::0;;-1:-1:-1;;;;;;28504:26:0::2;12351:10:::0;28504:26:::2;::::0;;27747:4821;;14829:187;14921:6;;;-1:-1:-1;;;;;14937:17:0;;;-1:-1:-1;;;;;;14937:17:0;;;;;;;14969:40;;14921:6;;;14937:17;14921:6;;14969:40;;14902:16;;14969:40;14892:124;14829:187;:::o;24324:208::-;-1:-1:-1;;;;;24394:21:0;;24390:91;;24438:32;;-1:-1:-1;;;24438:32:0;;24467:1;24438:32;;;2801:51:1;2774:18;;24438:32:0;2655:203:1;24390:91:0;24490:35;24506:1;24510:7;24519:5;24490:7;:35::i;:::-;24324:208;;:::o;22874:1107::-;-1:-1:-1;;;;;22963:18:0;;22959:540;;23115:5;23099:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;22959:540:0;;-1:-1:-1;22959:540:0;;-1:-1:-1;;;;;23173:15:0;;23151:19;23173:15;;;;;;;;;;;23206:19;;;23202:115;;;23252:50;;-1:-1:-1;;;23252:50:0;;-1:-1:-1;;;;;4950:32:1;;23252:50:0;;;4932:51:1;4999:18;;;4992:34;;;5042:18;;;5035:34;;;4905:18;;23252:50:0;4730:345:1;23202:115:0;-1:-1:-1;;;;;23437:15:0;;:9;:15;;;;;;;;;;23455:19;;;;23437:37;;22959:540;-1:-1:-1;;;;;23513:16:0;;23509:425;;23676:12;:21;;;;;;;23509:425;;;-1:-1:-1;;;;;23887:13:0;;:9;:13;;;;;;;;;;:22;;;;;;23509:425;23964:2;-1:-1:-1;;;;;23949:25:0;23958:4;-1:-1:-1;;;;;23949:25:0;;23968:5;23949:25;;;;5226::1;;5214:2;5199:18;;5080:177;23949:25:0;;;;;;;;22874:1107;;;:::o;14:127:1:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:518::-;759:2;754:3;751:11;748:421;;;795:5;792:1;785:16;839:4;836:1;826:18;909:2;897:10;893:19;890:1;886:27;880:4;876:38;945:4;933:10;930:20;927:47;;;-1:-1:-1;968:4:1;927:47;1023:2;1018:3;1014:12;1011:1;1007:20;1001:4;997:31;987:41;;1078:81;1096:2;1089:5;1086:13;1078:81;;;1155:1;1141:16;;1122:1;1111:13;1078:81;;;1082:3;;748:421;657:518;;;:::o;1351:1299::-;1471:10;;-1:-1:-1;;;;;1493:30:1;;1490:56;;;1526:18;;:::i;:::-;1555:97;1645:6;1605:38;1637:4;1631:11;1605:38;:::i;:::-;1599:4;1555:97;:::i;:::-;1701:4;1732:2;1721:14;;1749:1;1744:649;;;;2437:1;2454:6;2451:89;;;-1:-1:-1;2506:19:1;;;2500:26;2451:89;-1:-1:-1;;1308:1:1;1304:11;;;1300:24;1296:29;1286:40;1332:1;1328:11;;;1283:57;2553:81;;1714:930;;1744:649;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1780:20:1;;;1898:222;1912:7;1909:1;1906:14;1898:222;;;1994:19;;;1988:26;1973:42;;2101:4;2086:20;;;;2054:1;2042:14;;;;1928:12;1898:222;;;1902:3;2148:6;2139:7;2136:19;2133:201;;;2209:19;;;2203:26;-1:-1:-1;;2292:1:1;2288:14;;;2304:3;2284:24;2280:37;2276:42;2261:58;2246:74;;2133:201;-1:-1:-1;;;;2380:1:1;2364:14;;;2360:22;2347:36;;-1:-1:-1;1351:1299:1:o;2863:127::-;2924:10;2919:3;2915:20;2912:1;2905:31;2955:4;2952:1;2945:15;2979:4;2976:1;2969:15;2995:375;3083:1;3101:5;3115:249;3136:1;3126:8;3123:15;3115:249;;;3186:4;3181:3;3177:14;3171:4;3168:24;3165:50;;;3195:18;;:::i;:::-;3245:1;3235:8;3231:16;3228:49;;;3259:16;;;;3228:49;3342:1;3338:16;;;;;3298:15;;3115:249;;;2995:375;;;;;;:::o;3375:902::-;3424:5;3454:8;3444:80;;-1:-1:-1;3495:1:1;3509:5;;3444:80;3543:4;3533:76;;-1:-1:-1;3580:1:1;3594:5;;3533:76;3625:4;3643:1;3638:59;;;;3711:1;3706:174;;;;3618:262;;3638:59;3668:1;3659:10;;3682:5;;;3706:174;3743:3;3733:8;3730:17;3727:43;;;3750:18;;:::i;:::-;-1:-1:-1;;3806:1:1;3792:16;;3865:5;;3618:262;;3964:2;3954:8;3951:16;3945:3;3939:4;3936:13;3932:36;3926:2;3916:8;3913:16;3908:2;3902:4;3899:12;3895:35;3892:77;3889:203;;;-1:-1:-1;4001:19:1;;;4077:5;;3889:203;4124:42;-1:-1:-1;;4149:8:1;4143:4;4124:42;:::i;:::-;4202:6;4198:1;4194:6;4190:19;4181:7;4178:32;4175:58;;;4213:18;;:::i;:::-;4251:20;;-1:-1:-1;3375:902:1;;;;;:::o;4282:140::-;4340:5;4369:47;4410:4;4400:8;4396:19;4390:4;4369:47;:::i;:::-;4360:56;4282:140;-1:-1:-1;;;4282:140:1:o;4427:168::-;4500:9;;;4531;;4548:15;;;4542:22;;4528:37;4518:71;;4569:18;;:::i;4600:125::-;4665:9;;;4686:10;;;4683:36;;;4699:18;;:::i;5080:177::-;27747:4821:0;;;;;;"
          },
          "deployedBytecode": {
            "functionDebugData": {
              "@FEE_DENOMINATOR_1230": {
                "entryPoint": null,
                "id": 1230,
                "parameterSlots": 0,
                "returnSlots": 0
              },
              "@_1389": {
                "entryPoint": null,
                "id": 1389,
                "parameterSlots": 0,
                "returnSlots": 0
              },
              "@_approve_1103": {
                "entryPoint": 2708,
                "id": 1103,
                "parameterSlots": 3,
                "returnSlots": 0
              },
              "@_approve_1163": {
                "entryPoint": 3237,
                "id": 1163,
                "parameterSlots": 4,
                "returnSlots": 0
              },
              "@_checkOwner_549": {
                "entryPoint": 3111,
                "id": 549,
                "parameterSlots": 0,
                "returnSlots": 0
              },
              "@_msgSender_451": {
                "entryPoint": null,
                "id": 451,
                "parameterSlots": 0,
                "returnSlots": 1
              },
              "@_transferFrom_1548": {
                "entryPoint": 2726,
                "id": 1548,
                "parameterSlots": 3,
                "returnSlots": 1
              },
              "@_transferOwnership_611": {
                "entryPoint": 3156,
                "id": 611,
                "parameterSlots": 1,
                "returnSlots": 0
              },
              "@_transfer_942": {
                "entryPoint": 3656,
                "id": 942,
                "parameterSlots": 3,
                "returnSlots": 0
              },
              "@_update_1019": {
                "entryPoint": 3782,
                "id": 1019,
                "parameterSlots": 3,
                "returnSlots": 0
              },
              "@allowance_839": {
                "entryPoint": null,
                "id": 839,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "@approve_863": {
                "entryPoint": 1283,
                "id": 863,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "@balanceOf_798": {
                "entryPoint": null,
                "id": 798,
                "parameterSlots": 1,
                "returnSlots": 1
              },
              "@buyLimit_1236": {
                "entryPoint": null,
                "id": 1236,
                "parameterSlots": 0,
                "returnSlots": 0
              },
              "@buyTax_1232": {
                "entryPoint": null,
                "id": 1232,
                "parameterSlots": 0,
                "returnSlots": 0
              },
              "@clearStuckToken_1673": {
                "entryPoint": 1680,
                "id": 1673,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "@decimals_776": {
                "entryPoint": null,
                "id": 776,
                "parameterSlots": 0,
                "returnSlots": 1
              },
              "@div_219": {
                "entryPoint": 3760,
                "id": 219,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "@feeReceiver_1245": {
                "entryPoint": null,
                "id": 1245,
                "parameterSlots": 0,
                "returnSlots": 0
              },
              "@isContract_1314": {
                "entryPoint": null,
                "id": 1314,
                "parameterSlots": 1,
                "returnSlots": 1
              },
              "@manualSend_1630": {
                "entryPoint": 2603,
                "id": 1630,
                "parameterSlots": 0,
                "returnSlots": 0
              },
              "@mul_204": {
                "entryPoint": 3749,
                "id": 204,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "@name_758": {
                "entryPoint": 1139,
                "id": 758,
                "parameterSlots": 0,
                "returnSlots": 1
              },
              "@nextTransactionTimeGap_1243": {
                "entryPoint": null,
                "id": 1243,
                "parameterSlots": 0,
                "returnSlots": 0
              },
              "@owner_532": {
                "entryPoint": null,
                "id": 532,
                "parameterSlots": 0,
                "returnSlots": 1
              },
              "@renounceOwnership_563": {
                "entryPoint": 1661,
                "id": 563,
                "parameterSlots": 0,
                "returnSlots": 0
              },
              "@sellLimit_1238": {
                "entryPoint": null,
                "id": 1238,
                "parameterSlots": 0,
                "returnSlots": 0
              },
              "@sellTax_1234": {
                "entryPoint": null,
                "id": 1234,
                "parameterSlots": 0,
                "returnSlots": 0
              },
              "@setFeeReceiver_1709": {
                "entryPoint": 2393,
                "id": 1709,
                "parameterSlots": 1,
                "returnSlots": 0
              },
              "@setFee_1691": {
                "entryPoint": 1629,
                "id": 1691,
                "parameterSlots": 2,
                "returnSlots": 0
              },
              "@sub_189": {
                "entryPoint": 3771,
                "id": 189,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "@symbol_767": {
                "entryPoint": 1968,
                "id": 767,
                "parameterSlots": 0,
                "returnSlots": 1
              },
              "@takeFee_1606": {
                "entryPoint": 3448,
                "id": 1606,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "@totalSupply_785": {
                "entryPoint": null,
                "id": 785,
                "parameterSlots": 0,
                "returnSlots": 1
              },
              "@transferFrom_1503": {
                "entryPoint": 1308,
                "id": 1503,
                "parameterSlots": 3,
                "returnSlots": 1
              },
              "@transferLimit_1240": {
                "entryPoint": null,
                "id": 1240,
                "parameterSlots": 0,
                "returnSlots": 0
              },
              "@transferOwnership_591": {
                "entryPoint": 2542,
                "id": 591,
                "parameterSlots": 1,
                "returnSlots": 0
              },
              "@transfer_1442": {
                "entryPoint": 1983,
                "id": 1442,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "@updateTransactionTimeLimit_1401": {
                "entryPoint": 1648,
                "id": 1401,
                "parameterSlots": 1,
                "returnSlots": 0
              },
              "abi_decode_address": {
                "entryPoint": 4140,
                "id": null,
                "parameterSlots": 1,
                "returnSlots": 1
              },
              "abi_decode_tuple_t_address": {
                "entryPoint": 4320,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "abi_decode_tuple_t_addresst_address": {
                "entryPoint": 4345,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 2
              },
              "abi_decode_tuple_t_addresst_addresst_uint256": {
                "entryPoint": 4207,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 3
              },
              "abi_decode_tuple_t_addresst_uint256": {
                "entryPoint": 4167,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 2
              },
              "abi_decode_tuple_t_bool_fromMemory": {
                "entryPoint": 4541,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "abi_decode_tuple_t_uint256": {
                "entryPoint": 4297,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "abi_decode_tuple_t_uint256_fromMemory": {
                "entryPoint": 4518,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "abi_decode_tuple_t_uint256t_uint256": {
                "entryPoint": 4265,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 2
              },
              "abi_encode_string": {
                "entryPoint": 4076,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
                "entryPoint": null,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
                "entryPoint": null,
                "id": null,
                "parameterSlots": 3,
                "returnSlots": 1
              },
              "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
                "entryPoint": null,
                "id": null,
                "parameterSlots": 4,
                "returnSlots": 1
              },
              "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
                "entryPoint": null,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
                "entryPoint": 4122,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "abi_encode_tuple_t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1__to_t_string_memory_ptr__fromStack_reversed": {
                "entryPoint": null,
                "id": null,
                "parameterSlots": 1,
                "returnSlots": 1
              },
              "abi_encode_tuple_t_stringliteral_3f0ff8cd200538bae802ddf9006bb5040e9e9ddc88045ad2938dcac06977cbf6__to_t_string_memory_ptr__fromStack_reversed": {
                "entryPoint": null,
                "id": null,
                "parameterSlots": 1,
                "returnSlots": 1
              },
              "abi_encode_tuple_t_stringliteral_691168f418fc5a4f61166421198b5a4bea266021eef8bf76cd53f1653d7b7ec0__to_t_string_memory_ptr__fromStack_reversed": {
                "entryPoint": null,
                "id": null,
                "parameterSlots": 1,
                "returnSlots": 1
              },
              "abi_encode_tuple_t_stringliteral_7749c8f2046666fbb2de7a13189c41230979aa20281dd481ea4860435342db25__to_t_string_memory_ptr__fromStack_reversed": {
                "entryPoint": 4450,
                "id": null,
                "parameterSlots": 1,
                "returnSlots": 1
              },
              "abi_encode_tuple_t_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d__to_t_string_memory_ptr__fromStack_reversed": {
                "entryPoint": null,
                "id": null,
                "parameterSlots": 1,
                "returnSlots": 1
              },
              "abi_encode_tuple_t_stringliteral_a895108aba3cb79d17fe8ee77bdc94f8dbbd386b03b92c2e9f4e1163288ac95c_t_uint256_t_stringliteral_80d43b57920045470ddcc52a755f4f3a5e57ca0223f752445585e4bd611d2f0d_t_string_memory_ptr_t_stringliteral_ebda7c53817fafcae7f70eb5333c8a4df88a01e6c77700aee69a9e8924646c09_t_uint256__to_t_string_memory_ptr_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_uint256__fromStack_reversed": {
                "entryPoint": 4572,
                "id": null,
                "parameterSlots": 4,
                "returnSlots": 1
              },
              "abi_encode_tuple_t_stringliteral_b80e76e4c9dd95c0a6a7ab97569124291f4757bb9e5ff42d1e95905b42144c82__to_t_string_memory_ptr__fromStack_reversed": {
                "entryPoint": null,
                "id": null,
                "parameterSlots": 1,
                "returnSlots": 1
              },
              "abi_encode_tuple_t_stringliteral_fbcf5812a823c330a73f9d882fcbde9248e001cd709ec7c8842b6f10fb1c1a34__to_t_string_memory_ptr__fromStack_reversed": {
                "entryPoint": null,
                "id": null,
                "parameterSlots": 1,
                "returnSlots": 1
              },
              "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
                "entryPoint": null,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
                "entryPoint": null,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "checked_add_t_uint256": {
                "entryPoint": 4874,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "checked_div_t_uint256": {
                "entryPoint": 4824,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "checked_mul_t_uint256": {
                "entryPoint": 4801,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "checked_sub_t_uint256": {
                "entryPoint": 4855,
                "id": null,
                "parameterSlots": 2,
                "returnSlots": 1
              },
              "extract_byte_array_length": {
                "entryPoint": 4394,
                "id": null,
                "parameterSlots": 1,
                "returnSlots": 1
              },
              "panic_error_0x11": {
                "entryPoint": 4781,
                "id": null,
                "parameterSlots": 0,
                "returnSlots": 0
              }
            },
            "generatedSources": [
              {
                "ast": {
                  "nativeSrc": "0:9217:1",
                  "nodeType": "YulBlock",
                  "src": "0:9217:1",
                  "statements": [
                    {
                      "nativeSrc": "6:3:1",
                      "nodeType": "YulBlock",
                      "src": "6:3:1",
                      "statements": []
                    },
                    {
                      "body": {
                        "nativeSrc": "64:239:1",
                        "nodeType": "YulBlock",
                        "src": "64:239:1",
                        "statements": [
                          {
                            "nativeSrc": "74:26:1",
                            "nodeType": "YulVariableDeclaration",
                            "src": "74:26:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "value",
                                  "nativeSrc": "94:5:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "94:5:1"
                                }
                              ],
                              "functionName": {
                                "name": "mload",
                                "nativeSrc": "88:5:1",
                                "nodeType": "YulIdentifier",
                                "src": "88:5:1"
                              },
                              "nativeSrc": "88:12:1",
                              "nodeType": "YulFunctionCall",
                              "src": "88:12:1"
                            },
                            "variables": [
                              {
                                "name": "length",
                                "nativeSrc": "78:6:1",
                                "nodeType": "YulTypedName",
                                "src": "78:6:1",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nativeSrc": "116:3:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "116:3:1"
                                },
                                {
                                  "name": "length",
                                  "nativeSrc": "121:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "121:6:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "109:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "109:6:1"
                              },
                              "nativeSrc": "109:19:1",
                              "nodeType": "YulFunctionCall",
                              "src": "109:19:1"
                            },
                            "nativeSrc": "109:19:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "109:19:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nativeSrc": "147:3:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "147:3:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "152:4:1",
                                      "nodeType": "YulLiteral",
                                      "src": "152:4:1",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "143:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "143:3:1"
                                  },
                                  "nativeSrc": "143:14:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "143:14:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nativeSrc": "163:5:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "163:5:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "170:4:1",
                                      "nodeType": "YulLiteral",
                                      "src": "170:4:1",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "159:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "159:3:1"
                                  },
                                  "nativeSrc": "159:16:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "159:16:1"
                                },
                                {
                                  "name": "length",
                                  "nativeSrc": "177:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "177:6:1"
                                }
                              ],
                              "functionName": {
                                "name": "mcopy",
                                "nativeSrc": "137:5:1",
                                "nodeType": "YulIdentifier",
                                "src": "137:5:1"
                              },
                              "nativeSrc": "137:47:1",
                              "nodeType": "YulFunctionCall",
                              "src": "137:47:1"
                            },
                            "nativeSrc": "137:47:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "137:47:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nativeSrc": "208:3:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "208:3:1"
                                        },
                                        {
                                          "name": "length",
                                          "nativeSrc": "213:6:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "213:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "204:3:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "204:3:1"
                                      },
                                      "nativeSrc": "204:16:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "204:16:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "222:4:1",
                                      "nodeType": "YulLiteral",
                                      "src": "222:4:1",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "200:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "200:3:1"
                                  },
                                  "nativeSrc": "200:27:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "200:27:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "229:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "229:1:1",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "193:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "193:6:1"
                              },
                              "nativeSrc": "193:38:1",
                              "nodeType": "YulFunctionCall",
                              "src": "193:38:1"
                            },
                            "nativeSrc": "193:38:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "193:38:1"
                          },
                          {
                            "nativeSrc": "240:57:1",
                            "nodeType": "YulAssignment",
                            "src": "240:57:1",
                            "value": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nativeSrc": "255:3:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "255:3:1"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "length",
                                              "nativeSrc": "268:6:1",
                                              "nodeType": "YulIdentifier",
                                              "src": "268:6:1"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "276:2:1",
                                              "nodeType": "YulLiteral",
                                              "src": "276:2:1",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "264:3:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "264:3:1"
                                          },
                                          "nativeSrc": "264:15:1",
                                          "nodeType": "YulFunctionCall",
                                          "src": "264:15:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "285:2:1",
                                              "nodeType": "YulLiteral",
                                              "src": "285:2:1",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nativeSrc": "281:3:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "281:3:1"
                                          },
                                          "nativeSrc": "281:7:1",
                                          "nodeType": "YulFunctionCall",
                                          "src": "281:7:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nativeSrc": "260:3:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "260:3:1"
                                      },
                                      "nativeSrc": "260:29:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "260:29:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "251:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "251:3:1"
                                  },
                                  "nativeSrc": "251:39:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "251:39:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "292:4:1",
                                  "nodeType": "YulLiteral",
                                  "src": "292:4:1",
                                  "type": "",
                                  "value": "0x20"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "247:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "247:3:1"
                              },
                              "nativeSrc": "247:50:1",
                              "nodeType": "YulFunctionCall",
                              "src": "247:50:1"
                            },
                            "variableNames": [
                              {
                                "name": "end",
                                "nativeSrc": "240:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "240:3:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "abi_encode_string",
                      "nativeSrc": "14:289:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "value",
                          "nativeSrc": "41:5:1",
                          "nodeType": "YulTypedName",
                          "src": "41:5:1",
                          "type": ""
                        },
                        {
                          "name": "pos",
                          "nativeSrc": "48:3:1",
                          "nodeType": "YulTypedName",
                          "src": "48:3:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "end",
                          "nativeSrc": "56:3:1",
                          "nodeType": "YulTypedName",
                          "src": "56:3:1",
                          "type": ""
                        }
                      ],
                      "src": "14:289:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "429:99:1",
                        "nodeType": "YulBlock",
                        "src": "429:99:1",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "446:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "446:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "457:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "457:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "439:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "439:6:1"
                              },
                              "nativeSrc": "439:21:1",
                              "nodeType": "YulFunctionCall",
                              "src": "439:21:1"
                            },
                            "nativeSrc": "439:21:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "439:21:1"
                          },
                          {
                            "nativeSrc": "469:53:1",
                            "nodeType": "YulAssignment",
                            "src": "469:53:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "495:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "495:6:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "507:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "507:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "518:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "518:2:1",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "503:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "503:3:1"
                                  },
                                  "nativeSrc": "503:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "503:18:1"
                                }
                              ],
                              "functionName": {
                                "name": "abi_encode_string",
                                "nativeSrc": "477:17:1",
                                "nodeType": "YulIdentifier",
                                "src": "477:17:1"
                              },
                              "nativeSrc": "477:45:1",
                              "nodeType": "YulFunctionCall",
                              "src": "477:45:1"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nativeSrc": "469:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "469:4:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                      "nativeSrc": "308:220:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "398:9:1",
                          "nodeType": "YulTypedName",
                          "src": "398:9:1",
                          "type": ""
                        },
                        {
                          "name": "value0",
                          "nativeSrc": "409:6:1",
                          "nodeType": "YulTypedName",
                          "src": "409:6:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "tail",
                          "nativeSrc": "420:4:1",
                          "nodeType": "YulTypedName",
                          "src": "420:4:1",
                          "type": ""
                        }
                      ],
                      "src": "308:220:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "582:124:1",
                        "nodeType": "YulBlock",
                        "src": "582:124:1",
                        "statements": [
                          {
                            "nativeSrc": "592:29:1",
                            "nodeType": "YulAssignment",
                            "src": "592:29:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "614:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "614:6:1"
                                }
                              ],
                              "functionName": {
                                "name": "calldataload",
                                "nativeSrc": "601:12:1",
                                "nodeType": "YulIdentifier",
                                "src": "601:12:1"
                              },
                              "nativeSrc": "601:20:1",
                              "nodeType": "YulFunctionCall",
                              "src": "601:20:1"
                            },
                            "variableNames": [
                              {
                                "name": "value",
                                "nativeSrc": "592:5:1",
                                "nodeType": "YulIdentifier",
                                "src": "592:5:1"
                              }
                            ]
                          },
                          {
                            "body": {
                              "nativeSrc": "684:16:1",
                              "nodeType": "YulBlock",
                              "src": "684:16:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "693:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "693:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "696:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "696:1:1",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "revert",
                                      "nativeSrc": "686:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "686:6:1"
                                    },
                                    "nativeSrc": "686:12:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "686:12:1"
                                  },
                                  "nativeSrc": "686:12:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "686:12:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nativeSrc": "643:5:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "643:5:1"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "value",
                                          "nativeSrc": "654:5:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "654:5:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "669:3:1",
                                                  "nodeType": "YulLiteral",
                                                  "src": "669:3:1",
                                                  "type": "",
                                                  "value": "160"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "674:1:1",
                                                  "nodeType": "YulLiteral",
                                                  "src": "674:1:1",
                                                  "type": "",
                                                  "value": "1"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nativeSrc": "665:3:1",
                                                "nodeType": "YulIdentifier",
                                                "src": "665:3:1"
                                              },
                                              "nativeSrc": "665:11:1",
                                              "nodeType": "YulFunctionCall",
                                              "src": "665:11:1"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "678:1:1",
                                              "nodeType": "YulLiteral",
                                              "src": "678:1:1",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nativeSrc": "661:3:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "661:3:1"
                                          },
                                          "nativeSrc": "661:19:1",
                                          "nodeType": "YulFunctionCall",
                                          "src": "661:19:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nativeSrc": "650:3:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "650:3:1"
                                      },
                                      "nativeSrc": "650:31:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "650:31:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "eq",
                                    "nativeSrc": "640:2:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "640:2:1"
                                  },
                                  "nativeSrc": "640:42:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "640:42:1"
                                }
                              ],
                              "functionName": {
                                "name": "iszero",
                                "nativeSrc": "633:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "633:6:1"
                              },
                              "nativeSrc": "633:50:1",
                              "nodeType": "YulFunctionCall",
                              "src": "633:50:1"
                            },
                            "nativeSrc": "630:70:1",
                            "nodeType": "YulIf",
                            "src": "630:70:1"
                          }
                        ]
                      },
                      "name": "abi_decode_address",
                      "nativeSrc": "533:173:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "offset",
                          "nativeSrc": "561:6:1",
                          "nodeType": "YulTypedName",
                          "src": "561:6:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "value",
                          "nativeSrc": "572:5:1",
                          "nodeType": "YulTypedName",
                          "src": "572:5:1",
                          "type": ""
                        }
                      ],
                      "src": "533:173:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "798:213:1",
                        "nodeType": "YulBlock",
                        "src": "798:213:1",
                        "statements": [
                          {
                            "body": {
                              "nativeSrc": "844:16:1",
                              "nodeType": "YulBlock",
                              "src": "844:16:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "853:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "853:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "856:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "856:1:1",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "revert",
                                      "nativeSrc": "846:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "846:6:1"
                                    },
                                    "nativeSrc": "846:12:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "846:12:1"
                                  },
                                  "nativeSrc": "846:12:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "846:12:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dataEnd",
                                      "nativeSrc": "819:7:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "819:7:1"
                                    },
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "828:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "828:9:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sub",
                                    "nativeSrc": "815:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "815:3:1"
                                  },
                                  "nativeSrc": "815:23:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "815:23:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "840:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "840:2:1",
                                  "type": "",
                                  "value": "64"
                                }
                              ],
                              "functionName": {
                                "name": "slt",
                                "nativeSrc": "811:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "811:3:1"
                              },
                              "nativeSrc": "811:32:1",
                              "nodeType": "YulFunctionCall",
                              "src": "811:32:1"
                            },
                            "nativeSrc": "808:52:1",
                            "nodeType": "YulIf",
                            "src": "808:52:1"
                          },
                          {
                            "nativeSrc": "869:39:1",
                            "nodeType": "YulAssignment",
                            "src": "869:39:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "898:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "898:9:1"
                                }
                              ],
                              "functionName": {
                                "name": "abi_decode_address",
                                "nativeSrc": "879:18:1",
                                "nodeType": "YulIdentifier",
                                "src": "879:18:1"
                              },
                              "nativeSrc": "879:29:1",
                              "nodeType": "YulFunctionCall",
                              "src": "879:29:1"
                            },
                            "variableNames": [
                              {
                                "name": "value0",
                                "nativeSrc": "869:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "869:6:1"
                              }
                            ]
                          },
                          {
                            "nativeSrc": "917:14:1",
                            "nodeType": "YulVariableDeclaration",
                            "src": "917:14:1",
                            "value": {
                              "kind": "number",
                              "nativeSrc": "930:1:1",
                              "nodeType": "YulLiteral",
                              "src": "930:1:1",
                              "type": "",
                              "value": "0"
                            },
                            "variables": [
                              {
                                "name": "value",
                                "nativeSrc": "921:5:1",
                                "nodeType": "YulTypedName",
                                "src": "921:5:1",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nativeSrc": "940:41:1",
                            "nodeType": "YulAssignment",
                            "src": "940:41:1",
                            "value": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "966:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "966:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "977:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "977:2:1",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "962:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "962:3:1"
                                  },
                                  "nativeSrc": "962:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "962:18:1"
                                }
                              ],
                              "functionName": {
                                "name": "calldataload",
                                "nativeSrc": "949:12:1",
                                "nodeType": "YulIdentifier",
                                "src": "949:12:1"
                              },
                              "nativeSrc": "949:32:1",
                              "nodeType": "YulFunctionCall",
                              "src": "949:32:1"
                            },
                            "variableNames": [
                              {
                                "name": "value",
                                "nativeSrc": "940:5:1",
                                "nodeType": "YulIdentifier",
                                "src": "940:5:1"
                              }
                            ]
                          },
                          {
                            "nativeSrc": "990:15:1",
                            "nodeType": "YulAssignment",
                            "src": "990:15:1",
                            "value": {
                              "name": "value",
                              "nativeSrc": "1000:5:1",
                              "nodeType": "YulIdentifier",
                              "src": "1000:5:1"
                            },
                            "variableNames": [
                              {
                                "name": "value1",
                                "nativeSrc": "990:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "990:6:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "abi_decode_tuple_t_addresst_uint256",
                      "nativeSrc": "711:300:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "756:9:1",
                          "nodeType": "YulTypedName",
                          "src": "756:9:1",
                          "type": ""
                        },
                        {
                          "name": "dataEnd",
                          "nativeSrc": "767:7:1",
                          "nodeType": "YulTypedName",
                          "src": "767:7:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "value0",
                          "nativeSrc": "779:6:1",
                          "nodeType": "YulTypedName",
                          "src": "779:6:1",
                          "type": ""
                        },
                        {
                          "name": "value1",
                          "nativeSrc": "787:6:1",
                          "nodeType": "YulTypedName",
                          "src": "787:6:1",
                          "type": ""
                        }
                      ],
                      "src": "711:300:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "1111:92:1",
                        "nodeType": "YulBlock",
                        "src": "1111:92:1",
                        "statements": [
                          {
                            "nativeSrc": "1121:26:1",
                            "nodeType": "YulAssignment",
                            "src": "1121:26:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "1133:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1133:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "1144:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "1144:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "1129:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "1129:3:1"
                              },
                              "nativeSrc": "1129:18:1",
                              "nodeType": "YulFunctionCall",
                              "src": "1129:18:1"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nativeSrc": "1121:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "1121:4:1"
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "1163:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1163:9:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nativeSrc": "1188:6:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "1188:6:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "iszero",
                                        "nativeSrc": "1181:6:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "1181:6:1"
                                      },
                                      "nativeSrc": "1181:14:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "1181:14:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "iszero",
                                    "nativeSrc": "1174:6:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1174:6:1"
                                  },
                                  "nativeSrc": "1174:22:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1174:22:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "1156:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "1156:6:1"
                              },
                              "nativeSrc": "1156:41:1",
                              "nodeType": "YulFunctionCall",
                              "src": "1156:41:1"
                            },
                            "nativeSrc": "1156:41:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "1156:41:1"
                          }
                        ]
                      },
                      "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                      "nativeSrc": "1016:187:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "1080:9:1",
                          "nodeType": "YulTypedName",
                          "src": "1080:9:1",
                          "type": ""
                        },
                        {
                          "name": "value0",
                          "nativeSrc": "1091:6:1",
                          "nodeType": "YulTypedName",
                          "src": "1091:6:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "tail",
                          "nativeSrc": "1102:4:1",
                          "nodeType": "YulTypedName",
                          "src": "1102:4:1",
                          "type": ""
                        }
                      ],
                      "src": "1016:187:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "1309:76:1",
                        "nodeType": "YulBlock",
                        "src": "1309:76:1",
                        "statements": [
                          {
                            "nativeSrc": "1319:26:1",
                            "nodeType": "YulAssignment",
                            "src": "1319:26:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "1331:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1331:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "1342:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "1342:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "1327:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "1327:3:1"
                              },
                              "nativeSrc": "1327:18:1",
                              "nodeType": "YulFunctionCall",
                              "src": "1327:18:1"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nativeSrc": "1319:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "1319:4:1"
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "1361:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1361:9:1"
                                },
                                {
                                  "name": "value0",
                                  "nativeSrc": "1372:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1372:6:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "1354:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "1354:6:1"
                              },
                              "nativeSrc": "1354:25:1",
                              "nodeType": "YulFunctionCall",
                              "src": "1354:25:1"
                            },
                            "nativeSrc": "1354:25:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "1354:25:1"
                          }
                        ]
                      },
                      "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                      "nativeSrc": "1208:177:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "1278:9:1",
                          "nodeType": "YulTypedName",
                          "src": "1278:9:1",
                          "type": ""
                        },
                        {
                          "name": "value0",
                          "nativeSrc": "1289:6:1",
                          "nodeType": "YulTypedName",
                          "src": "1289:6:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "tail",
                          "nativeSrc": "1300:4:1",
                          "nodeType": "YulTypedName",
                          "src": "1300:4:1",
                          "type": ""
                        }
                      ],
                      "src": "1208:177:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "1494:270:1",
                        "nodeType": "YulBlock",
                        "src": "1494:270:1",
                        "statements": [
                          {
                            "body": {
                              "nativeSrc": "1540:16:1",
                              "nodeType": "YulBlock",
                              "src": "1540:16:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "1549:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "1549:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "1552:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "1552:1:1",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "revert",
                                      "nativeSrc": "1542:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1542:6:1"
                                    },
                                    "nativeSrc": "1542:12:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1542:12:1"
                                  },
                                  "nativeSrc": "1542:12:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "1542:12:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dataEnd",
                                      "nativeSrc": "1515:7:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1515:7:1"
                                    },
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "1524:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1524:9:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sub",
                                    "nativeSrc": "1511:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1511:3:1"
                                  },
                                  "nativeSrc": "1511:23:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1511:23:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "1536:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "1536:2:1",
                                  "type": "",
                                  "value": "96"
                                }
                              ],
                              "functionName": {
                                "name": "slt",
                                "nativeSrc": "1507:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "1507:3:1"
                              },
                              "nativeSrc": "1507:32:1",
                              "nodeType": "YulFunctionCall",
                              "src": "1507:32:1"
                            },
                            "nativeSrc": "1504:52:1",
                            "nodeType": "YulIf",
                            "src": "1504:52:1"
                          },
                          {
                            "nativeSrc": "1565:39:1",
                            "nodeType": "YulAssignment",
                            "src": "1565:39:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "1594:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1594:9:1"
                                }
                              ],
                              "functionName": {
                                "name": "abi_decode_address",
                                "nativeSrc": "1575:18:1",
                                "nodeType": "YulIdentifier",
                                "src": "1575:18:1"
                              },
                              "nativeSrc": "1575:29:1",
                              "nodeType": "YulFunctionCall",
                              "src": "1575:29:1"
                            },
                            "variableNames": [
                              {
                                "name": "value0",
                                "nativeSrc": "1565:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "1565:6:1"
                              }
                            ]
                          },
                          {
                            "nativeSrc": "1613:48:1",
                            "nodeType": "YulAssignment",
                            "src": "1613:48:1",
                            "value": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "1646:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1646:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1657:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "1657:2:1",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "1642:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1642:3:1"
                                  },
                                  "nativeSrc": "1642:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1642:18:1"
                                }
                              ],
                              "functionName": {
                                "name": "abi_decode_address",
                                "nativeSrc": "1623:18:1",
                                "nodeType": "YulIdentifier",
                                "src": "1623:18:1"
                              },
                              "nativeSrc": "1623:38:1",
                              "nodeType": "YulFunctionCall",
                              "src": "1623:38:1"
                            },
                            "variableNames": [
                              {
                                "name": "value1",
                                "nativeSrc": "1613:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "1613:6:1"
                              }
                            ]
                          },
                          {
                            "nativeSrc": "1670:14:1",
                            "nodeType": "YulVariableDeclaration",
                            "src": "1670:14:1",
                            "value": {
                              "kind": "number",
                              "nativeSrc": "1683:1:1",
                              "nodeType": "YulLiteral",
                              "src": "1683:1:1",
                              "type": "",
                              "value": "0"
                            },
                            "variables": [
                              {
                                "name": "value",
                                "nativeSrc": "1674:5:1",
                                "nodeType": "YulTypedName",
                                "src": "1674:5:1",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nativeSrc": "1693:41:1",
                            "nodeType": "YulAssignment",
                            "src": "1693:41:1",
                            "value": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "1719:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1719:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1730:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "1730:2:1",
                                      "type": "",
                                      "value": "64"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "1715:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1715:3:1"
                                  },
                                  "nativeSrc": "1715:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1715:18:1"
                                }
                              ],
                              "functionName": {
                                "name": "calldataload",
                                "nativeSrc": "1702:12:1",
                                "nodeType": "YulIdentifier",
                                "src": "1702:12:1"
                              },
                              "nativeSrc": "1702:32:1",
                              "nodeType": "YulFunctionCall",
                              "src": "1702:32:1"
                            },
                            "variableNames": [
                              {
                                "name": "value",
                                "nativeSrc": "1693:5:1",
                                "nodeType": "YulIdentifier",
                                "src": "1693:5:1"
                              }
                            ]
                          },
                          {
                            "nativeSrc": "1743:15:1",
                            "nodeType": "YulAssignment",
                            "src": "1743:15:1",
                            "value": {
                              "name": "value",
                              "nativeSrc": "1753:5:1",
                              "nodeType": "YulIdentifier",
                              "src": "1753:5:1"
                            },
                            "variableNames": [
                              {
                                "name": "value2",
                                "nativeSrc": "1743:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "1743:6:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "abi_decode_tuple_t_addresst_addresst_uint256",
                      "nativeSrc": "1390:374:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "1444:9:1",
                          "nodeType": "YulTypedName",
                          "src": "1444:9:1",
                          "type": ""
                        },
                        {
                          "name": "dataEnd",
                          "nativeSrc": "1455:7:1",
                          "nodeType": "YulTypedName",
                          "src": "1455:7:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "value0",
                          "nativeSrc": "1467:6:1",
                          "nodeType": "YulTypedName",
                          "src": "1467:6:1",
                          "type": ""
                        },
                        {
                          "name": "value1",
                          "nativeSrc": "1475:6:1",
                          "nodeType": "YulTypedName",
                          "src": "1475:6:1",
                          "type": ""
                        },
                        {
                          "name": "value2",
                          "nativeSrc": "1483:6:1",
                          "nodeType": "YulTypedName",
                          "src": "1483:6:1",
                          "type": ""
                        }
                      ],
                      "src": "1390:374:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "1866:87:1",
                        "nodeType": "YulBlock",
                        "src": "1866:87:1",
                        "statements": [
                          {
                            "nativeSrc": "1876:26:1",
                            "nodeType": "YulAssignment",
                            "src": "1876:26:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "1888:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1888:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "1899:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "1899:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "1884:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "1884:3:1"
                              },
                              "nativeSrc": "1884:18:1",
                              "nodeType": "YulFunctionCall",
                              "src": "1884:18:1"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nativeSrc": "1876:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "1876:4:1"
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "1918:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "1918:9:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nativeSrc": "1933:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1933:6:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1941:4:1",
                                      "nodeType": "YulLiteral",
                                      "src": "1941:4:1",
                                      "type": "",
                                      "value": "0xff"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "1929:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1929:3:1"
                                  },
                                  "nativeSrc": "1929:17:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1929:17:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "1911:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "1911:6:1"
                              },
                              "nativeSrc": "1911:36:1",
                              "nodeType": "YulFunctionCall",
                              "src": "1911:36:1"
                            },
                            "nativeSrc": "1911:36:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "1911:36:1"
                          }
                        ]
                      },
                      "name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
                      "nativeSrc": "1769:184:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "1835:9:1",
                          "nodeType": "YulTypedName",
                          "src": "1835:9:1",
                          "type": ""
                        },
                        {
                          "name": "value0",
                          "nativeSrc": "1846:6:1",
                          "nodeType": "YulTypedName",
                          "src": "1846:6:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "tail",
                          "nativeSrc": "1857:4:1",
                          "nodeType": "YulTypedName",
                          "src": "1857:4:1",
                          "type": ""
                        }
                      ],
                      "src": "1769:184:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "2045:259:1",
                        "nodeType": "YulBlock",
                        "src": "2045:259:1",
                        "statements": [
                          {
                            "body": {
                              "nativeSrc": "2091:16:1",
                              "nodeType": "YulBlock",
                              "src": "2091:16:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2100:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "2100:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2103:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "2103:1:1",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "revert",
                                      "nativeSrc": "2093:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2093:6:1"
                                    },
                                    "nativeSrc": "2093:12:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2093:12:1"
                                  },
                                  "nativeSrc": "2093:12:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "2093:12:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dataEnd",
                                      "nativeSrc": "2066:7:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2066:7:1"
                                    },
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "2075:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2075:9:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sub",
                                    "nativeSrc": "2062:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2062:3:1"
                                  },
                                  "nativeSrc": "2062:23:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2062:23:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "2087:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "2087:2:1",
                                  "type": "",
                                  "value": "64"
                                }
                              ],
                              "functionName": {
                                "name": "slt",
                                "nativeSrc": "2058:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "2058:3:1"
                              },
                              "nativeSrc": "2058:32:1",
                              "nodeType": "YulFunctionCall",
                              "src": "2058:32:1"
                            },
                            "nativeSrc": "2055:52:1",
                            "nodeType": "YulIf",
                            "src": "2055:52:1"
                          },
                          {
                            "nativeSrc": "2116:14:1",
                            "nodeType": "YulVariableDeclaration",
                            "src": "2116:14:1",
                            "value": {
                              "kind": "number",
                              "nativeSrc": "2129:1:1",
                              "nodeType": "YulLiteral",
                              "src": "2129:1:1",
                              "type": "",
                              "value": "0"
                            },
                            "variables": [
                              {
                                "name": "value",
                                "nativeSrc": "2120:5:1",
                                "nodeType": "YulTypedName",
                                "src": "2120:5:1",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nativeSrc": "2139:32:1",
                            "nodeType": "YulAssignment",
                            "src": "2139:32:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "2161:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2161:9:1"
                                }
                              ],
                              "functionName": {
                                "name": "calldataload",
                                "nativeSrc": "2148:12:1",
                                "nodeType": "YulIdentifier",
                                "src": "2148:12:1"
                              },
                              "nativeSrc": "2148:23:1",
                              "nodeType": "YulFunctionCall",
                              "src": "2148:23:1"
                            },
                            "variableNames": [
                              {
                                "name": "value",
                                "nativeSrc": "2139:5:1",
                                "nodeType": "YulIdentifier",
                                "src": "2139:5:1"
                              }
                            ]
                          },
                          {
                            "nativeSrc": "2180:15:1",
                            "nodeType": "YulAssignment",
                            "src": "2180:15:1",
                            "value": {
                              "name": "value",
                              "nativeSrc": "2190:5:1",
                              "nodeType": "YulIdentifier",
                              "src": "2190:5:1"
                            },
                            "variableNames": [
                              {
                                "name": "value0",
                                "nativeSrc": "2180:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "2180:6:1"
                              }
                            ]
                          },
                          {
                            "nativeSrc": "2204:16:1",
                            "nodeType": "YulVariableDeclaration",
                            "src": "2204:16:1",
                            "value": {
                              "kind": "number",
                              "nativeSrc": "2219:1:1",
                              "nodeType": "YulLiteral",
                              "src": "2219:1:1",
                              "type": "",
                              "value": "0"
                            },
                            "variables": [
                              {
                                "name": "value_1",
                                "nativeSrc": "2208:7:1",
                                "nodeType": "YulTypedName",
                                "src": "2208:7:1",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nativeSrc": "2229:43:1",
                            "nodeType": "YulAssignment",
                            "src": "2229:43:1",
                            "value": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "2257:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2257:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2268:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "2268:2:1",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "2253:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2253:3:1"
                                  },
                                  "nativeSrc": "2253:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2253:18:1"
                                }
                              ],
                              "functionName": {
                                "name": "calldataload",
                                "nativeSrc": "2240:12:1",
                                "nodeType": "YulIdentifier",
                                "src": "2240:12:1"
                              },
                              "nativeSrc": "2240:32:1",
                              "nodeType": "YulFunctionCall",
                              "src": "2240:32:1"
                            },
                            "variableNames": [
                              {
                                "name": "value_1",
                                "nativeSrc": "2229:7:1",
                                "nodeType": "YulIdentifier",
                                "src": "2229:7:1"
                              }
                            ]
                          },
                          {
                            "nativeSrc": "2281:17:1",
                            "nodeType": "YulAssignment",
                            "src": "2281:17:1",
                            "value": {
                              "name": "value_1",
                              "nativeSrc": "2291:7:1",
                              "nodeType": "YulIdentifier",
                              "src": "2291:7:1"
                            },
                            "variableNames": [
                              {
                                "name": "value1",
                                "nativeSrc": "2281:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "2281:6:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "abi_decode_tuple_t_uint256t_uint256",
                      "nativeSrc": "1958:346:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "2003:9:1",
                          "nodeType": "YulTypedName",
                          "src": "2003:9:1",
                          "type": ""
                        },
                        {
                          "name": "dataEnd",
                          "nativeSrc": "2014:7:1",
                          "nodeType": "YulTypedName",
                          "src": "2014:7:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "value0",
                          "nativeSrc": "2026:6:1",
                          "nodeType": "YulTypedName",
                          "src": "2026:6:1",
                          "type": ""
                        },
                        {
                          "name": "value1",
                          "nativeSrc": "2034:6:1",
                          "nodeType": "YulTypedName",
                          "src": "2034:6:1",
                          "type": ""
                        }
                      ],
                      "src": "1958:346:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "2379:156:1",
                        "nodeType": "YulBlock",
                        "src": "2379:156:1",
                        "statements": [
                          {
                            "body": {
                              "nativeSrc": "2425:16:1",
                              "nodeType": "YulBlock",
                              "src": "2425:16:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2434:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "2434:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2437:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "2437:1:1",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "revert",
                                      "nativeSrc": "2427:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2427:6:1"
                                    },
                                    "nativeSrc": "2427:12:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2427:12:1"
                                  },
                                  "nativeSrc": "2427:12:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "2427:12:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dataEnd",
                                      "nativeSrc": "2400:7:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2400:7:1"
                                    },
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "2409:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2409:9:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sub",
                                    "nativeSrc": "2396:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2396:3:1"
                                  },
                                  "nativeSrc": "2396:23:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2396:23:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "2421:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "2421:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "slt",
                                "nativeSrc": "2392:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "2392:3:1"
                              },
                              "nativeSrc": "2392:32:1",
                              "nodeType": "YulFunctionCall",
                              "src": "2392:32:1"
                            },
                            "nativeSrc": "2389:52:1",
                            "nodeType": "YulIf",
                            "src": "2389:52:1"
                          },
                          {
                            "nativeSrc": "2450:14:1",
                            "nodeType": "YulVariableDeclaration",
                            "src": "2450:14:1",
                            "value": {
                              "kind": "number",
                              "nativeSrc": "2463:1:1",
                              "nodeType": "YulLiteral",
                              "src": "2463:1:1",
                              "type": "",
                              "value": "0"
                            },
                            "variables": [
                              {
                                "name": "value",
                                "nativeSrc": "2454:5:1",
                                "nodeType": "YulTypedName",
                                "src": "2454:5:1",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nativeSrc": "2473:32:1",
                            "nodeType": "YulAssignment",
                            "src": "2473:32:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "2495:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2495:9:1"
                                }
                              ],
                              "functionName": {
                                "name": "calldataload",
                                "nativeSrc": "2482:12:1",
                                "nodeType": "YulIdentifier",
                                "src": "2482:12:1"
                              },
                              "nativeSrc": "2482:23:1",
                              "nodeType": "YulFunctionCall",
                              "src": "2482:23:1"
                            },
                            "variableNames": [
                              {
                                "name": "value",
                                "nativeSrc": "2473:5:1",
                                "nodeType": "YulIdentifier",
                                "src": "2473:5:1"
                              }
                            ]
                          },
                          {
                            "nativeSrc": "2514:15:1",
                            "nodeType": "YulAssignment",
                            "src": "2514:15:1",
                            "value": {
                              "name": "value",
                              "nativeSrc": "2524:5:1",
                              "nodeType": "YulIdentifier",
                              "src": "2524:5:1"
                            },
                            "variableNames": [
                              {
                                "name": "value0",
                                "nativeSrc": "2514:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "2514:6:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "abi_decode_tuple_t_uint256",
                      "nativeSrc": "2309:226:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "2345:9:1",
                          "nodeType": "YulTypedName",
                          "src": "2345:9:1",
                          "type": ""
                        },
                        {
                          "name": "dataEnd",
                          "nativeSrc": "2356:7:1",
                          "nodeType": "YulTypedName",
                          "src": "2356:7:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "value0",
                          "nativeSrc": "2368:6:1",
                          "nodeType": "YulTypedName",
                          "src": "2368:6:1",
                          "type": ""
                        }
                      ],
                      "src": "2309:226:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "2610:116:1",
                        "nodeType": "YulBlock",
                        "src": "2610:116:1",
                        "statements": [
                          {
                            "body": {
                              "nativeSrc": "2656:16:1",
                              "nodeType": "YulBlock",
                              "src": "2656:16:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2665:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "2665:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2668:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "2668:1:1",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "revert",
                                      "nativeSrc": "2658:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2658:6:1"
                                    },
                                    "nativeSrc": "2658:12:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2658:12:1"
                                  },
                                  "nativeSrc": "2658:12:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "2658:12:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dataEnd",
                                      "nativeSrc": "2631:7:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2631:7:1"
                                    },
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "2640:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2640:9:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sub",
                                    "nativeSrc": "2627:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2627:3:1"
                                  },
                                  "nativeSrc": "2627:23:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2627:23:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "2652:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "2652:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "slt",
                                "nativeSrc": "2623:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "2623:3:1"
                              },
                              "nativeSrc": "2623:32:1",
                              "nodeType": "YulFunctionCall",
                              "src": "2623:32:1"
                            },
                            "nativeSrc": "2620:52:1",
                            "nodeType": "YulIf",
                            "src": "2620:52:1"
                          },
                          {
                            "nativeSrc": "2681:39:1",
                            "nodeType": "YulAssignment",
                            "src": "2681:39:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "2710:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2710:9:1"
                                }
                              ],
                              "functionName": {
                                "name": "abi_decode_address",
                                "nativeSrc": "2691:18:1",
                                "nodeType": "YulIdentifier",
                                "src": "2691:18:1"
                              },
                              "nativeSrc": "2691:29:1",
                              "nodeType": "YulFunctionCall",
                              "src": "2691:29:1"
                            },
                            "variableNames": [
                              {
                                "name": "value0",
                                "nativeSrc": "2681:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "2681:6:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "abi_decode_tuple_t_address",
                      "nativeSrc": "2540:186:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "2576:9:1",
                          "nodeType": "YulTypedName",
                          "src": "2576:9:1",
                          "type": ""
                        },
                        {
                          "name": "dataEnd",
                          "nativeSrc": "2587:7:1",
                          "nodeType": "YulTypedName",
                          "src": "2587:7:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "value0",
                          "nativeSrc": "2599:6:1",
                          "nodeType": "YulTypedName",
                          "src": "2599:6:1",
                          "type": ""
                        }
                      ],
                      "src": "2540:186:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "2832:102:1",
                        "nodeType": "YulBlock",
                        "src": "2832:102:1",
                        "statements": [
                          {
                            "nativeSrc": "2842:26:1",
                            "nodeType": "YulAssignment",
                            "src": "2842:26:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "2854:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2854:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "2865:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "2865:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "2850:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "2850:3:1"
                              },
                              "nativeSrc": "2850:18:1",
                              "nodeType": "YulFunctionCall",
                              "src": "2850:18:1"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nativeSrc": "2842:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "2842:4:1"
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "2884:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "2884:9:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nativeSrc": "2899:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2899:6:1"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "2915:3:1",
                                              "nodeType": "YulLiteral",
                                              "src": "2915:3:1",
                                              "type": "",
                                              "value": "160"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "2920:1:1",
                                              "nodeType": "YulLiteral",
                                              "src": "2920:1:1",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nativeSrc": "2911:3:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "2911:3:1"
                                          },
                                          "nativeSrc": "2911:11:1",
                                          "nodeType": "YulFunctionCall",
                                          "src": "2911:11:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "2924:1:1",
                                          "nodeType": "YulLiteral",
                                          "src": "2924:1:1",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nativeSrc": "2907:3:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "2907:3:1"
                                      },
                                      "nativeSrc": "2907:19:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "2907:19:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "2895:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2895:3:1"
                                  },
                                  "nativeSrc": "2895:32:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2895:32:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "2877:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "2877:6:1"
                              },
                              "nativeSrc": "2877:51:1",
                              "nodeType": "YulFunctionCall",
                              "src": "2877:51:1"
                            },
                            "nativeSrc": "2877:51:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "2877:51:1"
                          }
                        ]
                      },
                      "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                      "nativeSrc": "2731:203:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "2801:9:1",
                          "nodeType": "YulTypedName",
                          "src": "2801:9:1",
                          "type": ""
                        },
                        {
                          "name": "value0",
                          "nativeSrc": "2812:6:1",
                          "nodeType": "YulTypedName",
                          "src": "2812:6:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "tail",
                          "nativeSrc": "2823:4:1",
                          "nodeType": "YulTypedName",
                          "src": "2823:4:1",
                          "type": ""
                        }
                      ],
                      "src": "2731:203:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "3026:173:1",
                        "nodeType": "YulBlock",
                        "src": "3026:173:1",
                        "statements": [
                          {
                            "body": {
                              "nativeSrc": "3072:16:1",
                              "nodeType": "YulBlock",
                              "src": "3072:16:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "3081:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "3081:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "3084:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "3084:1:1",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "revert",
                                      "nativeSrc": "3074:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3074:6:1"
                                    },
                                    "nativeSrc": "3074:12:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3074:12:1"
                                  },
                                  "nativeSrc": "3074:12:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "3074:12:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dataEnd",
                                      "nativeSrc": "3047:7:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3047:7:1"
                                    },
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "3056:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3056:9:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sub",
                                    "nativeSrc": "3043:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3043:3:1"
                                  },
                                  "nativeSrc": "3043:23:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3043:23:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "3068:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "3068:2:1",
                                  "type": "",
                                  "value": "64"
                                }
                              ],
                              "functionName": {
                                "name": "slt",
                                "nativeSrc": "3039:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "3039:3:1"
                              },
                              "nativeSrc": "3039:32:1",
                              "nodeType": "YulFunctionCall",
                              "src": "3039:32:1"
                            },
                            "nativeSrc": "3036:52:1",
                            "nodeType": "YulIf",
                            "src": "3036:52:1"
                          },
                          {
                            "nativeSrc": "3097:39:1",
                            "nodeType": "YulAssignment",
                            "src": "3097:39:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "3126:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "3126:9:1"
                                }
                              ],
                              "functionName": {
                                "name": "abi_decode_address",
                                "nativeSrc": "3107:18:1",
                                "nodeType": "YulIdentifier",
                                "src": "3107:18:1"
                              },
                              "nativeSrc": "3107:29:1",
                              "nodeType": "YulFunctionCall",
                              "src": "3107:29:1"
                            },
                            "variableNames": [
                              {
                                "name": "value0",
                                "nativeSrc": "3097:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "3097:6:1"
                              }
                            ]
                          },
                          {
                            "nativeSrc": "3145:48:1",
                            "nodeType": "YulAssignment",
                            "src": "3145:48:1",
                            "value": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "3178:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3178:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3189:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "3189:2:1",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "3174:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3174:3:1"
                                  },
                                  "nativeSrc": "3174:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3174:18:1"
                                }
                              ],
                              "functionName": {
                                "name": "abi_decode_address",
                                "nativeSrc": "3155:18:1",
                                "nodeType": "YulIdentifier",
                                "src": "3155:18:1"
                              },
                              "nativeSrc": "3155:38:1",
                              "nodeType": "YulFunctionCall",
                              "src": "3155:38:1"
                            },
                            "variableNames": [
                              {
                                "name": "value1",
                                "nativeSrc": "3145:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "3145:6:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "abi_decode_tuple_t_addresst_address",
                      "nativeSrc": "2939:260:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "2984:9:1",
                          "nodeType": "YulTypedName",
                          "src": "2984:9:1",
                          "type": ""
                        },
                        {
                          "name": "dataEnd",
                          "nativeSrc": "2995:7:1",
                          "nodeType": "YulTypedName",
                          "src": "2995:7:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "value0",
                          "nativeSrc": "3007:6:1",
                          "nodeType": "YulTypedName",
                          "src": "3007:6:1",
                          "type": ""
                        },
                        {
                          "name": "value1",
                          "nativeSrc": "3015:6:1",
                          "nodeType": "YulTypedName",
                          "src": "3015:6:1",
                          "type": ""
                        }
                      ],
                      "src": "2939:260:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "3259:325:1",
                        "nodeType": "YulBlock",
                        "src": "3259:325:1",
                        "statements": [
                          {
                            "nativeSrc": "3269:22:1",
                            "nodeType": "YulAssignment",
                            "src": "3269:22:1",
                            "value": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nativeSrc": "3283:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "3283:1:1",
                                  "type": "",
                                  "value": "1"
                                },
                                {
                                  "name": "data",
                                  "nativeSrc": "3286:4:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "3286:4:1"
                                }
                              ],
                              "functionName": {
                                "name": "shr",
                                "nativeSrc": "3279:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "3279:3:1"
                              },
                              "nativeSrc": "3279:12:1",
                              "nodeType": "YulFunctionCall",
                              "src": "3279:12:1"
                            },
                            "variableNames": [
                              {
                                "name": "length",
                                "nativeSrc": "3269:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "3269:6:1"
                              }
                            ]
                          },
                          {
                            "nativeSrc": "3300:38:1",
                            "nodeType": "YulVariableDeclaration",
                            "src": "3300:38:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "data",
                                  "nativeSrc": "3330:4:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "3330:4:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "3336:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "3336:1:1",
                                  "type": "",
                                  "value": "1"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nativeSrc": "3326:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "3326:3:1"
                              },
                              "nativeSrc": "3326:12:1",
                              "nodeType": "YulFunctionCall",
                              "src": "3326:12:1"
                            },
                            "variables": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "3304:18:1",
                                "nodeType": "YulTypedName",
                                "src": "3304:18:1",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nativeSrc": "3377:31:1",
                              "nodeType": "YulBlock",
                              "src": "3377:31:1",
                              "statements": [
                                {
                                  "nativeSrc": "3379:27:1",
                                  "nodeType": "YulAssignment",
                                  "src": "3379:27:1",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nativeSrc": "3393:6:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "3393:6:1"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "3401:4:1",
                                        "nodeType": "YulLiteral",
                                        "src": "3401:4:1",
                                        "type": "",
                                        "value": "0x7f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "3389:3:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3389:3:1"
                                    },
                                    "nativeSrc": "3389:17:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3389:17:1"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "length",
                                      "nativeSrc": "3379:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3379:6:1"
                                    }
                                  ]
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "outOfPlaceEncoding",
                                  "nativeSrc": "3357:18:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "3357:18:1"
                                }
                              ],
                              "functionName": {
                                "name": "iszero",
                                "nativeSrc": "3350:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "3350:6:1"
                              },
                              "nativeSrc": "3350:26:1",
                              "nodeType": "YulFunctionCall",
                              "src": "3350:26:1"
                            },
                            "nativeSrc": "3347:61:1",
                            "nodeType": "YulIf",
                            "src": "3347:61:1"
                          },
                          {
                            "body": {
                              "nativeSrc": "3467:111:1",
                              "nodeType": "YulBlock",
                              "src": "3467:111:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "3488:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "3488:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "3495:3:1",
                                            "nodeType": "YulLiteral",
                                            "src": "3495:3:1",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "3500:10:1",
                                            "nodeType": "YulLiteral",
                                            "src": "3500:10:1",
                                            "type": "",
                                            "value": "0x4e487b71"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nativeSrc": "3491:3:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3491:3:1"
                                        },
                                        "nativeSrc": "3491:20:1",
                                        "nodeType": "YulFunctionCall",
                                        "src": "3491:20:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mstore",
                                      "nativeSrc": "3481:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3481:6:1"
                                    },
                                    "nativeSrc": "3481:31:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3481:31:1"
                                  },
                                  "nativeSrc": "3481:31:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "3481:31:1"
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "3532:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "3532:1:1",
                                        "type": "",
                                        "value": "4"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "3535:4:1",
                                        "nodeType": "YulLiteral",
                                        "src": "3535:4:1",
                                        "type": "",
                                        "value": "0x22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mstore",
                                      "nativeSrc": "3525:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3525:6:1"
                                    },
                                    "nativeSrc": "3525:15:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3525:15:1"
                                  },
                                  "nativeSrc": "3525:15:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "3525:15:1"
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "3560:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "3560:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "3563:4:1",
                                        "nodeType": "YulLiteral",
                                        "src": "3563:4:1",
                                        "type": "",
                                        "value": "0x24"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "revert",
                                      "nativeSrc": "3553:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3553:6:1"
                                    },
                                    "nativeSrc": "3553:15:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3553:15:1"
                                  },
                                  "nativeSrc": "3553:15:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "3553:15:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "outOfPlaceEncoding",
                                  "nativeSrc": "3423:18:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "3423:18:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nativeSrc": "3446:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3446:6:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3454:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "3454:2:1",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nativeSrc": "3443:2:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3443:2:1"
                                  },
                                  "nativeSrc": "3443:14:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3443:14:1"
                                }
                              ],
                              "functionName": {
                                "name": "eq",
                                "nativeSrc": "3420:2:1",
                                "nodeType": "YulIdentifier",
                                "src": "3420:2:1"
                              },
                              "nativeSrc": "3420:38:1",
                              "nodeType": "YulFunctionCall",
                              "src": "3420:38:1"
                            },
                            "nativeSrc": "3417:161:1",
                            "nodeType": "YulIf",
                            "src": "3417:161:1"
                          }
                        ]
                      },
                      "name": "extract_byte_array_length",
                      "nativeSrc": "3204:380:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "data",
                          "nativeSrc": "3239:4:1",
                          "nodeType": "YulTypedName",
                          "src": "3239:4:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "length",
                          "nativeSrc": "3248:6:1",
                          "nodeType": "YulTypedName",
                          "src": "3248:6:1",
                          "type": ""
                        }
                      ],
                      "src": "3204:380:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "3763:164:1",
                        "nodeType": "YulBlock",
                        "src": "3763:164:1",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "3780:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "3780:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "3791:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "3791:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "3773:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "3773:6:1"
                              },
                              "nativeSrc": "3773:21:1",
                              "nodeType": "YulFunctionCall",
                              "src": "3773:21:1"
                            },
                            "nativeSrc": "3773:21:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "3773:21:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "3814:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3814:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3825:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "3825:2:1",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "3810:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3810:3:1"
                                  },
                                  "nativeSrc": "3810:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3810:18:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "3830:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "3830:2:1",
                                  "type": "",
                                  "value": "14"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "3803:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "3803:6:1"
                              },
                              "nativeSrc": "3803:30:1",
                              "nodeType": "YulFunctionCall",
                              "src": "3803:30:1"
                            },
                            "nativeSrc": "3803:30:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "3803:30:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "3853:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "3853:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3864:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "3864:2:1",
                                      "type": "",
                                      "value": "64"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "3849:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3849:3:1"
                                  },
                                  "nativeSrc": "3849:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3849:18:1"
                                },
                                {
                                  "hexValue": "496e76616c696420616d6f756e74",
                                  "kind": "string",
                                  "nativeSrc": "3869:16:1",
                                  "nodeType": "YulLiteral",
                                  "src": "3869:16:1",
                                  "type": "",
                                  "value": "Invalid amount"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "3842:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "3842:6:1"
                              },
                              "nativeSrc": "3842:44:1",
                              "nodeType": "YulFunctionCall",
                              "src": "3842:44:1"
                            },
                            "nativeSrc": "3842:44:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "3842:44:1"
                          },
                          {
                            "nativeSrc": "3895:26:1",
                            "nodeType": "YulAssignment",
                            "src": "3895:26:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "3907:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "3907:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "3918:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "3918:2:1",
                                  "type": "",
                                  "value": "96"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "3903:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "3903:3:1"
                              },
                              "nativeSrc": "3903:18:1",
                              "nodeType": "YulFunctionCall",
                              "src": "3903:18:1"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nativeSrc": "3895:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "3895:4:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "abi_encode_tuple_t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1__to_t_string_memory_ptr__fromStack_reversed",
                      "nativeSrc": "3589:338:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "3740:9:1",
                          "nodeType": "YulTypedName",
                          "src": "3740:9:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "tail",
                          "nativeSrc": "3754:4:1",
                          "nodeType": "YulTypedName",
                          "src": "3754:4:1",
                          "type": ""
                        }
                      ],
                      "src": "3589:338:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "4106:167:1",
                        "nodeType": "YulBlock",
                        "src": "4106:167:1",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "4123:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4123:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "4134:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "4134:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "4116:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "4116:6:1"
                              },
                              "nativeSrc": "4116:21:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4116:21:1"
                            },
                            "nativeSrc": "4116:21:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "4116:21:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "4157:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "4157:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4168:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "4168:2:1",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "4153:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4153:3:1"
                                  },
                                  "nativeSrc": "4153:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4153:18:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "4173:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "4173:2:1",
                                  "type": "",
                                  "value": "17"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "4146:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "4146:6:1"
                              },
                              "nativeSrc": "4146:30:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4146:30:1"
                            },
                            "nativeSrc": "4146:30:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "4146:30:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "4196:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "4196:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4207:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "4207:2:1",
                                      "type": "",
                                      "value": "64"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "4192:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4192:3:1"
                                  },
                                  "nativeSrc": "4192:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4192:18:1"
                                },
                                {
                                  "hexValue": "496e76616c696420726563697069656e74",
                                  "kind": "string",
                                  "nativeSrc": "4212:19:1",
                                  "nodeType": "YulLiteral",
                                  "src": "4212:19:1",
                                  "type": "",
                                  "value": "Invalid recipient"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "4185:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "4185:6:1"
                              },
                              "nativeSrc": "4185:47:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4185:47:1"
                            },
                            "nativeSrc": "4185:47:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "4185:47:1"
                          },
                          {
                            "nativeSrc": "4241:26:1",
                            "nodeType": "YulAssignment",
                            "src": "4241:26:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "4253:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4253:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "4264:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "4264:2:1",
                                  "type": "",
                                  "value": "96"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "4249:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "4249:3:1"
                              },
                              "nativeSrc": "4249:18:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4249:18:1"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nativeSrc": "4241:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "4241:4:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "abi_encode_tuple_t_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d__to_t_string_memory_ptr__fromStack_reversed",
                      "nativeSrc": "3932:341:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "4083:9:1",
                          "nodeType": "YulTypedName",
                          "src": "4083:9:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "tail",
                          "nativeSrc": "4097:4:1",
                          "nodeType": "YulTypedName",
                          "src": "4097:4:1",
                          "type": ""
                        }
                      ],
                      "src": "3932:341:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "4452:164:1",
                        "nodeType": "YulBlock",
                        "src": "4452:164:1",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "4469:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4469:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "4480:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "4480:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "4462:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "4462:6:1"
                              },
                              "nativeSrc": "4462:21:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4462:21:1"
                            },
                            "nativeSrc": "4462:21:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "4462:21:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "4503:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "4503:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4514:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "4514:2:1",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "4499:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4499:3:1"
                                  },
                                  "nativeSrc": "4499:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4499:18:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "4519:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "4519:2:1",
                                  "type": "",
                                  "value": "14"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "4492:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "4492:6:1"
                              },
                              "nativeSrc": "4492:30:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4492:30:1"
                            },
                            "nativeSrc": "4492:30:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "4492:30:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "4542:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "4542:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4553:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "4553:2:1",
                                      "type": "",
                                      "value": "64"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "4538:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4538:3:1"
                                  },
                                  "nativeSrc": "4538:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4538:18:1"
                                },
                                {
                                  "hexValue": "496e76616c69642073656e646572",
                                  "kind": "string",
                                  "nativeSrc": "4558:16:1",
                                  "nodeType": "YulLiteral",
                                  "src": "4558:16:1",
                                  "type": "",
                                  "value": "Invalid sender"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "4531:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "4531:6:1"
                              },
                              "nativeSrc": "4531:44:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4531:44:1"
                            },
                            "nativeSrc": "4531:44:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "4531:44:1"
                          },
                          {
                            "nativeSrc": "4584:26:1",
                            "nodeType": "YulAssignment",
                            "src": "4584:26:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "4596:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4596:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "4607:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "4607:2:1",
                                  "type": "",
                                  "value": "96"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "4592:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "4592:3:1"
                              },
                              "nativeSrc": "4592:18:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4592:18:1"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nativeSrc": "4584:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "4584:4:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "abi_encode_tuple_t_stringliteral_691168f418fc5a4f61166421198b5a4bea266021eef8bf76cd53f1653d7b7ec0__to_t_string_memory_ptr__fromStack_reversed",
                      "nativeSrc": "4278:338:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "4429:9:1",
                          "nodeType": "YulTypedName",
                          "src": "4429:9:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "tail",
                          "nativeSrc": "4443:4:1",
                          "nodeType": "YulTypedName",
                          "src": "4443:4:1",
                          "type": ""
                        }
                      ],
                      "src": "4278:338:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "4795:172:1",
                        "nodeType": "YulBlock",
                        "src": "4795:172:1",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "4812:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4812:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "4823:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "4823:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "4805:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "4805:6:1"
                              },
                              "nativeSrc": "4805:21:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4805:21:1"
                            },
                            "nativeSrc": "4805:21:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "4805:21:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "4846:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "4846:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4857:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "4857:2:1",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "4842:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4842:3:1"
                                  },
                                  "nativeSrc": "4842:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4842:18:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "4862:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "4862:2:1",
                                  "type": "",
                                  "value": "22"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "4835:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "4835:6:1"
                              },
                              "nativeSrc": "4835:30:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4835:30:1"
                            },
                            "nativeSrc": "4835:30:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "4835:30:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "4885:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "4885:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4896:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "4896:2:1",
                                      "type": "",
                                      "value": "64"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "4881:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4881:3:1"
                                  },
                                  "nativeSrc": "4881:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4881:18:1"
                                },
                                {
                                  "hexValue": "496e73756666696369656e7420416c6c6f77616e6365",
                                  "kind": "string",
                                  "nativeSrc": "4901:24:1",
                                  "nodeType": "YulLiteral",
                                  "src": "4901:24:1",
                                  "type": "",
                                  "value": "Insufficient Allowance"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "4874:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "4874:6:1"
                              },
                              "nativeSrc": "4874:52:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4874:52:1"
                            },
                            "nativeSrc": "4874:52:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "4874:52:1"
                          },
                          {
                            "nativeSrc": "4935:26:1",
                            "nodeType": "YulAssignment",
                            "src": "4935:26:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "4947:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "4947:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "4958:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "4958:2:1",
                                  "type": "",
                                  "value": "96"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "4943:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "4943:3:1"
                              },
                              "nativeSrc": "4943:18:1",
                              "nodeType": "YulFunctionCall",
                              "src": "4943:18:1"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nativeSrc": "4935:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "4935:4:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "abi_encode_tuple_t_stringliteral_3f0ff8cd200538bae802ddf9006bb5040e9e9ddc88045ad2938dcac06977cbf6__to_t_string_memory_ptr__fromStack_reversed",
                      "nativeSrc": "4621:346:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "4772:9:1",
                          "nodeType": "YulTypedName",
                          "src": "4772:9:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "tail",
                          "nativeSrc": "4786:4:1",
                          "nodeType": "YulTypedName",
                          "src": "4786:4:1",
                          "type": ""
                        }
                      ],
                      "src": "4621:346:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "5146:226:1",
                        "nodeType": "YulBlock",
                        "src": "5146:226:1",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "5163:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5163:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "5174:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "5174:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "5156:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "5156:6:1"
                              },
                              "nativeSrc": "5156:21:1",
                              "nodeType": "YulFunctionCall",
                              "src": "5156:21:1"
                            },
                            "nativeSrc": "5156:21:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "5156:21:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "5197:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5197:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "5208:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "5208:2:1",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "5193:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5193:3:1"
                                  },
                                  "nativeSrc": "5193:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5193:18:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "5213:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "5213:2:1",
                                  "type": "",
                                  "value": "36"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "5186:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "5186:6:1"
                              },
                              "nativeSrc": "5186:30:1",
                              "nodeType": "YulFunctionCall",
                              "src": "5186:30:1"
                            },
                            "nativeSrc": "5186:30:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "5186:30:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "5236:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5236:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "5247:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "5247:2:1",
                                      "type": "",
                                      "value": "64"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "5232:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5232:3:1"
                                  },
                                  "nativeSrc": "5232:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5232:18:1"
                                },
                                {
                                  "hexValue": "6f6e6c79206665652072656365697665722063616e207472616e736665722066",
                                  "kind": "string",
                                  "nativeSrc": "5252:34:1",
                                  "nodeType": "YulLiteral",
                                  "src": "5252:34:1",
                                  "type": "",
                                  "value": "only fee receiver can transfer f"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "5225:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "5225:6:1"
                              },
                              "nativeSrc": "5225:62:1",
                              "nodeType": "YulFunctionCall",
                              "src": "5225:62:1"
                            },
                            "nativeSrc": "5225:62:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "5225:62:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "5307:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5307:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "5318:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "5318:2:1",
                                      "type": "",
                                      "value": "96"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "5303:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5303:3:1"
                                  },
                                  "nativeSrc": "5303:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5303:18:1"
                                },
                                {
                                  "hexValue": "756e6473",
                                  "kind": "string",
                                  "nativeSrc": "5323:6:1",
                                  "nodeType": "YulLiteral",
                                  "src": "5323:6:1",
                                  "type": "",
                                  "value": "unds"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "5296:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "5296:6:1"
                              },
                              "nativeSrc": "5296:34:1",
                              "nodeType": "YulFunctionCall",
                              "src": "5296:34:1"
                            },
                            "nativeSrc": "5296:34:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "5296:34:1"
                          },
                          {
                            "nativeSrc": "5339:27:1",
                            "nodeType": "YulAssignment",
                            "src": "5339:27:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "5351:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5351:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "5362:3:1",
                                  "nodeType": "YulLiteral",
                                  "src": "5362:3:1",
                                  "type": "",
                                  "value": "128"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "5347:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "5347:3:1"
                              },
                              "nativeSrc": "5347:19:1",
                              "nodeType": "YulFunctionCall",
                              "src": "5347:19:1"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nativeSrc": "5339:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "5339:4:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "abi_encode_tuple_t_stringliteral_7749c8f2046666fbb2de7a13189c41230979aa20281dd481ea4860435342db25__to_t_string_memory_ptr__fromStack_reversed",
                      "nativeSrc": "4972:400:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "5123:9:1",
                          "nodeType": "YulTypedName",
                          "src": "5123:9:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "tail",
                          "nativeSrc": "5137:4:1",
                          "nodeType": "YulTypedName",
                          "src": "5137:4:1",
                          "type": ""
                        }
                      ],
                      "src": "4972:400:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "5458:103:1",
                        "nodeType": "YulBlock",
                        "src": "5458:103:1",
                        "statements": [
                          {
                            "body": {
                              "nativeSrc": "5504:16:1",
                              "nodeType": "YulBlock",
                              "src": "5504:16:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5513:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "5513:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5516:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "5516:1:1",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "revert",
                                      "nativeSrc": "5506:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5506:6:1"
                                    },
                                    "nativeSrc": "5506:12:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5506:12:1"
                                  },
                                  "nativeSrc": "5506:12:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "5506:12:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dataEnd",
                                      "nativeSrc": "5479:7:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5479:7:1"
                                    },
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "5488:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5488:9:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sub",
                                    "nativeSrc": "5475:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5475:3:1"
                                  },
                                  "nativeSrc": "5475:23:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5475:23:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "5500:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "5500:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "slt",
                                "nativeSrc": "5471:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "5471:3:1"
                              },
                              "nativeSrc": "5471:32:1",
                              "nodeType": "YulFunctionCall",
                              "src": "5471:32:1"
                            },
                            "nativeSrc": "5468:52:1",
                            "nodeType": "YulIf",
                            "src": "5468:52:1"
                          },
                          {
                            "nativeSrc": "5529:26:1",
                            "nodeType": "YulAssignment",
                            "src": "5529:26:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "5545:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5545:9:1"
                                }
                              ],
                              "functionName": {
                                "name": "mload",
                                "nativeSrc": "5539:5:1",
                                "nodeType": "YulIdentifier",
                                "src": "5539:5:1"
                              },
                              "nativeSrc": "5539:16:1",
                              "nodeType": "YulFunctionCall",
                              "src": "5539:16:1"
                            },
                            "variableNames": [
                              {
                                "name": "value0",
                                "nativeSrc": "5529:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "5529:6:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "abi_decode_tuple_t_uint256_fromMemory",
                      "nativeSrc": "5377:184:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "5424:9:1",
                          "nodeType": "YulTypedName",
                          "src": "5424:9:1",
                          "type": ""
                        },
                        {
                          "name": "dataEnd",
                          "nativeSrc": "5435:7:1",
                          "nodeType": "YulTypedName",
                          "src": "5435:7:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "value0",
                          "nativeSrc": "5447:6:1",
                          "nodeType": "YulTypedName",
                          "src": "5447:6:1",
                          "type": ""
                        }
                      ],
                      "src": "5377:184:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "5695:145:1",
                        "nodeType": "YulBlock",
                        "src": "5695:145:1",
                        "statements": [
                          {
                            "nativeSrc": "5705:26:1",
                            "nodeType": "YulAssignment",
                            "src": "5705:26:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "5717:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5717:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "5728:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "5728:2:1",
                                  "type": "",
                                  "value": "64"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "5713:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "5713:3:1"
                              },
                              "nativeSrc": "5713:18:1",
                              "nodeType": "YulFunctionCall",
                              "src": "5713:18:1"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nativeSrc": "5705:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "5705:4:1"
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "5747:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5747:9:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nativeSrc": "5762:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5762:6:1"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "5778:3:1",
                                              "nodeType": "YulLiteral",
                                              "src": "5778:3:1",
                                              "type": "",
                                              "value": "160"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "5783:1:1",
                                              "nodeType": "YulLiteral",
                                              "src": "5783:1:1",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nativeSrc": "5774:3:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "5774:3:1"
                                          },
                                          "nativeSrc": "5774:11:1",
                                          "nodeType": "YulFunctionCall",
                                          "src": "5774:11:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "5787:1:1",
                                          "nodeType": "YulLiteral",
                                          "src": "5787:1:1",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nativeSrc": "5770:3:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "5770:3:1"
                                      },
                                      "nativeSrc": "5770:19:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "5770:19:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "5758:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5758:3:1"
                                  },
                                  "nativeSrc": "5758:32:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5758:32:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "5740:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "5740:6:1"
                              },
                              "nativeSrc": "5740:51:1",
                              "nodeType": "YulFunctionCall",
                              "src": "5740:51:1"
                            },
                            "nativeSrc": "5740:51:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "5740:51:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "5811:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5811:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "5822:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "5822:2:1",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "5807:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5807:3:1"
                                  },
                                  "nativeSrc": "5807:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5807:18:1"
                                },
                                {
                                  "name": "value1",
                                  "nativeSrc": "5827:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5827:6:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "5800:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "5800:6:1"
                              },
                              "nativeSrc": "5800:34:1",
                              "nodeType": "YulFunctionCall",
                              "src": "5800:34:1"
                            },
                            "nativeSrc": "5800:34:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "5800:34:1"
                          }
                        ]
                      },
                      "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                      "nativeSrc": "5566:274:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "5656:9:1",
                          "nodeType": "YulTypedName",
                          "src": "5656:9:1",
                          "type": ""
                        },
                        {
                          "name": "value1",
                          "nativeSrc": "5667:6:1",
                          "nodeType": "YulTypedName",
                          "src": "5667:6:1",
                          "type": ""
                        },
                        {
                          "name": "value0",
                          "nativeSrc": "5675:6:1",
                          "nodeType": "YulTypedName",
                          "src": "5675:6:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "tail",
                          "nativeSrc": "5686:4:1",
                          "nodeType": "YulTypedName",
                          "src": "5686:4:1",
                          "type": ""
                        }
                      ],
                      "src": "5566:274:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "5923:199:1",
                        "nodeType": "YulBlock",
                        "src": "5923:199:1",
                        "statements": [
                          {
                            "body": {
                              "nativeSrc": "5969:16:1",
                              "nodeType": "YulBlock",
                              "src": "5969:16:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5978:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "5978:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5981:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "5981:1:1",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "revert",
                                      "nativeSrc": "5971:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5971:6:1"
                                    },
                                    "nativeSrc": "5971:12:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5971:12:1"
                                  },
                                  "nativeSrc": "5971:12:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "5971:12:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dataEnd",
                                      "nativeSrc": "5944:7:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5944:7:1"
                                    },
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "5953:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5953:9:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sub",
                                    "nativeSrc": "5940:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "5940:3:1"
                                  },
                                  "nativeSrc": "5940:23:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5940:23:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "5965:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "5965:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "slt",
                                "nativeSrc": "5936:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "5936:3:1"
                              },
                              "nativeSrc": "5936:32:1",
                              "nodeType": "YulFunctionCall",
                              "src": "5936:32:1"
                            },
                            "nativeSrc": "5933:52:1",
                            "nodeType": "YulIf",
                            "src": "5933:52:1"
                          },
                          {
                            "nativeSrc": "5994:29:1",
                            "nodeType": "YulVariableDeclaration",
                            "src": "5994:29:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "6013:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "6013:9:1"
                                }
                              ],
                              "functionName": {
                                "name": "mload",
                                "nativeSrc": "6007:5:1",
                                "nodeType": "YulIdentifier",
                                "src": "6007:5:1"
                              },
                              "nativeSrc": "6007:16:1",
                              "nodeType": "YulFunctionCall",
                              "src": "6007:16:1"
                            },
                            "variables": [
                              {
                                "name": "value",
                                "nativeSrc": "5998:5:1",
                                "nodeType": "YulTypedName",
                                "src": "5998:5:1",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nativeSrc": "6076:16:1",
                              "nodeType": "YulBlock",
                              "src": "6076:16:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "6085:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "6085:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "6088:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "6088:1:1",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "revert",
                                      "nativeSrc": "6078:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6078:6:1"
                                    },
                                    "nativeSrc": "6078:12:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6078:12:1"
                                  },
                                  "nativeSrc": "6078:12:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "6078:12:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nativeSrc": "6045:5:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6045:5:1"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "value",
                                              "nativeSrc": "6066:5:1",
                                              "nodeType": "YulIdentifier",
                                              "src": "6066:5:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "iszero",
                                            "nativeSrc": "6059:6:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "6059:6:1"
                                          },
                                          "nativeSrc": "6059:13:1",
                                          "nodeType": "YulFunctionCall",
                                          "src": "6059:13:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "iszero",
                                        "nativeSrc": "6052:6:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "6052:6:1"
                                      },
                                      "nativeSrc": "6052:21:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "6052:21:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "eq",
                                    "nativeSrc": "6042:2:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6042:2:1"
                                  },
                                  "nativeSrc": "6042:32:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6042:32:1"
                                }
                              ],
                              "functionName": {
                                "name": "iszero",
                                "nativeSrc": "6035:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "6035:6:1"
                              },
                              "nativeSrc": "6035:40:1",
                              "nodeType": "YulFunctionCall",
                              "src": "6035:40:1"
                            },
                            "nativeSrc": "6032:60:1",
                            "nodeType": "YulIf",
                            "src": "6032:60:1"
                          },
                          {
                            "nativeSrc": "6101:15:1",
                            "nodeType": "YulAssignment",
                            "src": "6101:15:1",
                            "value": {
                              "name": "value",
                              "nativeSrc": "6111:5:1",
                              "nodeType": "YulIdentifier",
                              "src": "6111:5:1"
                            },
                            "variableNames": [
                              {
                                "name": "value0",
                                "nativeSrc": "6101:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "6101:6:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "abi_decode_tuple_t_bool_fromMemory",
                      "nativeSrc": "5845:277:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "5889:9:1",
                          "nodeType": "YulTypedName",
                          "src": "5889:9:1",
                          "type": ""
                        },
                        {
                          "name": "dataEnd",
                          "nativeSrc": "5900:7:1",
                          "nodeType": "YulTypedName",
                          "src": "5900:7:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "value0",
                          "nativeSrc": "5912:6:1",
                          "nodeType": "YulTypedName",
                          "src": "5912:6:1",
                          "type": ""
                        }
                      ],
                      "src": "5845:277:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "6607:711:1",
                        "nodeType": "YulBlock",
                        "src": "6607:711:1",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "6624:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "6624:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "6635:3:1",
                                  "nodeType": "YulLiteral",
                                  "src": "6635:3:1",
                                  "type": "",
                                  "value": "192"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "6617:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "6617:6:1"
                              },
                              "nativeSrc": "6617:22:1",
                              "nodeType": "YulFunctionCall",
                              "src": "6617:22:1"
                            },
                            "nativeSrc": "6617:22:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "6617:22:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "6659:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6659:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "6670:3:1",
                                      "nodeType": "YulLiteral",
                                      "src": "6670:3:1",
                                      "type": "",
                                      "value": "192"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "6655:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6655:3:1"
                                  },
                                  "nativeSrc": "6655:19:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6655:19:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "6676:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "6676:2:1",
                                  "type": "",
                                  "value": "23"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "6648:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "6648:6:1"
                              },
                              "nativeSrc": "6648:31:1",
                              "nodeType": "YulFunctionCall",
                              "src": "6648:31:1"
                            },
                            "nativeSrc": "6648:31:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "6648:31:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "6699:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6699:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "6710:3:1",
                                      "nodeType": "YulLiteral",
                                      "src": "6710:3:1",
                                      "type": "",
                                      "value": "224"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "6695:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6695:3:1"
                                  },
                                  "nativeSrc": "6695:19:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6695:19:1"
                                },
                                {
                                  "hexValue": "546865207472616e7366657220616d6f756e74206f6620",
                                  "kind": "string",
                                  "nativeSrc": "6716:25:1",
                                  "nodeType": "YulLiteral",
                                  "src": "6716:25:1",
                                  "type": "",
                                  "value": "The transfer amount of "
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "6688:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "6688:6:1"
                              },
                              "nativeSrc": "6688:54:1",
                              "nodeType": "YulFunctionCall",
                              "src": "6688:54:1"
                            },
                            "nativeSrc": "6688:54:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "6688:54:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "6762:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6762:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "6773:4:1",
                                      "nodeType": "YulLiteral",
                                      "src": "6773:4:1",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "6758:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6758:3:1"
                                  },
                                  "nativeSrc": "6758:20:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6758:20:1"
                                },
                                {
                                  "name": "value0",
                                  "nativeSrc": "6780:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "6780:6:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "6751:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "6751:6:1"
                              },
                              "nativeSrc": "6751:36:1",
                              "nodeType": "YulFunctionCall",
                              "src": "6751:36:1"
                            },
                            "nativeSrc": "6751:36:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "6751:36:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "6807:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6807:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "6818:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "6818:2:1",
                                      "type": "",
                                      "value": "64"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "6803:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6803:3:1"
                                  },
                                  "nativeSrc": "6803:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6803:18:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "6823:3:1",
                                  "nodeType": "YulLiteral",
                                  "src": "6823:3:1",
                                  "type": "",
                                  "value": "256"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "6796:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "6796:6:1"
                              },
                              "nativeSrc": "6796:31:1",
                              "nodeType": "YulFunctionCall",
                              "src": "6796:31:1"
                            },
                            "nativeSrc": "6796:31:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "6796:31:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "6847:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6847:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "6858:3:1",
                                      "nodeType": "YulLiteral",
                                      "src": "6858:3:1",
                                      "type": "",
                                      "value": "256"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "6843:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6843:3:1"
                                  },
                                  "nativeSrc": "6843:19:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6843:19:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "6864:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "6864:2:1",
                                  "type": "",
                                  "value": "21"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "6836:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "6836:6:1"
                              },
                              "nativeSrc": "6836:31:1",
                              "nodeType": "YulFunctionCall",
                              "src": "6836:31:1"
                            },
                            "nativeSrc": "6836:31:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "6836:31:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "6887:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6887:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "6898:3:1",
                                      "nodeType": "YulLiteral",
                                      "src": "6898:3:1",
                                      "type": "",
                                      "value": "288"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "6883:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6883:3:1"
                                  },
                                  "nativeSrc": "6883:19:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6883:19:1"
                                },
                                {
                                  "hexValue": "20657863656564732074686520616c6c6f77656420",
                                  "kind": "string",
                                  "nativeSrc": "6904:23:1",
                                  "nodeType": "YulLiteral",
                                  "src": "6904:23:1",
                                  "type": "",
                                  "value": " exceeds the allowed "
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "6876:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "6876:6:1"
                              },
                              "nativeSrc": "6876:52:1",
                              "nodeType": "YulFunctionCall",
                              "src": "6876:52:1"
                            },
                            "nativeSrc": "6876:52:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "6876:52:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "6948:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "6948:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "6959:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "6959:2:1",
                                      "type": "",
                                      "value": "96"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "6944:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6944:3:1"
                                  },
                                  "nativeSrc": "6944:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6944:18:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "6964:3:1",
                                  "nodeType": "YulLiteral",
                                  "src": "6964:3:1",
                                  "type": "",
                                  "value": "320"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "6937:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "6937:6:1"
                              },
                              "nativeSrc": "6937:31:1",
                              "nodeType": "YulFunctionCall",
                              "src": "6937:31:1"
                            },
                            "nativeSrc": "6937:31:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "6937:31:1"
                          },
                          {
                            "nativeSrc": "6977:60:1",
                            "nodeType": "YulVariableDeclaration",
                            "src": "6977:60:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "value1",
                                  "nativeSrc": "7009:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "7009:6:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "7021:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7021:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "7032:3:1",
                                      "nodeType": "YulLiteral",
                                      "src": "7032:3:1",
                                      "type": "",
                                      "value": "320"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "7017:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7017:3:1"
                                  },
                                  "nativeSrc": "7017:19:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7017:19:1"
                                }
                              ],
                              "functionName": {
                                "name": "abi_encode_string",
                                "nativeSrc": "6991:17:1",
                                "nodeType": "YulIdentifier",
                                "src": "6991:17:1"
                              },
                              "nativeSrc": "6991:46:1",
                              "nodeType": "YulFunctionCall",
                              "src": "6991:46:1"
                            },
                            "variables": [
                              {
                                "name": "tail_1",
                                "nativeSrc": "6981:6:1",
                                "nodeType": "YulTypedName",
                                "src": "6981:6:1",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "7057:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7057:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "7068:3:1",
                                      "nodeType": "YulLiteral",
                                      "src": "7068:3:1",
                                      "type": "",
                                      "value": "128"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "7053:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7053:3:1"
                                  },
                                  "nativeSrc": "7053:19:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7053:19:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "tail_1",
                                      "nativeSrc": "7078:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7078:6:1"
                                    },
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "7086:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7086:9:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sub",
                                    "nativeSrc": "7074:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7074:3:1"
                                  },
                                  "nativeSrc": "7074:22:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7074:22:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "7046:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "7046:6:1"
                              },
                              "nativeSrc": "7046:51:1",
                              "nodeType": "YulFunctionCall",
                              "src": "7046:51:1"
                            },
                            "nativeSrc": "7046:51:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "7046:51:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "tail_1",
                                  "nativeSrc": "7113:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "7113:6:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "7121:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "7121:2:1",
                                  "type": "",
                                  "value": "38"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "7106:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "7106:6:1"
                              },
                              "nativeSrc": "7106:18:1",
                              "nodeType": "YulFunctionCall",
                              "src": "7106:18:1"
                            },
                            "nativeSrc": "7106:18:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "7106:18:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "tail_1",
                                      "nativeSrc": "7144:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7144:6:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "7152:4:1",
                                      "nodeType": "YulLiteral",
                                      "src": "7152:4:1",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "7140:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7140:3:1"
                                  },
                                  "nativeSrc": "7140:17:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7140:17:1"
                                },
                                {
                                  "hexValue": "206c696d69742e20546865206d6178696d756d20616c6c6f77656420616d6f75",
                                  "kind": "string",
                                  "nativeSrc": "7159:34:1",
                                  "nodeType": "YulLiteral",
                                  "src": "7159:34:1",
                                  "type": "",
                                  "value": " limit. The maximum allowed amou"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "7133:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "7133:6:1"
                              },
                              "nativeSrc": "7133:61:1",
                              "nodeType": "YulFunctionCall",
                              "src": "7133:61:1"
                            },
                            "nativeSrc": "7133:61:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "7133:61:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "tail_1",
                                      "nativeSrc": "7214:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7214:6:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "7222:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "7222:2:1",
                                      "type": "",
                                      "value": "64"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "7210:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7210:3:1"
                                  },
                                  "nativeSrc": "7210:15:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7210:15:1"
                                },
                                {
                                  "hexValue": "6e7420697320",
                                  "kind": "string",
                                  "nativeSrc": "7227:8:1",
                                  "nodeType": "YulLiteral",
                                  "src": "7227:8:1",
                                  "type": "",
                                  "value": "nt is "
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "7203:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "7203:6:1"
                              },
                              "nativeSrc": "7203:33:1",
                              "nodeType": "YulFunctionCall",
                              "src": "7203:33:1"
                            },
                            "nativeSrc": "7203:33:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "7203:33:1"
                          },
                          {
                            "nativeSrc": "7245:23:1",
                            "nodeType": "YulAssignment",
                            "src": "7245:23:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "tail_1",
                                  "nativeSrc": "7257:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "7257:6:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "7265:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "7265:2:1",
                                  "type": "",
                                  "value": "96"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "7253:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "7253:3:1"
                              },
                              "nativeSrc": "7253:15:1",
                              "nodeType": "YulFunctionCall",
                              "src": "7253:15:1"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nativeSrc": "7245:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "7245:4:1"
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "7288:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7288:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "7299:3:1",
                                      "nodeType": "YulLiteral",
                                      "src": "7299:3:1",
                                      "type": "",
                                      "value": "160"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "7284:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7284:3:1"
                                  },
                                  "nativeSrc": "7284:19:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7284:19:1"
                                },
                                {
                                  "name": "value2",
                                  "nativeSrc": "7305:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "7305:6:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "7277:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "7277:6:1"
                              },
                              "nativeSrc": "7277:35:1",
                              "nodeType": "YulFunctionCall",
                              "src": "7277:35:1"
                            },
                            "nativeSrc": "7277:35:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "7277:35:1"
                          }
                        ]
                      },
                      "name": "abi_encode_tuple_t_stringliteral_a895108aba3cb79d17fe8ee77bdc94f8dbbd386b03b92c2e9f4e1163288ac95c_t_uint256_t_stringliteral_80d43b57920045470ddcc52a755f4f3a5e57ca0223f752445585e4bd611d2f0d_t_string_memory_ptr_t_stringliteral_ebda7c53817fafcae7f70eb5333c8a4df88a01e6c77700aee69a9e8924646c09_t_uint256__to_t_string_memory_ptr_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_uint256__fromStack_reversed",
                      "nativeSrc": "6127:1191:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "6560:9:1",
                          "nodeType": "YulTypedName",
                          "src": "6560:9:1",
                          "type": ""
                        },
                        {
                          "name": "value2",
                          "nativeSrc": "6571:6:1",
                          "nodeType": "YulTypedName",
                          "src": "6571:6:1",
                          "type": ""
                        },
                        {
                          "name": "value1",
                          "nativeSrc": "6579:6:1",
                          "nodeType": "YulTypedName",
                          "src": "6579:6:1",
                          "type": ""
                        },
                        {
                          "name": "value0",
                          "nativeSrc": "6587:6:1",
                          "nodeType": "YulTypedName",
                          "src": "6587:6:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "tail",
                          "nativeSrc": "6598:4:1",
                          "nodeType": "YulTypedName",
                          "src": "6598:4:1",
                          "type": ""
                        }
                      ],
                      "src": "6127:1191:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "7497:229:1",
                        "nodeType": "YulBlock",
                        "src": "7497:229:1",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "7514:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "7514:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "7525:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "7525:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "7507:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "7507:6:1"
                              },
                              "nativeSrc": "7507:21:1",
                              "nodeType": "YulFunctionCall",
                              "src": "7507:21:1"
                            },
                            "nativeSrc": "7507:21:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "7507:21:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "7548:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7548:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "7559:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "7559:2:1",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "7544:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7544:3:1"
                                  },
                                  "nativeSrc": "7544:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7544:18:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "7564:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "7564:2:1",
                                  "type": "",
                                  "value": "39"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "7537:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "7537:6:1"
                              },
                              "nativeSrc": "7537:30:1",
                              "nodeType": "YulFunctionCall",
                              "src": "7537:30:1"
                            },
                            "nativeSrc": "7537:30:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "7537:30:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "7587:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7587:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "7598:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "7598:2:1",
                                      "type": "",
                                      "value": "64"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "7583:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7583:3:1"
                                  },
                                  "nativeSrc": "7583:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7583:18:1"
                                },
                                {
                                  "hexValue": "596f7520617265206e6f7420616c6c6f77656420746f20736574206665652072",
                                  "kind": "string",
                                  "nativeSrc": "7603:34:1",
                                  "nodeType": "YulLiteral",
                                  "src": "7603:34:1",
                                  "type": "",
                                  "value": "You are not allowed to set fee r"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "7576:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "7576:6:1"
                              },
                              "nativeSrc": "7576:62:1",
                              "nodeType": "YulFunctionCall",
                              "src": "7576:62:1"
                            },
                            "nativeSrc": "7576:62:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "7576:62:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "7658:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7658:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "7669:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "7669:2:1",
                                      "type": "",
                                      "value": "96"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "7654:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7654:3:1"
                                  },
                                  "nativeSrc": "7654:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7654:18:1"
                                },
                                {
                                  "hexValue": "65636569766572",
                                  "kind": "string",
                                  "nativeSrc": "7674:9:1",
                                  "nodeType": "YulLiteral",
                                  "src": "7674:9:1",
                                  "type": "",
                                  "value": "eceiver"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "7647:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "7647:6:1"
                              },
                              "nativeSrc": "7647:37:1",
                              "nodeType": "YulFunctionCall",
                              "src": "7647:37:1"
                            },
                            "nativeSrc": "7647:37:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "7647:37:1"
                          },
                          {
                            "nativeSrc": "7693:27:1",
                            "nodeType": "YulAssignment",
                            "src": "7693:27:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "7705:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "7705:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "7716:3:1",
                                  "nodeType": "YulLiteral",
                                  "src": "7716:3:1",
                                  "type": "",
                                  "value": "128"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "7701:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "7701:3:1"
                              },
                              "nativeSrc": "7701:19:1",
                              "nodeType": "YulFunctionCall",
                              "src": "7701:19:1"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nativeSrc": "7693:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "7693:4:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "abi_encode_tuple_t_stringliteral_fbcf5812a823c330a73f9d882fcbde9248e001cd709ec7c8842b6f10fb1c1a34__to_t_string_memory_ptr__fromStack_reversed",
                      "nativeSrc": "7323:403:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "7474:9:1",
                          "nodeType": "YulTypedName",
                          "src": "7474:9:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "tail",
                          "nativeSrc": "7488:4:1",
                          "nodeType": "YulTypedName",
                          "src": "7488:4:1",
                          "type": ""
                        }
                      ],
                      "src": "7323:403:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "7905:170:1",
                        "nodeType": "YulBlock",
                        "src": "7905:170:1",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "7922:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "7922:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "7933:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "7933:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "7915:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "7915:6:1"
                              },
                              "nativeSrc": "7915:21:1",
                              "nodeType": "YulFunctionCall",
                              "src": "7915:21:1"
                            },
                            "nativeSrc": "7915:21:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "7915:21:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "7956:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7956:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "7967:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "7967:2:1",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "7952:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7952:3:1"
                                  },
                                  "nativeSrc": "7952:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7952:18:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "7972:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "7972:2:1",
                                  "type": "",
                                  "value": "20"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "7945:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "7945:6:1"
                              },
                              "nativeSrc": "7945:30:1",
                              "nodeType": "YulFunctionCall",
                              "src": "7945:30:1"
                            },
                            "nativeSrc": "7945:30:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "7945:30:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "7995:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "7995:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "8006:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "8006:2:1",
                                      "type": "",
                                      "value": "64"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "7991:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7991:3:1"
                                  },
                                  "nativeSrc": "7991:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7991:18:1"
                                },
                                {
                                  "hexValue": "496e73756666696369656e742042616c616e6365",
                                  "kind": "string",
                                  "nativeSrc": "8011:22:1",
                                  "nodeType": "YulLiteral",
                                  "src": "8011:22:1",
                                  "type": "",
                                  "value": "Insufficient Balance"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "7984:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "7984:6:1"
                              },
                              "nativeSrc": "7984:50:1",
                              "nodeType": "YulFunctionCall",
                              "src": "7984:50:1"
                            },
                            "nativeSrc": "7984:50:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "7984:50:1"
                          },
                          {
                            "nativeSrc": "8043:26:1",
                            "nodeType": "YulAssignment",
                            "src": "8043:26:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "8055:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "8055:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "8066:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "8066:2:1",
                                  "type": "",
                                  "value": "96"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "8051:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "8051:3:1"
                              },
                              "nativeSrc": "8051:18:1",
                              "nodeType": "YulFunctionCall",
                              "src": "8051:18:1"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nativeSrc": "8043:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "8043:4:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "abi_encode_tuple_t_stringliteral_b80e76e4c9dd95c0a6a7ab97569124291f4757bb9e5ff42d1e95905b42144c82__to_t_string_memory_ptr__fromStack_reversed",
                      "nativeSrc": "7731:344:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "7882:9:1",
                          "nodeType": "YulTypedName",
                          "src": "7882:9:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "tail",
                          "nativeSrc": "7896:4:1",
                          "nodeType": "YulTypedName",
                          "src": "7896:4:1",
                          "type": ""
                        }
                      ],
                      "src": "7731:344:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "8112:95:1",
                        "nodeType": "YulBlock",
                        "src": "8112:95:1",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nativeSrc": "8129:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "8129:1:1",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "8136:3:1",
                                      "nodeType": "YulLiteral",
                                      "src": "8136:3:1",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "8141:10:1",
                                      "nodeType": "YulLiteral",
                                      "src": "8141:10:1",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nativeSrc": "8132:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8132:3:1"
                                  },
                                  "nativeSrc": "8132:20:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "8132:20:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "8122:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "8122:6:1"
                              },
                              "nativeSrc": "8122:31:1",
                              "nodeType": "YulFunctionCall",
                              "src": "8122:31:1"
                            },
                            "nativeSrc": "8122:31:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "8122:31:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nativeSrc": "8169:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "8169:1:1",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "8172:4:1",
                                  "nodeType": "YulLiteral",
                                  "src": "8172:4:1",
                                  "type": "",
                                  "value": "0x11"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "8162:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "8162:6:1"
                              },
                              "nativeSrc": "8162:15:1",
                              "nodeType": "YulFunctionCall",
                              "src": "8162:15:1"
                            },
                            "nativeSrc": "8162:15:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "8162:15:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nativeSrc": "8193:1:1",
                                  "nodeType": "YulLiteral",
                                  "src": "8193:1:1",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "8196:4:1",
                                  "nodeType": "YulLiteral",
                                  "src": "8196:4:1",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nativeSrc": "8186:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "8186:6:1"
                              },
                              "nativeSrc": "8186:15:1",
                              "nodeType": "YulFunctionCall",
                              "src": "8186:15:1"
                            },
                            "nativeSrc": "8186:15:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "8186:15:1"
                          }
                        ]
                      },
                      "name": "panic_error_0x11",
                      "nativeSrc": "8080:127:1",
                      "nodeType": "YulFunctionDefinition",
                      "src": "8080:127:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "8264:116:1",
                        "nodeType": "YulBlock",
                        "src": "8264:116:1",
                        "statements": [
                          {
                            "nativeSrc": "8274:20:1",
                            "nodeType": "YulAssignment",
                            "src": "8274:20:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "x",
                                  "nativeSrc": "8289:1:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "8289:1:1"
                                },
                                {
                                  "name": "y",
                                  "nativeSrc": "8292:1:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "8292:1:1"
                                }
                              ],
                              "functionName": {
                                "name": "mul",
                                "nativeSrc": "8285:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "8285:3:1"
                              },
                              "nativeSrc": "8285:9:1",
                              "nodeType": "YulFunctionCall",
                              "src": "8285:9:1"
                            },
                            "variableNames": [
                              {
                                "name": "product",
                                "nativeSrc": "8274:7:1",
                                "nodeType": "YulIdentifier",
                                "src": "8274:7:1"
                              }
                            ]
                          },
                          {
                            "body": {
                              "nativeSrc": "8352:22:1",
                              "nodeType": "YulBlock",
                              "src": "8352:22:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "panic_error_0x11",
                                      "nativeSrc": "8354:16:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8354:16:1"
                                    },
                                    "nativeSrc": "8354:18:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8354:18:1"
                                  },
                                  "nativeSrc": "8354:18:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "8354:18:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "x",
                                          "nativeSrc": "8323:1:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "8323:1:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "iszero",
                                        "nativeSrc": "8316:6:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "8316:6:1"
                                      },
                                      "nativeSrc": "8316:9:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "8316:9:1"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "y",
                                          "nativeSrc": "8330:1:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "8330:1:1"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "product",
                                              "nativeSrc": "8337:7:1",
                                              "nodeType": "YulIdentifier",
                                              "src": "8337:7:1"
                                            },
                                            {
                                              "name": "x",
                                              "nativeSrc": "8346:1:1",
                                              "nodeType": "YulIdentifier",
                                              "src": "8346:1:1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "div",
                                            "nativeSrc": "8333:3:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "8333:3:1"
                                          },
                                          "nativeSrc": "8333:15:1",
                                          "nodeType": "YulFunctionCall",
                                          "src": "8333:15:1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "eq",
                                        "nativeSrc": "8327:2:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "8327:2:1"
                                      },
                                      "nativeSrc": "8327:22:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "8327:22:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "or",
                                    "nativeSrc": "8313:2:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8313:2:1"
                                  },
                                  "nativeSrc": "8313:37:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "8313:37:1"
                                }
                              ],
                              "functionName": {
                                "name": "iszero",
                                "nativeSrc": "8306:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "8306:6:1"
                              },
                              "nativeSrc": "8306:45:1",
                              "nodeType": "YulFunctionCall",
                              "src": "8306:45:1"
                            },
                            "nativeSrc": "8303:71:1",
                            "nodeType": "YulIf",
                            "src": "8303:71:1"
                          }
                        ]
                      },
                      "name": "checked_mul_t_uint256",
                      "nativeSrc": "8212:168:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "x",
                          "nativeSrc": "8243:1:1",
                          "nodeType": "YulTypedName",
                          "src": "8243:1:1",
                          "type": ""
                        },
                        {
                          "name": "y",
                          "nativeSrc": "8246:1:1",
                          "nodeType": "YulTypedName",
                          "src": "8246:1:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "product",
                          "nativeSrc": "8252:7:1",
                          "nodeType": "YulTypedName",
                          "src": "8252:7:1",
                          "type": ""
                        }
                      ],
                      "src": "8212:168:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "8431:171:1",
                        "nodeType": "YulBlock",
                        "src": "8431:171:1",
                        "statements": [
                          {
                            "body": {
                              "nativeSrc": "8462:111:1",
                              "nodeType": "YulBlock",
                              "src": "8462:111:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8483:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "8483:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "8490:3:1",
                                            "nodeType": "YulLiteral",
                                            "src": "8490:3:1",
                                            "type": "",
                                            "value": "224"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "8495:10:1",
                                            "nodeType": "YulLiteral",
                                            "src": "8495:10:1",
                                            "type": "",
                                            "value": "0x4e487b71"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nativeSrc": "8486:3:1",
                                          "nodeType": "YulIdentifier",
                                          "src": "8486:3:1"
                                        },
                                        "nativeSrc": "8486:20:1",
                                        "nodeType": "YulFunctionCall",
                                        "src": "8486:20:1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mstore",
                                      "nativeSrc": "8476:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8476:6:1"
                                    },
                                    "nativeSrc": "8476:31:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8476:31:1"
                                  },
                                  "nativeSrc": "8476:31:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "8476:31:1"
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8527:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "8527:1:1",
                                        "type": "",
                                        "value": "4"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8530:4:1",
                                        "nodeType": "YulLiteral",
                                        "src": "8530:4:1",
                                        "type": "",
                                        "value": "0x12"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mstore",
                                      "nativeSrc": "8520:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8520:6:1"
                                    },
                                    "nativeSrc": "8520:15:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8520:15:1"
                                  },
                                  "nativeSrc": "8520:15:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "8520:15:1"
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8555:1:1",
                                        "nodeType": "YulLiteral",
                                        "src": "8555:1:1",
                                        "type": "",
                                        "value": "0"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8558:4:1",
                                        "nodeType": "YulLiteral",
                                        "src": "8558:4:1",
                                        "type": "",
                                        "value": "0x24"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "revert",
                                      "nativeSrc": "8548:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8548:6:1"
                                    },
                                    "nativeSrc": "8548:15:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8548:15:1"
                                  },
                                  "nativeSrc": "8548:15:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "8548:15:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "y",
                                  "nativeSrc": "8451:1:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "8451:1:1"
                                }
                              ],
                              "functionName": {
                                "name": "iszero",
                                "nativeSrc": "8444:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "8444:6:1"
                              },
                              "nativeSrc": "8444:9:1",
                              "nodeType": "YulFunctionCall",
                              "src": "8444:9:1"
                            },
                            "nativeSrc": "8441:132:1",
                            "nodeType": "YulIf",
                            "src": "8441:132:1"
                          },
                          {
                            "nativeSrc": "8582:14:1",
                            "nodeType": "YulAssignment",
                            "src": "8582:14:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "x",
                                  "nativeSrc": "8591:1:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "8591:1:1"
                                },
                                {
                                  "name": "y",
                                  "nativeSrc": "8594:1:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "8594:1:1"
                                }
                              ],
                              "functionName": {
                                "name": "div",
                                "nativeSrc": "8587:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "8587:3:1"
                              },
                              "nativeSrc": "8587:9:1",
                              "nodeType": "YulFunctionCall",
                              "src": "8587:9:1"
                            },
                            "variableNames": [
                              {
                                "name": "r",
                                "nativeSrc": "8582:1:1",
                                "nodeType": "YulIdentifier",
                                "src": "8582:1:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "checked_div_t_uint256",
                      "nativeSrc": "8385:217:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "x",
                          "nativeSrc": "8416:1:1",
                          "nodeType": "YulTypedName",
                          "src": "8416:1:1",
                          "type": ""
                        },
                        {
                          "name": "y",
                          "nativeSrc": "8419:1:1",
                          "nodeType": "YulTypedName",
                          "src": "8419:1:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "r",
                          "nativeSrc": "8425:1:1",
                          "nodeType": "YulTypedName",
                          "src": "8425:1:1",
                          "type": ""
                        }
                      ],
                      "src": "8385:217:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "8656:79:1",
                        "nodeType": "YulBlock",
                        "src": "8656:79:1",
                        "statements": [
                          {
                            "nativeSrc": "8666:17:1",
                            "nodeType": "YulAssignment",
                            "src": "8666:17:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "x",
                                  "nativeSrc": "8678:1:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "8678:1:1"
                                },
                                {
                                  "name": "y",
                                  "nativeSrc": "8681:1:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "8681:1:1"
                                }
                              ],
                              "functionName": {
                                "name": "sub",
                                "nativeSrc": "8674:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "8674:3:1"
                              },
                              "nativeSrc": "8674:9:1",
                              "nodeType": "YulFunctionCall",
                              "src": "8674:9:1"
                            },
                            "variableNames": [
                              {
                                "name": "diff",
                                "nativeSrc": "8666:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "8666:4:1"
                              }
                            ]
                          },
                          {
                            "body": {
                              "nativeSrc": "8707:22:1",
                              "nodeType": "YulBlock",
                              "src": "8707:22:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "panic_error_0x11",
                                      "nativeSrc": "8709:16:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8709:16:1"
                                    },
                                    "nativeSrc": "8709:18:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8709:18:1"
                                  },
                                  "nativeSrc": "8709:18:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "8709:18:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "diff",
                                  "nativeSrc": "8698:4:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "8698:4:1"
                                },
                                {
                                  "name": "x",
                                  "nativeSrc": "8704:1:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "8704:1:1"
                                }
                              ],
                              "functionName": {
                                "name": "gt",
                                "nativeSrc": "8695:2:1",
                                "nodeType": "YulIdentifier",
                                "src": "8695:2:1"
                              },
                              "nativeSrc": "8695:11:1",
                              "nodeType": "YulFunctionCall",
                              "src": "8695:11:1"
                            },
                            "nativeSrc": "8692:37:1",
                            "nodeType": "YulIf",
                            "src": "8692:37:1"
                          }
                        ]
                      },
                      "name": "checked_sub_t_uint256",
                      "nativeSrc": "8607:128:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "x",
                          "nativeSrc": "8638:1:1",
                          "nodeType": "YulTypedName",
                          "src": "8638:1:1",
                          "type": ""
                        },
                        {
                          "name": "y",
                          "nativeSrc": "8641:1:1",
                          "nodeType": "YulTypedName",
                          "src": "8641:1:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "diff",
                          "nativeSrc": "8647:4:1",
                          "nodeType": "YulTypedName",
                          "src": "8647:4:1",
                          "type": ""
                        }
                      ],
                      "src": "8607:128:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "8788:77:1",
                        "nodeType": "YulBlock",
                        "src": "8788:77:1",
                        "statements": [
                          {
                            "nativeSrc": "8798:16:1",
                            "nodeType": "YulAssignment",
                            "src": "8798:16:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "x",
                                  "nativeSrc": "8809:1:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "8809:1:1"
                                },
                                {
                                  "name": "y",
                                  "nativeSrc": "8812:1:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "8812:1:1"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "8805:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "8805:3:1"
                              },
                              "nativeSrc": "8805:9:1",
                              "nodeType": "YulFunctionCall",
                              "src": "8805:9:1"
                            },
                            "variableNames": [
                              {
                                "name": "sum",
                                "nativeSrc": "8798:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "8798:3:1"
                              }
                            ]
                          },
                          {
                            "body": {
                              "nativeSrc": "8837:22:1",
                              "nodeType": "YulBlock",
                              "src": "8837:22:1",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [],
                                    "functionName": {
                                      "name": "panic_error_0x11",
                                      "nativeSrc": "8839:16:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "8839:16:1"
                                    },
                                    "nativeSrc": "8839:18:1",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8839:18:1"
                                  },
                                  "nativeSrc": "8839:18:1",
                                  "nodeType": "YulExpressionStatement",
                                  "src": "8839:18:1"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "x",
                                  "nativeSrc": "8829:1:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "8829:1:1"
                                },
                                {
                                  "name": "sum",
                                  "nativeSrc": "8832:3:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "8832:3:1"
                                }
                              ],
                              "functionName": {
                                "name": "gt",
                                "nativeSrc": "8826:2:1",
                                "nodeType": "YulIdentifier",
                                "src": "8826:2:1"
                              },
                              "nativeSrc": "8826:10:1",
                              "nodeType": "YulFunctionCall",
                              "src": "8826:10:1"
                            },
                            "nativeSrc": "8823:36:1",
                            "nodeType": "YulIf",
                            "src": "8823:36:1"
                          }
                        ]
                      },
                      "name": "checked_add_t_uint256",
                      "nativeSrc": "8740:125:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "x",
                          "nativeSrc": "8771:1:1",
                          "nodeType": "YulTypedName",
                          "src": "8771:1:1",
                          "type": ""
                        },
                        {
                          "name": "y",
                          "nativeSrc": "8774:1:1",
                          "nodeType": "YulTypedName",
                          "src": "8774:1:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "sum",
                          "nativeSrc": "8780:3:1",
                          "nodeType": "YulTypedName",
                          "src": "8780:3:1",
                          "type": ""
                        }
                      ],
                      "src": "8740:125:1"
                    },
                    {
                      "body": {
                        "nativeSrc": "9027:188:1",
                        "nodeType": "YulBlock",
                        "src": "9027:188:1",
                        "statements": [
                          {
                            "nativeSrc": "9037:26:1",
                            "nodeType": "YulAssignment",
                            "src": "9037:26:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "9049:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "9049:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "9060:2:1",
                                  "nodeType": "YulLiteral",
                                  "src": "9060:2:1",
                                  "type": "",
                                  "value": "96"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "9045:3:1",
                                "nodeType": "YulIdentifier",
                                "src": "9045:3:1"
                              },
                              "nativeSrc": "9045:18:1",
                              "nodeType": "YulFunctionCall",
                              "src": "9045:18:1"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nativeSrc": "9037:4:1",
                                "nodeType": "YulIdentifier",
                                "src": "9037:4:1"
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nativeSrc": "9079:9:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "9079:9:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nativeSrc": "9094:6:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "9094:6:1"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "9110:3:1",
                                              "nodeType": "YulLiteral",
                                              "src": "9110:3:1",
                                              "type": "",
                                              "value": "160"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "9115:1:1",
                                              "nodeType": "YulLiteral",
                                              "src": "9115:1:1",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nativeSrc": "9106:3:1",
                                            "nodeType": "YulIdentifier",
                                            "src": "9106:3:1"
                                          },
                                          "nativeSrc": "9106:11:1",
                                          "nodeType": "YulFunctionCall",
                                          "src": "9106:11:1"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "9119:1:1",
                                          "nodeType": "YulLiteral",
                                          "src": "9119:1:1",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nativeSrc": "9102:3:1",
                                        "nodeType": "YulIdentifier",
                                        "src": "9102:3:1"
                                      },
                                      "nativeSrc": "9102:19:1",
                                      "nodeType": "YulFunctionCall",
                                      "src": "9102:19:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "9090:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9090:3:1"
                                  },
                                  "nativeSrc": "9090:32:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "9090:32:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "9072:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "9072:6:1"
                              },
                              "nativeSrc": "9072:51:1",
                              "nodeType": "YulFunctionCall",
                              "src": "9072:51:1"
                            },
                            "nativeSrc": "9072:51:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "9072:51:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "9143:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "9143:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "9154:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "9154:2:1",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "9139:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9139:3:1"
                                  },
                                  "nativeSrc": "9139:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "9139:18:1"
                                },
                                {
                                  "name": "value1",
                                  "nativeSrc": "9159:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "9159:6:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "9132:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "9132:6:1"
                              },
                              "nativeSrc": "9132:34:1",
                              "nodeType": "YulFunctionCall",
                              "src": "9132:34:1"
                            },
                            "nativeSrc": "9132:34:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "9132:34:1"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nativeSrc": "9186:9:1",
                                      "nodeType": "YulIdentifier",
                                      "src": "9186:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "9197:2:1",
                                      "nodeType": "YulLiteral",
                                      "src": "9197:2:1",
                                      "type": "",
                                      "value": "64"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "9182:3:1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9182:3:1"
                                  },
                                  "nativeSrc": "9182:18:1",
                                  "nodeType": "YulFunctionCall",
                                  "src": "9182:18:1"
                                },
                                {
                                  "name": "value2",
                                  "nativeSrc": "9202:6:1",
                                  "nodeType": "YulIdentifier",
                                  "src": "9202:6:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nativeSrc": "9175:6:1",
                                "nodeType": "YulIdentifier",
                                "src": "9175:6:1"
                              },
                              "nativeSrc": "9175:34:1",
                              "nodeType": "YulFunctionCall",
                              "src": "9175:34:1"
                            },
                            "nativeSrc": "9175:34:1",
                            "nodeType": "YulExpressionStatement",
                            "src": "9175:34:1"
                          }
                        ]
                      },
                      "name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
                      "nativeSrc": "8870:345:1",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nativeSrc": "8980:9:1",
                          "nodeType": "YulTypedName",
                          "src": "8980:9:1",
                          "type": ""
                        },
                        {
                          "name": "value2",
                          "nativeSrc": "8991:6:1",
                          "nodeType": "YulTypedName",
                          "src": "8991:6:1",
                          "type": ""
                        },
                        {
                          "name": "value1",
                          "nativeSrc": "8999:6:1",
                          "nodeType": "YulTypedName",
                          "src": "8999:6:1",
                          "type": ""
                        },
                        {
                          "name": "value0",
                          "nativeSrc": "9007:6:1",
                          "nodeType": "YulTypedName",
                          "src": "9007:6:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "tail",
                          "nativeSrc": "9018:4:1",
                          "nodeType": "YulTypedName",
                          "src": "9018:4:1",
                          "type": ""
                        }
                      ],
                      "src": "8870:345:1"
                    }
                  ]
                },
                "contents": "{\n    { }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        mcopy(add(pos, 0x20), add(value, 0x20), length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := 0\n        value := calldataload(add(headStart, 32))\n        value1 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let value := 0\n        value := calldataload(add(headStart, 64))\n        value2 := value\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 32))\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Invalid amount\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a6664b97aef19c137d44ec81dfc0c0cc28a2c3470357b125208345a2c048425d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Invalid recipient\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_691168f418fc5a4f61166421198b5a4bea266021eef8bf76cd53f1653d7b7ec0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Invalid sender\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3f0ff8cd200538bae802ddf9006bb5040e9e9ddc88045ad2938dcac06977cbf6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Insufficient Allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7749c8f2046666fbb2de7a13189c41230979aa20281dd481ea4860435342db25__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"only fee receiver can transfer f\")\n        mstore(add(headStart, 96), \"unds\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_a895108aba3cb79d17fe8ee77bdc94f8dbbd386b03b92c2e9f4e1163288ac95c_t_uint256_t_stringliteral_80d43b57920045470ddcc52a755f4f3a5e57ca0223f752445585e4bd611d2f0d_t_string_memory_ptr_t_stringliteral_ebda7c53817fafcae7f70eb5333c8a4df88a01e6c77700aee69a9e8924646c09_t_uint256__to_t_string_memory_ptr_t_uint256_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 192)\n        mstore(add(headStart, 192), 23)\n        mstore(add(headStart, 224), \"The transfer amount of \")\n        mstore(add(headStart, 0x20), value0)\n        mstore(add(headStart, 64), 256)\n        mstore(add(headStart, 256), 21)\n        mstore(add(headStart, 288), \" exceeds the allowed \")\n        mstore(add(headStart, 96), 320)\n        let tail_1 := abi_encode_string(value1, add(headStart, 320))\n        mstore(add(headStart, 128), sub(tail_1, headStart))\n        mstore(tail_1, 38)\n        mstore(add(tail_1, 0x20), \" limit. The maximum allowed amou\")\n        mstore(add(tail_1, 64), \"nt is \")\n        tail := add(tail_1, 96)\n        mstore(add(headStart, 160), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_fbcf5812a823c330a73f9d882fcbde9248e001cd709ec7c8842b6f10fb1c1a34__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"You are not allowed to set fee r\")\n        mstore(add(headStart, 96), \"eceiver\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b80e76e4c9dd95c0a6a7ab97569124291f4757bb9e5ff42d1e95905b42144c82__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Insufficient Balance\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n}",
                "id": 1,
                "language": "Yul",
                "name": "#utility.yul"
              }
            ],
            "immutableReferences": {},
            "linkReferences": {},
            "object": "",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x164 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xCD JUMPI DUP1 PUSH4 0xCC1776D3 GT PUSH2 0x87 JUMPI DUP1 PUSH4 0xEFDCD974 GT PUSH2 0x62 JUMPI DUP1 PUSH4 0xEFDCD974 EQ PUSH2 0x40C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x42B JUMPI DUP1 PUSH4 0xF4293890 EQ PUSH2 0x44A JUMPI DUP1 PUSH4 0xF9432517 EQ PUSH2 0x45E JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCC1776D3 EQ PUSH2 0x39E JUMPI DUP1 PUSH4 0xD73792A9 EQ PUSH2 0x3B3 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x3C8 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2E8 JUMPI DUP1 PUSH4 0x77B54BAD EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x31B JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x34C JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x360 JUMPI DUP1 PUSH4 0xB3F00674 EQ PUSH2 0x37F JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4F7041A5 GT PUSH2 0x11E JUMPI DUP1 PUSH4 0x4F7041A5 EQ PUSH2 0x235 JUMPI DUP1 PUSH4 0x4F91E48C EQ PUSH2 0x24A JUMPI DUP1 PUSH4 0x52F7C988 EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0x589210D9 EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0x5A029535 EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2B4 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x199 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x205 JUMPI DUP1 PUSH4 0x3F4BE31E EQ PUSH2 0x220 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x16B JUMPI STOP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x183 PUSH2 0x473 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x190 SWAP2 SWAP1 PUSH2 0x101A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A4 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x1B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1047 JUMP JUMPDEST PUSH2 0x503 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x190 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D3 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x190 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F1 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x200 CALLDATASIZE PUSH1 0x4 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x51C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x210 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x190 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D8 PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x240 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D8 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x255 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D8 PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x27E PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0x10A9 JUMP JUMPDEST PUSH2 0x65D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D8 PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A0 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x27E PUSH2 0x2AF CALLDATASIZE PUSH1 0x4 PUSH2 0x10C9 JUMP JUMPDEST PUSH2 0x670 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D8 PUSH2 0x2CE CALLDATASIZE PUSH1 0x4 PUSH2 0x10E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F3 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x27E PUSH2 0x67D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x307 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x316 CALLDATASIZE PUSH1 0x4 PUSH2 0x1047 JUMP JUMPDEST PUSH2 0x690 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x326 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x190 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x357 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x183 PUSH2 0x7B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B8 PUSH2 0x37A CALLDATASIZE PUSH1 0x4 PUSH2 0x1047 JUMP JUMPDEST PUSH2 0x7BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0xF SLOAD PUSH2 0x334 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A9 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D8 PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D8 PUSH2 0x3E8 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D3 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D8 PUSH2 0x3E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x10F9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x417 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x27E PUSH2 0x426 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E0 JUMP JUMPDEST PUSH2 0x959 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x436 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x27E PUSH2 0x445 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E0 JUMP JUMPDEST PUSH2 0x9EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x455 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x27E PUSH2 0xA2B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x469 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D8 PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x482 SWAP1 PUSH2 0x112A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4AE SWAP1 PUSH2 0x112A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4F9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4D0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4F9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4DC JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x510 DUP2 DUP6 DUP6 PUSH2 0xA94 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 DUP3 GT PUSH2 0x562 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x125B9D985B1A5908185B5BDD5B9D PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x125B9D985B1A59081C9958DA5C1A595B9D PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x5F3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x24B73B30B634B21039B2B73232B9 PUSH1 0x91 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x559 JUMP JUMPDEST PUSH0 PUSH2 0x5FE DUP6 CALLER PUSH2 0x3E2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 0x649 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x496E73756666696369656E7420416C6C6F77616E6365 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x559 JUMP JUMPDEST PUSH2 0x654 DUP6 DUP6 DUP6 PUSH2 0xAA6 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x665 PUSH2 0xC27 JUMP JUMPDEST PUSH1 0x9 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0xA SSTORE JUMP JUMPDEST PUSH2 0x678 PUSH2 0xC27 JUMP JUMPDEST PUSH1 0xE SSTORE JUMP JUMPDEST PUSH2 0x685 PUSH2 0xC27 JUMP JUMPDEST PUSH2 0x68E PUSH0 PUSH2 0xC54 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xF SLOAD PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x559 SWAP1 PUSH2 0x1162 JUMP JUMPDEST DUP2 PUSH0 SUB PUSH2 0x735 JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x70E JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x732 SWAP2 SWAP1 PUSH2 0x11A6 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE SWAP1 DUP5 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x785 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7A9 SWAP2 SWAP1 PUSH2 0x11BD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x482 SWAP1 PUSH2 0x112A JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP2 MSTORE PUSH8 0x3A3930B739B332B9 PUSH1 0xC1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH0 SWAP2 CALLER SWAP2 DUP6 SWAP2 DUP6 SWAP2 DUP5 EXTCODESIZE PUSH4 0xFFFFFFFF AND ISZERO PUSH2 0x81A JUMPI POP POP PUSH1 0xB SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH3 0x627579 PUSH1 0xE8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x871 JUMP JUMPDEST DUP4 EXTCODESIZE PUSH4 0xFFFFFFFF AND ISZERO PUSH2 0x84C JUMPI POP POP PUSH1 0xC SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0x1CD95B1B PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x871 JUMP JUMPDEST POP POP PUSH1 0xD SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP2 MSTORE PUSH8 0x3A3930B739B332B9 PUSH1 0xC1 SHL PUSH1 0x20 DUP3 ADD MSTORE JUMPDEST DUP3 DUP3 LT ISZERO DUP4 DUP3 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x88A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH2 0x8B7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x559 SWAP2 SWAP1 PUSH2 0x101A JUMP JUMPDEST POP PUSH0 DUP8 GT PUSH2 0x8F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x125B9D985B1A5908185B5BDD5B9D PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x942 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x125B9D985B1A59081C9958DA5C1A595B9D PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x559 JUMP JUMPDEST PUSH2 0x94D CALLER DUP10 DUP10 PUSH2 0xAA6 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x9CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x596F7520617265206E6F7420616C6C6F77656420746F20736574206665652072 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x32B1B2B4BB32B9 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0xF DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x9F6 PUSH2 0xC27 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xA1F JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x559 JUMP JUMPDEST PUSH2 0xA28 DUP2 PUSH2 0xC54 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA5E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x559 SWAP1 PUSH2 0x1162 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xA28 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST PUSH2 0xAA1 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xCA5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP2 MSTORE PUSH8 0x3A3930B739B332B9 PUSH1 0xC1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH0 SWAP2 DUP6 SWAP2 DUP6 SWAP2 DUP6 SWAP2 DUP5 EXTCODESIZE PUSH4 0xFFFFFFFF AND ISZERO PUSH2 0xB01 JUMPI POP POP PUSH1 0xB SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH3 0x627579 PUSH1 0xE8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xB58 JUMP JUMPDEST DUP4 EXTCODESIZE PUSH4 0xFFFFFFFF AND ISZERO PUSH2 0xB33 JUMPI POP POP PUSH1 0xC SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0x1CD95B1B PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xB58 JUMP JUMPDEST POP POP PUSH1 0xD SLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x8 DUP2 MSTORE PUSH8 0x3A3930B739B332B9 PUSH1 0xC1 SHL PUSH1 0x20 DUP3 ADD MSTORE JUMPDEST DUP3 DUP3 LT ISZERO DUP4 DUP3 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB71 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH2 0xB9E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x559 SWAP2 SWAP1 PUSH2 0x101A JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP8 DUP2 LT ISZERO PUSH2 0xBFE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E73756666696369656E742042616C616E6365 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x559 JUMP JUMPDEST PUSH0 PUSH2 0xC09 DUP12 DUP11 PUSH2 0xD78 JUMP JUMPDEST SWAP1 POP PUSH2 0xC16 DUP12 DUP12 DUP4 PUSH2 0xE48 JUMP JUMPDEST POP PUSH1 0x1 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x68E JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xCCE JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xCF7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0xD72 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0xD69 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND CALLER EQ PUSH2 0xD92 JUMPI PUSH1 0x9 SLOAD PUSH2 0xD96 JUMP JUMPDEST PUSH1 0xA SLOAD JUMPDEST SWAP1 POP PUSH0 PUSH2 0xDAF PUSH2 0x3E8 PUSH2 0xDA9 DUP7 DUP6 PUSH2 0xEA5 JUMP JUMPDEST SWAP1 PUSH2 0xEB0 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xDBC DUP6 DUP4 PUSH2 0xEBB JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xDDD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 LT ISZERO PUSH2 0xE26 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E73756666696369656E742042616C616E6365 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH2 0xE3E SWAP1 DUP9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH2 0xE48 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xE71 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xE9A JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x559 JUMP JUMPDEST PUSH2 0xAA1 DUP4 DUP4 DUP4 PUSH2 0xEC6 JUMP JUMPDEST PUSH0 PUSH2 0x7A9 DUP3 DUP5 PUSH2 0x12C1 JUMP JUMPDEST PUSH0 PUSH2 0x7A9 DUP3 DUP5 PUSH2 0x12D8 JUMP JUMPDEST PUSH0 PUSH2 0x7A9 DUP3 DUP5 PUSH2 0x12F7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xEF0 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xEE5 SWAP2 SWAP1 PUSH2 0x130A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xF60 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xF42 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x559 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xF7C JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0xF9A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xFDF SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD MCOPY PUSH0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0x7A9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xFEC JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1042 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1058 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1061 DUP4 PUSH2 0x102C JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1081 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x108A DUP5 PUSH2 0x102C JUMP JUMPDEST SWAP3 POP PUSH2 0x1098 PUSH1 0x20 DUP6 ADD PUSH2 0x102C JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10BA JUMPI PUSH0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10D9 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10F0 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x7A9 DUP3 PUSH2 0x102C JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x110A JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1113 DUP4 PUSH2 0x102C JUMP JUMPDEST SWAP2 POP PUSH2 0x1121 PUSH1 0x20 DUP5 ADD PUSH2 0x102C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x113E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x115C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x6F6E6C79206665652072656365697665722063616E207472616E736665722066 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x756E6473 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11B6 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11CD JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x7A9 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0xC0 DUP2 MSTORE PUSH1 0x17 PUSH1 0xC0 DUP3 ADD MSTORE PUSH32 0x546865207472616E7366657220616D6F756E74206F6620000000000000000000 PUSH1 0xE0 DUP3 ADD MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x100 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x15 PUSH2 0x100 DUP3 ADD MSTORE PUSH21 0x1032BC31B2B2B239903A34329030B63637BBB2B21 PUSH1 0x5D SHL PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x140 PUSH1 0x60 DUP3 ADD MSTORE PUSH0 PUSH2 0x1259 PUSH2 0x140 DUP4 ADD DUP6 PUSH2 0xFEC JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x26 DUP2 MSTORE PUSH32 0x206C696D69742E20546865206D6178696D756D20616C6C6F77656420616D6F75 PUSH1 0x20 DUP3 ADD MSTORE PUSH6 0x373A1034B99 PUSH1 0xD5 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x516 JUMPI PUSH2 0x516 PUSH2 0x12AD JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x12F2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x516 JUMPI PUSH2 0x516 PUSH2 0x12AD JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x516 JUMPI PUSH2 0x516 PUSH2 0x12AD JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SGT BLOBHASH SAR 0xB2 DUP3 PUSH17 0x216AB726E747E928E000B705FA4443E540 CALLDATALOAD COINBASE RETURN PUSH3 0x9448DC SWAP11 PUSH10 0x64736F6C634300081A00 CALLER ",
            "sourceMap": "27747:4821:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18677:89;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;20896:186;;;;;;;;;;-1:-1:-1;20896:186:0;;;;;:::i;:::-;;:::i;:::-;;;1181:14:1;;1174:22;1156:41;;1144:2;1129:18;20896:186:0;1016:187:1;19747:97:0;;;;;;;;;;-1:-1:-1;19825:12:0;;19747:97;;;1354:25:1;;;1342:2;1327:18;19747:97:0;1208:177:1;30121:506:0;;;;;;;;;;-1:-1:-1;30121:506:0;;;;;:::i;:::-;;:::i;19605:82::-;;;;;;;;;;-1:-1:-1;19605:82:0;;19678:2;1911:36:1;;1899:2;1884:18;19605:82:0;1769:184:1;28137:49:0;;;;;;;;;;;;;;;;27987:21;;;;;;;;;;;;;;;;28072:24;;;;;;;;;;;;;;;;32219:119;;;;;;;;;;-1:-1:-1;32219:119:0;;;;;:::i;:::-;;:::i;:::-;;28043:23;;;;;;;;;;;;;;;;29641:123;;;;;;;;;;-1:-1:-1;29641:123:0;;;;;:::i;:::-;;:::i;19902:116::-;;;;;;;;;;-1:-1:-1;19902:116:0;;;;;:::i;:::-;-1:-1:-1;;;;;19993:18:0;19967:7;19993:18;;;;;;;;;;;;19902:116;14210:101;;;;;;;;;;;;;:::i;31800:413::-;;;;;;;;;;-1:-1:-1;31800:413:0;;;;;:::i;:::-;;:::i;13555:85::-;;;;;;;;;;-1:-1:-1;13627:6:0;;-1:-1:-1;;;;;13627:6:0;13555:85;;;-1:-1:-1;;;;;2895:32:1;;;2877:51;;2865:2;2850:18;13555:85:0;2731:203:1;18879:93:0;;;;;;;;;;;;;:::i;29770:345::-;;;;;;;;;;-1:-1:-1;29770:345:0;;;;;:::i;:::-;;:::i;28193:26::-;;;;;;;;;;-1:-1:-1;28193:26:0;;;;-1:-1:-1;;;;;28193:26:0;;;28014:22;;;;;;;;;;;;;;;;27934:46;;;;;;;;;;;;27976:4;27934:46;;20449:140;;;;;;;;;;-1:-1:-1;20449:140:0;;;;;:::i;:::-;-1:-1:-1;;;;;20555:18:0;;;20529:7;20555:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;20449:140;32344:222;;;;;;;;;;-1:-1:-1;32344:222:0;;;;;:::i;:::-;;:::i;14460:215::-;;;;;;;;;;-1:-1:-1;14460:215:0;;;;;:::i;:::-;;:::i;31574:220::-;;;;;;;;;;;;;:::i;28102:28::-;;;;;;;;;;;;;;;;18677:89;18722:13;18754:5;18747:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18677:89;:::o;20896:186::-;20969:4;12351:10;21023:31;12351:10;21039:7;21048:5;21023:8;:31::i;:::-;21071:4;21064:11;;;20896:186;;;;;:::o;30121:506::-;30249:4;30282:1;30273:6;:10;30265:37;;;;-1:-1:-1;;;30265:37:0;;3791:2:1;30265:37:0;;;3773:21:1;3830:2;3810:18;;;3803:30;-1:-1:-1;;;3849:18:1;;;3842:44;3903:18;;30265:37:0;;;;;;;;;-1:-1:-1;;;;;30320:23:0;;30312:53;;;;-1:-1:-1;;;30312:53:0;;4134:2:1;30312:53:0;;;4116:21:1;4173:2;4153:18;;;4146:30;-1:-1:-1;;;4192:18:1;;;4185:47;4249:18;;30312:53:0;3932:341:1;30312:53:0;-1:-1:-1;;;;;30383:20:0;;30375:47;;;;-1:-1:-1;;;30375:47:0;;4480:2:1;30375:47:0;;;4462:21:1;4519:2;4499:18;;;4492:30;-1:-1:-1;;;4538:18:1;;;4531:44;4592:18;;30375:47:0;4278:338:1;30375:47:0;30433:24;30460:31;30470:6;12351:10;20449:140;:::i;30460:31::-;30433:58;;30529:6;30509:16;:26;;30501:61;;;;-1:-1:-1;;;30501:61:0;;4823:2:1;30501:61:0;;;4805:21:1;4862:2;4842:18;;;4835:30;-1:-1:-1;;;4881:18:1;;;4874:52;4943:18;;30501:61:0;4621:346:1;30501:61:0;30580:40;30594:6;30602:9;30613:6;30580:13;:40::i;:::-;30573:47;30121:506;-1:-1:-1;;;;;30121:506:0:o;32219:119::-;13448:13;:11;:13::i;:::-;32293:6:::1;:13:::0;;;;32316:7:::1;:15:::0;32219:119::o;29641:123::-;13448:13;:11;:13::i;:::-;29724:22:::1;:33:::0;29641:123::o;14210:101::-;13448:13;:11;:13::i;:::-;14274:30:::1;14301:1;14274:18;:30::i;:::-;14210:101::o:0;31800:413::-;31962:11;;31897:12;;-1:-1:-1;;;;;31962:11:0;12351:10;-1:-1:-1;;;;;31946:27:0;;31925:110;;;;-1:-1:-1;;;31925:110:0;;;;;;;:::i;:::-;32050:6;32060:1;32050:11;32046:95;;32086:44;;-1:-1:-1;;;32086:44:0;;32124:4;32086:44;;;2877:51:1;-1:-1:-1;;;;;32086:29:0;;;;;2850:18:1;;32086:44:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;32077:53;;32046:95;32186:11;;32157:49;;-1:-1:-1;;;32157:49:0;;-1:-1:-1;;;;;32186:11:0;;;32157:49;;;5740:51:1;5807:18;;;5800:34;;;32157:28:0;;;;;;5713:18:1;;32157:49:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;32150:56;31800:413;-1:-1:-1;;;31800:413:0:o;18879:93::-;18926:13;18958:7;18951:14;;;;;:::i;29770:345::-;28864:13;;28887:32;;;;;;;;;;;;-1:-1:-1;;;28887:32:0;;;;-1:-1:-1;;29876:10:0;;29888:9;;29899:6;;28668:18;;28713:8;;;28930:279;;-1:-1:-1;;28976:8:0;;28998:13;;;;;;;;;;;;-1:-1:-1;;;28998:13:0;;;;28930:279;;;28668:18;;28713:8;;;29028:181;;-1:-1:-1;;29077:9:0;;29100:14;;;;;;;;;;;;-1:-1:-1;;;29100:14:0;;;;29028:181;;;-1:-1:-1;;29153:13:0;;29180:18;;;;;;;;;;;;-1:-1:-1;;;29180:18:0;;;;29028:181;29249:6;29240:5;:15;;29372:6;29445:5;29534;29293:264;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;29219:362;;;;;-1:-1:-1;;;29219:362:0;;;;;;;;:::i;:::-;;29961:1:::1;29952:6;:10;29944:37;;;::::0;-1:-1:-1;;;29944:37:0;;3791:2:1;29944:37:0::1;::::0;::::1;3773:21:1::0;3830:2;3810:18;;;3803:30;-1:-1:-1;;;3849:18:1;;;3842:44;3903:18;;29944:37:0::1;3589:338:1::0;29944:37:0::1;-1:-1:-1::0;;;;;29999:23:0;::::1;29991:53;;;::::0;-1:-1:-1;;;29991:53:0;;4134:2:1;29991:53:0::1;::::0;::::1;4116:21:1::0;4173:2;4153:18;;;4146:30;-1:-1:-1;;;4192:18:1;;;4185:47;4249:18;;29991:53:0::1;3932:341:1::0;29991:53:0::1;30062:46;12351:10:::0;30090:9:::1;30101:6;30062:13;:46::i;:::-;30055:53:::0;29770:345;-1:-1:-1;;;;;;;;29770:345:0:o;32344:222::-;32446:11;;-1:-1:-1;;;;;32446:11:0;12351:10;-1:-1:-1;;;;;32430:27:0;;32409:113;;;;-1:-1:-1;;;32409:113:0;;7525:2:1;32409:113:0;;;7507:21:1;7564:2;7544:18;;;7537:30;7603:34;7583:18;;;7576:62;-1:-1:-1;;;7654:18:1;;;7647:37;7701:19;;32409:113:0;7323:403:1;32409:113:0;32533:11;:26;;-1:-1:-1;;;;;;32533:26:0;-1:-1:-1;;;;;32533:26:0;;;;;;;;;;32344:222::o;14460:215::-;13448:13;:11;:13::i;:::-;-1:-1:-1;;;;;14544:22:0;::::1;14540:91;;14589:31;::::0;-1:-1:-1;;;14589:31:0;;14617:1:::1;14589:31;::::0;::::1;2877:51:1::0;2850:18;;14589:31:0::1;2731:203:1::0;14540:91:0::1;14640:28;14659:8;14640:18;:28::i;:::-;14460:215:::0;:::o;31574:220::-;31652:11;;-1:-1:-1;;;;;31652:11:0;12351:10;-1:-1:-1;;;;;31636:27:0;;31615:110;;;;-1:-1:-1;;;31615:110:0;;;;;;;:::i;:::-;31743:11;;31735:52;;-1:-1:-1;;;;;31743:11:0;;;;31765:21;31735:52;;;;;31743:11;31735:52;31743:11;31735:52;31765:21;31743:11;31735:52;;;;;;;;;;;;;;;;;;;25592:128;25676:37;25685:5;25692:7;25701:5;25708:4;25676:8;:37::i;:::-;25592:128;;;:::o;30633:427::-;28864:13;;28887:32;;;;;;;;;;;;-1:-1:-1;;;28887:32:0;;;;-1:-1:-1;;30759:6:0;;30767:9;;30778:6;;28668:18;;28713:8;;;28930:279;;-1:-1:-1;;28976:8:0;;28998:13;;;;;;;;;;;;-1:-1:-1;;;28998:13:0;;;;28930:279;;;28668:18;;28713:8;;;29028:181;;-1:-1:-1;;29077:9:0;;29100:14;;;;;;;;;;;;-1:-1:-1;;;29100:14:0;;;;29028:181;;;-1:-1:-1;;29153:13:0;;29180:18;;;;;;;;;;;;-1:-1:-1;;;29180:18:0;;;;29028:181;29249:6;29240:5;:15;;29372:6;29445:5;29534;29293:264;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;29219:362;;;;;-1:-1:-1;;;29219:362:0;;;;;;;;:::i;:::-;-1:-1:-1;;;;;;19993:18:0;;30811:21:::1;19993:18:::0;;;;;;;;;;;30870:23;;::::1;;30862:56;;;::::0;-1:-1:-1;;;30862:56:0;;7933:2:1;30862:56:0::1;::::0;::::1;7915:21:1::0;7972:2;7952:18;;;7945:30;-1:-1:-1;;;7991:18:1;;;7984:50;8051:18;;30862:56:0::1;7731:344:1::0;30862:56:0::1;30929:22;30954:23;30962:6;30970;30954:7;:23::i;:::-;30929:48;;30987:44;30997:6;31005:9;31016:14;30987:9;:44::i;:::-;-1:-1:-1::0;31049:4:0::1;::::0;30633:427;-1:-1:-1;;;;;;;;;;30633:427:0:o;13713:162::-;13627:6;;-1:-1:-1;;;;;13627:6:0;12351:10;13772:23;13768:101;;13818:40;;-1:-1:-1;;;13818:40:0;;12351:10;13818:40;;;2877:51:1;2850:18;;13818:40:0;2731:203:1;14829:187:0;14921:6;;;-1:-1:-1;;;;;14937:17:0;;;-1:-1:-1;;;;;;14937:17:0;;;;;;;14969:40;;14921:6;;;14937:17;14921:6;;14969:40;;14902:16;;14969:40;14892:124;14829:187;:::o;26552:432::-;-1:-1:-1;;;;;26664:19:0;;26660:89;;26706:32;;-1:-1:-1;;;26706:32:0;;26735:1;26706:32;;;2877:51:1;2850:18;;26706:32:0;2731:203:1;26660:89:0;-1:-1:-1;;;;;26762:21:0;;26758:90;;26806:31;;-1:-1:-1;;;26806:31:0;;26834:1;26806:31;;;2877:51:1;2850:18;;26806:31:0;2731:203:1;26758:90:0;-1:-1:-1;;;;;26857:18:0;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;:35;;;26902:76;;;;26952:7;-1:-1:-1;;;;;26936:31:0;26945:5;-1:-1:-1;;;;;26936:31:0;;26961:5;26936:31;;;;1354:25:1;;1342:2;1327:18;;1208:177;26936:31:0;;;;;;;;26902:76;26552:432;;;;:::o;31066:502::-;31149:7;;-1:-1:-1;;;;;31186:22:0;;12351:10;31186:22;:41;;31221:6;;31186:41;;;31211:7;;31186:41;31172:55;-1:-1:-1;31238:17:0;31258:36;27976:4;31258:15;:6;31172:55;31258:10;:15::i;:::-;:19;;:36::i;:::-;31238:56;-1:-1:-1;31304:27:0;31334:21;:6;31238:56;31334:10;:21::i;:::-;31304:51;;31366:21;31390:17;31400:6;-1:-1:-1;;;;;19993:18:0;19967:7;19993:18;;;;;;;;;;;;19902:116;31390:17;31366:41;;31442:6;31425:13;:23;;31417:56;;;;-1:-1:-1;;;31417:56:0;;7933:2:1;31417:56:0;;;7915:21:1;7972:2;7952:18;;;7945:30;-1:-1:-1;;;7991:18:1;;;7984:50;8051:18;;31417:56:0;7731:344:1;31417:56:0;31501:11;;31483:41;;31493:6;;-1:-1:-1;;;;;31501:11:0;31514:9;31483;:41::i;:::-;-1:-1:-1;31542:19:0;31066:502;-1:-1:-1;;;;;31066:502:0:o;22259:300::-;-1:-1:-1;;;;;22342:18:0;;22338:86;;22383:30;;-1:-1:-1;;;22383:30:0;;22410:1;22383:30;;;2877:51:1;2850:18;;22383:30:0;2731:203:1;22338:86:0;-1:-1:-1;;;;;22437:16:0;;22433:86;;22476:32;;-1:-1:-1;;;22476:32:0;;22505:1;22476:32;;;2877:51:1;2850:18;;22476:32:0;2731:203:1;22433:86:0;22528:24;22536:4;22542:2;22546:5;22528:7;:24::i;3042:96::-;3100:7;3126:5;3130:1;3126;:5;:::i;3427:96::-;3485:7;3511:5;3515:1;3511;:5;:::i;2699:96::-;2757:7;2783:5;2787:1;2783;:5;:::i;22874:1107::-;-1:-1:-1;;;;;22963:18:0;;22959:540;;23115:5;23099:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;22959:540:0;;-1:-1:-1;22959:540:0;;-1:-1:-1;;;;;23173:15:0;;23151:19;23173:15;;;;;;;;;;;23206:19;;;23202:115;;;23252:50;;-1:-1:-1;;;23252:50:0;;-1:-1:-1;;;;;9090:32:1;;23252:50:0;;;9072:51:1;9139:18;;;9132:34;;;9182:18;;;9175:34;;;9045:18;;23252:50:0;8870:345:1;23202:115:0;-1:-1:-1;;;;;23437:15:0;;:9;:15;;;;;;;;;;23455:19;;;;23437:37;;22959:540;-1:-1:-1;;;;;23513:16:0;;23509:425;;23676:12;:21;;;;;;;23509:425;;;-1:-1:-1;;;;;23887:13:0;;:9;:13;;;;;;;;;;:22;;;;;;23509:425;23964:2;-1:-1:-1;;;;;23949:25:0;23958:4;-1:-1:-1;;;;;23949:25:0;;23968:5;23949:25;;;;1354::1;;1342:2;1327:18;;1208:177;23949:25:0;;;;;;;;22874:1107;;;:::o;14:289:1:-;56:3;94:5;88:12;121:6;116:3;109:19;177:6;170:4;163:5;159:16;152:4;147:3;143:14;137:47;229:1;222:4;213:6;208:3;204:16;200:27;193:38;292:4;285:2;281:7;276:2;268:6;264:15;260:29;255:3;251:39;247:50;240:57;;;14:289;;;;:::o;308:220::-;457:2;446:9;439:21;420:4;477:45;518:2;507:9;503:18;495:6;477:45;:::i;533:173::-;601:20;;-1:-1:-1;;;;;650:31:1;;640:42;;630:70;;696:1;693;686:12;630:70;533:173;;;:::o;711:300::-;779:6;787;840:2;828:9;819:7;815:23;811:32;808:52;;;856:1;853;846:12;808:52;879:29;898:9;879:29;:::i;:::-;869:39;977:2;962:18;;;;949:32;;-1:-1:-1;;;711:300:1:o;1390:374::-;1467:6;1475;1483;1536:2;1524:9;1515:7;1511:23;1507:32;1504:52;;;1552:1;1549;1542:12;1504:52;1575:29;1594:9;1575:29;:::i;:::-;1565:39;;1623:38;1657:2;1646:9;1642:18;1623:38;:::i;:::-;1390:374;;1613:48;;-1:-1:-1;;;1730:2:1;1715:18;;;;1702:32;;1390:374::o;1958:346::-;2026:6;2034;2087:2;2075:9;2066:7;2062:23;2058:32;2055:52;;;2103:1;2100;2093:12;2055:52;-1:-1:-1;;2148:23:1;;;2268:2;2253:18;;;2240:32;;-1:-1:-1;1958:346:1:o;2309:226::-;2368:6;2421:2;2409:9;2400:7;2396:23;2392:32;2389:52;;;2437:1;2434;2427:12;2389:52;-1:-1:-1;2482:23:1;;2309:226;-1:-1:-1;2309:226:1:o;2540:186::-;2599:6;2652:2;2640:9;2631:7;2627:23;2623:32;2620:52;;;2668:1;2665;2658:12;2620:52;2691:29;2710:9;2691:29;:::i;2939:260::-;3007:6;3015;3068:2;3056:9;3047:7;3043:23;3039:32;3036:52;;;3084:1;3081;3074:12;3036:52;3107:29;3126:9;3107:29;:::i;:::-;3097:39;;3155:38;3189:2;3178:9;3174:18;3155:38;:::i;:::-;3145:48;;2939:260;;;;;:::o;3204:380::-;3283:1;3279:12;;;;3326;;;3347:61;;3401:4;3393:6;3389:17;3379:27;;3347:61;3454:2;3446:6;3443:14;3423:18;3420:38;3417:161;;3500:10;3495:3;3491:20;3488:1;3481:31;3535:4;3532:1;3525:15;3563:4;3560:1;3553:15;3417:161;;3204:380;;;:::o;4972:400::-;5174:2;5156:21;;;5213:2;5193:18;;;5186:30;5252:34;5247:2;5232:18;;5225:62;-1:-1:-1;;;5318:2:1;5303:18;;5296:34;5362:3;5347:19;;4972:400::o;5377:184::-;5447:6;5500:2;5488:9;5479:7;5475:23;5471:32;5468:52;;;5516:1;5513;5506:12;5468:52;-1:-1:-1;5539:16:1;;5377:184;-1:-1:-1;5377:184:1:o;5845:277::-;5912:6;5965:2;5953:9;5944:7;5940:23;5936:32;5933:52;;;5981:1;5978;5971:12;5933:52;6013:9;6007:16;6066:5;6059:13;6052:21;6045:5;6042:32;6032:60;;6088:1;6085;6078:12;6127:1191;6635:3;6624:9;6617:22;6676:2;6670:3;6659:9;6655:19;6648:31;6716:25;6710:3;6699:9;6695:19;6688:54;6780:6;6773:4;6762:9;6758:20;6751:36;6823:3;6818:2;6807:9;6803:18;6796:31;6864:2;6858:3;6847:9;6843:19;6836:31;-1:-1:-1;;;6898:3:1;6887:9;6883:19;6876:52;6964:3;6959:2;6948:9;6944:18;6937:31;6598:4;6991:46;7032:3;7021:9;7017:19;7009:6;6991:46;:::i;:::-;7074:22;;;7068:3;7053:19;;7046:51;7121:2;7106:18;;7159:34;7152:4;7140:17;;7133:61;-1:-1:-1;;;7222:2:1;7210:15;;7203:33;7299:3;7284:19;;;7277:35;;;;7265:2;7253:15;;6127:1191;-1:-1:-1;;;6127:1191:1:o;8080:127::-;8141:10;8136:3;8132:20;8129:1;8122:31;8172:4;8169:1;8162:15;8196:4;8193:1;8186:15;8212:168;8285:9;;;8316;;8333:15;;;8327:22;;8313:37;8303:71;;8354:18;;:::i;8385:217::-;8425:1;8451;8441:132;;8495:10;8490:3;8486:20;8483:1;8476:31;8530:4;8527:1;8520:15;8558:4;8555:1;8548:15;8441:132;-1:-1:-1;8587:9:1;;8385:217::o;8607:128::-;8674:9;;;8695:11;;;8692:37;;;8709:18;;:::i;8740:125::-;8805:9;;;8826:10;;;8823:36;;;8839:18;;:::i"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "989400",
              "executionCost": "infinite",
              "totalCost": "infinite"
            },
            "external": {
              "FEE_DENOMINATOR()": "261",
              "allowance(address,address)": "infinite",
              "approve(address,uint256)": "24759",
              "balanceOf(address)": "2670",
              "buyLimit()": "2383",
              "buyTax()": "2317",
              "clearStuckToken(address,uint256)": "infinite",
              "decimals()": "288",
              "feeReceiver()": "2469",
              "manualSend()": "infinite",
              "name()": "infinite",
              "nextTransactionTimeGap()": "2428",
              "owner()": "2386",
              "renounceOwnership()": "infinite",
              "sellLimit()": "2339",
              "sellTax()": "2339",
              "setFee(uint256,uint256)": "46688",
              "setFeeReceiver(address)": "26771",
              "symbol()": "infinite",
              "totalSupply()": "2348",
              "transfer(address,uint256)": "infinite",
              "transferFrom(address,address,uint256)": "infinite",
              "transferLimit()": "2404",
              "transferOwnership(address)": "28399",
              "updateTransactionTimeLimit(uint256)": "24597"
            },
            "internal": {
              "_transferFrom(address,address,uint256)": "infinite",
              "isContract(address)": "infinite",
              "takeFee(address,uint256)": "infinite"
            }
          },
          "legacyAssembly": {
            ".code": [
              {
                "begin": 27822,
                "end": 27856,
                "name": "PUSH",
                "source": 0,
                "value": "C0"
              },
              {
                "begin": 27747,
                "end": 32568,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              {
                "begin": 27822,
                "end": 27856,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 27822,
                "end": 27856,
                "name": "PUSH",
                "source": 0,
                "value": "9"
              },
              {
                "begin": 27747,
                "end": 32568,
                "name": "PUSH",
                "source": 0,
                "value": "80"
              },
              {
                "begin": 27822,
                "end": 27856,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 27822,
                "end": 27856,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 27822,
                "end": 27856,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "2A34B6B29021B7B4B7"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "B9"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": 27822,
                "end": 27856,
                "name": "PUSH",
                "source": 0,
                "value": "A0"
              },
              {
                "begin": 27822,
                "end": 27856,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 27822,
                "end": 27856,
                "name": "PUSH",
                "source": 0,
                "value": "6"
              },
              {
                "begin": 27822,
                "end": 27856,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 27822,
                "end": 27856,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "1"
              },
              {
                "begin": 27822,
                "end": 27856,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 27822,
                "end": 27856,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 27822,
                "end": 27856,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "2"
              },
              {
                "begin": 27822,
                "end": 27856,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 27822,
                "end": 27856,
                "name": "tag",
                "source": 0,
                "value": "1"
              },
              {
                "begin": 27822,
                "end": 27856,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "MLOAD",
                "source": 0
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "PUSH",
                "source": 0,
                "value": "4"
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "54494D45"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "E0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "PUSH",
                "source": 0,
                "value": "7"
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "3"
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "2"
              },
              {
                "begin": 27862,
                "end": 27893,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "tag",
                "source": 0,
                "value": "3"
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 27862,
                "end": 27893,
                "name": "POP",
                "source": 0
              },
              {
                "begin": 28177,
                "end": 28186,
                "name": "PUSH",
                "source": 0,
                "value": "78"
              },
              {
                "begin": 28137,
                "end": 28186,
                "name": "PUSH",
                "source": 0,
                "value": "E"
              },
              {
                "begin": 28137,
                "end": 28186,
                "name": "SSTORE",
                "source": 0
              },
              {
                "begin": 28226,
                "end": 28537,
                "name": "CALLVALUE",
                "source": 0
              },
              {
                "begin": 28226,
                "end": 28537,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 28226,
                "end": 28537,
                "name": "ISZERO",
                "source": 0
              },
              {
                "begin": 28226,
                "end": 28537,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "4"
              },
              {
                "begin": 28226,
                "end": 28537,
                "name": "JUMPI",
                "source": 0
              },
              {
                "begin": 28226,
                "end": 28537,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 28226,
                "end": 28537,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 28226,
                "end": 28537,
                "name": "REVERT",
                "source": 0
              },
              {
                "begin": 28226,
                "end": 28537,
                "name": "tag",
                "source": 0,
                "value": "4"
              },
              {
                "begin": 28226,
                "end": 28537,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": 12351,
                "end": 12361,
                "name": "CALLER",
                "source": 0
              },
              {
                "begin": 28246,
                "end": 28251,
                "name": "PUSH",
                "source": 0,
                "value": "6"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SLOAD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "9"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "10"
              },
              {
                "begin": 18499,
                "end": 18612,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "tag",
                "source": 0,
                "value": "9"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "1F"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DIV",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "MUL",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "MLOAD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP3",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SLOAD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "11"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "10"
              },
              {
                "begin": 18499,
                "end": 18612,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "tag",
                "source": 0,
                "value": "11"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ISZERO",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "12"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "JUMPI",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "1F"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "LT",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "13"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "JUMPI",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "100"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP4",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SLOAD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DIV",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "MUL",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP4",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "12"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "tag",
                "source": 0,
                "value": "13"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "KECCAK256",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "tag",
                "source": 0,
                "value": "14"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SLOAD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "1"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP4",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "GT",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "14"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "JUMPI",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SUB",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "1F"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "AND",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "tag",
                "source": 0,
                "value": "12"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "POP",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "POP",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "POP",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "POP",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "POP",
                "source": 0
              },
              {
                "begin": 28253,
                "end": 28260,
                "name": "PUSH",
                "source": 0,
                "value": "7"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SLOAD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "15"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "10"
              },
              {
                "begin": 18499,
                "end": 18612,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "tag",
                "source": 0,
                "value": "15"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "1F"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DIV",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "MUL",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "MLOAD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP3",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SLOAD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "16"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "10"
              },
              {
                "begin": 18499,
                "end": 18612,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "tag",
                "source": 0,
                "value": "16"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ISZERO",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "17"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "JUMPI",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "1F"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "LT",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "18"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "JUMPI",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "100"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP4",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SLOAD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DIV",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "MUL",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP4",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "17"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "tag",
                "source": 0,
                "value": "18"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "KECCAK256",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "tag",
                "source": 0,
                "value": "19"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SLOAD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "1"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP4",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "GT",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "19"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "JUMPI",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SUB",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "PUSH",
                "source": 0,
                "value": "1F"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "AND",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "tag",
                "source": 0,
                "value": "17"
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "POP",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "POP",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "POP",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "POP",
                "source": 0
              },
              {
                "begin": 18499,
                "end": 18612,
                "name": "POP",
                "source": 0
              },
              {
                "begin": 18573,
                "end": 18578,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 18565,
                "end": 18570,
                "name": "PUSH",
                "source": 0,
                "value": "3"
              },
              {
                "begin": 18565,
                "end": 18578,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18565,
                "end": 18578,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 18565,
                "end": 18578,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "22"
              },
              {
                "begin": 18565,
                "end": 18578,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 18565,
                "end": 18578,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 18565,
                "end": 18578,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "2"
              },
              {
                "begin": 18565,
                "end": 18578,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 18565,
                "end": 18578,
                "name": "tag",
                "source": 0,
                "value": "22"
              },
              {
                "begin": 18565,
                "end": 18578,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": 18588,
                "end": 18595,
                "name": "PUSH",
                "source": 0,
                "value": "4"
              },
              {
                "begin": 18588,
                "end": 18605,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "23"
              },
              {
                "begin": 18598,
                "end": 18605,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 18588,
                "end": 18595,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 18588,
                "end": 18605,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "2"
              },
              {
                "begin": 18588,
                "end": 18605,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 18588,
                "end": 18605,
                "name": "tag",
                "source": 0,
                "value": "23"
              },
              {
                "begin": 18588,
                "end": 18605,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "A0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SUB",
                "source": -1
              },
              {
                "begin": 13190,
                "end": 13216,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 13190,
                "end": 13216,
                "name": "AND",
                "source": 0
              },
              {
                "begin": 13186,
                "end": 13281,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "25"
              },
              {
                "begin": 13186,
                "end": 13281,
                "name": "JUMPI",
                "source": 0
              },
              {
                "begin": 13239,
                "end": 13270,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              {
                "begin": 13239,
                "end": 13270,
                "name": "MLOAD",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1E4FBDF7"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "E0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": 13239,
                "end": 13270,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 13239,
                "end": 13270,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 13267,
                "end": 13268,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 13239,
                "end": 13270,
                "name": "PUSH",
                "source": 0,
                "value": "4"
              },
              {
                "begin": 13239,
                "end": 13270,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 13239,
                "end": 13270,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 2801,
                "end": 2852,
                "name": "MSTORE",
                "source": 1
              },
              {
                "begin": 2774,
                "end": 2792,
                "name": "PUSH",
                "source": 1,
                "value": "24"
              },
              {
                "begin": 2774,
                "end": 2792,
                "name": "ADD",
                "source": 1
              },
              {
                "begin": 13239,
                "end": 13270,
                "name": "tag",
                "source": 0,
                "value": "26"
              },
              {
                "begin": 13239,
                "end": 13270,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 13239,
                "end": 13270,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              {
                "begin": 13239,
                "end": 13270,
                "name": "MLOAD",
                "source": 0
              },
              {
                "begin": 13239,
                "end": 13270,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 13239,
                "end": 13270,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 13239,
                "end": 13270,
                "name": "SUB",
                "source": 0
              },
              {
                "begin": 13239,
                "end": 13270,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 13239,
                "end": 13270,
                "name": "REVERT",
                "source": 0
              },
              {
                "begin": 13186,
                "end": 13281,
                "name": "tag",
                "source": 0,
                "value": "25"
              },
              {
                "begin": 13186,
                "end": 13281,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 13290,
                "end": 13322,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "28"
              },
              {
                "begin": 13309,
                "end": 13321,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 13290,
                "end": 13308,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "29"
              },
              {
                "begin": 13290,
                "end": 13322,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 13290,
                "end": 13322,
                "name": "tag",
                "source": 0,
                "value": "28"
              },
              {
                "begin": 13290,
                "end": 13322,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": 28319,
                "end": 28333,
                "modifierDepth": 2,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "33"
              },
              {
                "begin": 19678,
                "end": 19680,
                "name": "PUSH",
                "source": 0,
                "value": "12"
              },
              {
                "begin": 28319,
                "end": 28321,
                "modifierDepth": 2,
                "name": "PUSH",
                "source": 0,
                "value": "A"
              },
              {
                "begin": 28319,
                "end": 28333,
                "modifierDepth": 2,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "34"
              },
              {
                "begin": 28319,
                "end": 28333,
                "jumpType": "[in]",
                "modifierDepth": 2,
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 28319,
                "end": 28333,
                "modifierDepth": 2,
                "name": "tag",
                "source": 0,
                "value": "33"
              },
              {
                "begin": 28319,
                "end": 28333,
                "modifierDepth": 2,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 28309,
                "end": 28333,
                "modifierDepth": 2,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "35"
              },
              {
                "begin": 28309,
                "end": 28333,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 28309,
                "end": 28316,
                "modifierDepth": 2,
                "name": "PUSH",
                "source": 0,
                "value": "F4240"
              },
              {
                "begin": 28309,
                "end": 28333,
                "modifierDepth": 2,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "36"
              },
              {
                "begin": 28309,
                "end": 28333,
                "jumpType": "[in]",
                "modifierDepth": 2,
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 28309,
                "end": 28333,
                "modifierDepth": 2,
                "name": "tag",
                "source": 0,
                "value": "35"
              },
              {
                "begin": 28309,
                "end": 28333,
                "modifierDepth": 2,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 28294,
                "end": 28306,
                "modifierDepth": 2,
                "name": "PUSH",
                "source": 0,
                "value": "8"
              },
              {
                "begin": 28294,
                "end": 28333,
                "name": "SSTORE",
                "source": 0
              },
              {
                "begin": 28344,
                "end": 28377,
                "modifierDepth": 2,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "37"
              },
              {
                "begin": 12351,
                "end": 12361,
                "name": "CALLER",
                "source": 0
              },
              {
                "begin": 28364,
                "end": 28376,
                "modifierDepth": 2,
                "name": "PUSH",
                "source": 0,
                "value": "8"
              },
              {
                "begin": 28364,
                "end": 28376,
                "name": "SLOAD",
                "source": 0
              },
              {
                "begin": 28344,
                "end": 28349,
                "modifierDepth": 2,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "39"
              },
              {
                "begin": 28344,
                "end": 28377,
                "jumpType": "[in]",
                "modifierDepth": 2,
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 28344,
                "end": 28377,
                "modifierDepth": 2,
                "name": "tag",
                "source": 0,
                "value": "37"
              },
              {
                "begin": 28344,
                "end": 28377,
                "modifierDepth": 2,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 28397,
                "end": 28398,
                "modifierDepth": 2,
                "name": "PUSH",
                "source": 0,
                "value": "3"
              },
              {
                "begin": 28388,
                "end": 28394,
                "modifierDepth": 2,
                "name": "PUSH",
                "source": 0,
                "value": "9"
              },
              {
                "begin": 28388,
                "end": 28398,
                "name": "SSTORE",
                "source": 0
              },
              {
                "begin": 28418,
                "end": 28419,
                "modifierDepth": 2,
                "name": "PUSH",
                "source": 0,
                "value": "5"
              },
              {
                "begin": 28408,
                "end": 28415,
                "modifierDepth": 2,
                "name": "PUSH",
                "source": 0,
                "value": "A"
              },
              {
                "begin": 28408,
                "end": 28419,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 28408,
                "end": 28419,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 28408,
                "end": 28419,
                "name": "SSTORE",
                "source": 0
              },
              {
                "begin": 28441,
                "end": 28442,
                "modifierDepth": 2,
                "name": "PUSH",
                "source": 0,
                "value": "2"
              },
              {
                "begin": 28430,
                "end": 28438,
                "modifierDepth": 2,
                "name": "PUSH",
                "source": 0,
                "value": "B"
              },
              {
                "begin": 28430,
                "end": 28442,
                "name": "SSTORE",
                "source": 0
              },
              {
                "begin": 28452,
                "end": 28461,
                "modifierDepth": 2,
                "name": "PUSH",
                "source": 0,
                "value": "C"
              },
              {
                "begin": 28452,
                "end": 28465,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 28452,
                "end": 28465,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 28452,
                "end": 28465,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 28452,
                "end": 28465,
                "name": "SSTORE",
                "source": 0
              },
              {
                "begin": 28475,
                "end": 28488,
                "modifierDepth": 2,
                "name": "PUSH",
                "source": 0,
                "value": "D"
              },
              {
                "begin": 28475,
                "end": 28493,
                "name": "SSTORE",
                "source": 0
              },
              {
                "begin": 28504,
                "end": 28515,
                "modifierDepth": 2,
                "name": "PUSH",
                "source": 0,
                "value": "F"
              },
              {
                "begin": 28504,
                "end": 28530,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 28504,
                "end": 28530,
                "name": "SLOAD",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "A0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SUB",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "NOT",
                "source": -1
              },
              {
                "begin": 28504,
                "end": 28530,
                "modifierDepth": 2,
                "name": "AND",
                "source": 0
              },
              {
                "begin": 12351,
                "end": 12361,
                "name": "CALLER",
                "source": 0
              },
              {
                "begin": 28504,
                "end": 28530,
                "modifierDepth": 2,
                "name": "OR",
                "source": 0
              },
              {
                "begin": 28504,
                "end": 28530,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 28504,
                "end": 28530,
                "name": "SSTORE",
                "source": 0
              },
              {
                "begin": 27747,
                "end": 32568,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "69"
              },
              {
                "begin": 27747,
                "end": 32568,
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 14829,
                "end": 15016,
                "name": "tag",
                "source": 0,
                "value": "29"
              },
              {
                "begin": 14829,
                "end": 15016,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 14921,
                "end": 14927,
                "name": "PUSH",
                "source": 0,
                "value": "5"
              },
              {
                "begin": 14921,
                "end": 14927,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 14921,
                "end": 14927,
                "name": "SLOAD",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "A0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SUB",
                "source": -1
              },
              {
                "begin": 14937,
                "end": 14954,
                "name": "DUP4",
                "source": 0
              },
              {
                "begin": 14937,
                "end": 14954,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 14937,
                "end": 14954,
                "name": "AND",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "A0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SUB",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "NOT",
                "source": -1
              },
              {
                "begin": 14937,
                "end": 14954,
                "name": "DUP4",
                "source": 0
              },
              {
                "begin": 14937,
                "end": 14954,
                "name": "AND",
                "source": 0
              },
              {
                "begin": 14937,
                "end": 14954,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 14937,
                "end": 14954,
                "name": "OR",
                "source": 0
              },
              {
                "begin": 14937,
                "end": 14954,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 14937,
                "end": 14954,
                "name": "SWAP4",
                "source": 0
              },
              {
                "begin": 14937,
                "end": 14954,
                "name": "SSTORE",
                "source": 0
              },
              {
                "begin": 14969,
                "end": 15009,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              {
                "begin": 14969,
                "end": 15009,
                "name": "MLOAD",
                "source": 0
              },
              {
                "begin": 14921,
                "end": 14927,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 14921,
                "end": 14927,
                "name": "AND",
                "source": 0
              },
              {
                "begin": 14921,
                "end": 14927,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 14937,
                "end": 14954,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 14921,
                "end": 14927,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 14921,
                "end": 14927,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 14969,
                "end": 15009,
                "name": "PUSH",
                "source": 0,
                "value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
              },
              {
                "begin": 14969,
                "end": 15009,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 14902,
                "end": 14918,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 14902,
                "end": 14918,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 14969,
                "end": 15009,
                "name": "LOG3",
                "source": 0
              },
              {
                "begin": 14892,
                "end": 15016,
                "name": "POP",
                "source": 0
              },
              {
                "begin": 14829,
                "end": 15016,
                "name": "POP",
                "source": 0
              },
              {
                "begin": 14829,
                "end": 15016,
                "jumpType": "[out]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 24324,
                "end": 24532,
                "name": "tag",
                "source": 0,
                "value": "39"
              },
              {
                "begin": 24324,
                "end": 24532,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "A0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SUB",
                "source": -1
              },
              {
                "begin": 24394,
                "end": 24415,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 24394,
                "end": 24415,
                "name": "AND",
                "source": 0
              },
              {
                "begin": 24390,
                "end": 24481,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "46"
              },
              {
                "begin": 24390,
                "end": 24481,
                "name": "JUMPI",
                "source": 0
              },
              {
                "begin": 24438,
                "end": 24470,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              {
                "begin": 24438,
                "end": 24470,
                "name": "MLOAD",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "EC442F05"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "E0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": 24438,
                "end": 24470,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 24438,
                "end": 24470,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 24467,
                "end": 24468,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 24438,
                "end": 24470,
                "name": "PUSH",
                "source": 0,
                "value": "4"
              },
              {
                "begin": 24438,
                "end": 24470,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 24438,
                "end": 24470,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 2801,
                "end": 2852,
                "name": "MSTORE",
                "source": 1
              },
              {
                "begin": 2774,
                "end": 2792,
                "name": "PUSH",
                "source": 1,
                "value": "24"
              },
              {
                "begin": 2774,
                "end": 2792,
                "name": "ADD",
                "source": 1
              },
              {
                "begin": 24438,
                "end": 24470,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "26"
              },
              {
                "begin": 2655,
                "end": 2858,
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 24390,
                "end": 24481,
                "name": "tag",
                "source": 0,
                "value": "46"
              },
              {
                "begin": 24390,
                "end": 24481,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 24490,
                "end": 24525,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "48"
              },
              {
                "begin": 24506,
                "end": 24507,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 24510,
                "end": 24517,
                "name": "DUP4",
                "source": 0
              },
              {
                "begin": 24519,
                "end": 24524,
                "name": "DUP4",
                "source": 0
              },
              {
                "begin": 24490,
                "end": 24497,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "49"
              },
              {
                "begin": 24490,
                "end": 24525,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 24490,
                "end": 24525,
                "name": "tag",
                "source": 0,
                "value": "48"
              },
              {
                "begin": 24490,
                "end": 24525,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 24324,
                "end": 24532,
                "name": "POP",
                "source": 0
              },
              {
                "begin": 24324,
                "end": 24532,
                "name": "POP",
                "source": 0
              },
              {
                "begin": 24324,
                "end": 24532,
                "jumpType": "[out]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 22874,
                "end": 23981,
                "name": "tag",
                "source": 0,
                "value": "49"
              },
              {
                "begin": 22874,
                "end": 23981,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "A0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SUB",
                "source": -1
              },
              {
                "begin": 22963,
                "end": 22981,
                "name": "DUP4",
                "source": 0
              },
              {
                "begin": 22963,
                "end": 22981,
                "name": "AND",
                "source": 0
              },
              {
                "begin": 22959,
                "end": 23499,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "51"
              },
              {
                "begin": 22959,
                "end": 23499,
                "name": "JUMPI",
                "source": 0
              },
              {
                "begin": 23115,
                "end": 23120,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 23099,
                "end": 23111,
                "name": "PUSH",
                "source": 0,
                "value": "2"
              },
              {
                "begin": 23099,
                "end": 23111,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 23099,
                "end": 23120,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 23099,
                "end": 23120,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 23099,
                "end": 23120,
                "name": "SLOAD",
                "source": 0
              },
              {
                "begin": 23099,
                "end": 23120,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "52"
              },
              {
                "begin": 23099,
                "end": 23120,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 23099,
                "end": 23120,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 23099,
                "end": 23120,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "53"
              },
              {
                "begin": 23099,
                "end": 23120,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 23099,
                "end": 23120,
                "name": "tag",
                "source": 0,
                "value": "52"
              },
              {
                "begin": 23099,
                "end": 23120,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 23099,
                "end": 23120,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 23099,
                "end": 23120,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 23099,
                "end": 23120,
                "name": "SSTORE",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": 22959,
                "end": 23499,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "54"
              },
              {
                "begin": 22959,
                "end": 23499,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": 22959,
                "end": 23499,
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 22959,
                "end": 23499,
                "name": "tag",
                "source": 0,
                "value": "51"
              },
              {
                "begin": 22959,
                "end": 23499,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "A0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SUB",
                "source": -1
              },
              {
                "begin": 23173,
                "end": 23188,
                "name": "DUP4",
                "source": 0
              },
              {
                "begin": 23173,
                "end": 23188,
                "name": "AND",
                "source": 0
              },
              {
                "begin": 23151,
                "end": 23170,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 23173,
                "end": 23188,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 23173,
                "end": 23188,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 23173,
                "end": 23188,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 23173,
                "end": 23188,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              {
                "begin": 23173,
                "end": 23188,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 23173,
                "end": 23188,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 23173,
                "end": 23188,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 23173,
                "end": 23188,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              {
                "begin": 23173,
                "end": 23188,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 23173,
                "end": 23188,
                "name": "KECCAK256",
                "source": 0
              },
              {
                "begin": 23173,
                "end": 23188,
                "name": "SLOAD",
                "source": 0
              },
              {
                "begin": 23206,
                "end": 23225,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 23206,
                "end": 23225,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 23206,
                "end": 23225,
                "name": "LT",
                "source": 0
              },
              {
                "begin": 23202,
                "end": 23317,
                "name": "ISZERO",
                "source": 0
              },
              {
                "begin": 23202,
                "end": 23317,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "55"
              },
              {
                "begin": 23202,
                "end": 23317,
                "name": "JUMPI",
                "source": 0
              },
              {
                "begin": 23252,
                "end": 23302,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              {
                "begin": 23252,
                "end": 23302,
                "name": "MLOAD",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "391434E3"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "E2"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": 23252,
                "end": 23302,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 23252,
                "end": 23302,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "A0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SUB",
                "source": -1
              },
              {
                "begin": 4950,
                "end": 4982,
                "name": "DUP6",
                "source": 1
              },
              {
                "begin": 4950,
                "end": 4982,
                "name": "AND",
                "source": 1
              },
              {
                "begin": 23252,
                "end": 23302,
                "name": "PUSH",
                "source": 0,
                "value": "4"
              },
              {
                "begin": 23252,
                "end": 23302,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 23252,
                "end": 23302,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 4932,
                "end": 4983,
                "name": "MSTORE",
                "source": 1
              },
              {
                "begin": 4999,
                "end": 5017,
                "name": "PUSH",
                "source": 1,
                "value": "24"
              },
              {
                "begin": 4999,
                "end": 5017,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 4999,
                "end": 5017,
                "name": "ADD",
                "source": 1
              },
              {
                "begin": 4992,
                "end": 5026,
                "name": "DUP3",
                "source": 1
              },
              {
                "begin": 4992,
                "end": 5026,
                "name": "SWAP1",
                "source": 1
              },
              {
                "begin": 4992,
                "end": 5026,
                "name": "MSTORE",
                "source": 1
              },
              {
                "begin": 5042,
                "end": 5060,
                "name": "PUSH",
                "source": 1,
                "value": "44"
              },
              {
                "begin": 5042,
                "end": 5060,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 5042,
                "end": 5060,
                "name": "ADD",
                "source": 1
              },
              {
                "begin": 5035,
                "end": 5069,
                "name": "DUP4",
                "source": 1
              },
              {
                "begin": 5035,
                "end": 5069,
                "name": "SWAP1",
                "source": 1
              },
              {
                "begin": 5035,
                "end": 5069,
                "name": "MSTORE",
                "source": 1
              },
              {
                "begin": 4905,
                "end": 4923,
                "name": "PUSH",
                "source": 1,
                "value": "64"
              },
              {
                "begin": 4905,
                "end": 4923,
                "name": "ADD",
                "source": 1
              },
              {
                "begin": 23252,
                "end": 23302,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "26"
              },
              {
                "begin": 4730,
                "end": 5075,
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 23202,
                "end": 23317,
                "name": "tag",
                "source": 0,
                "value": "55"
              },
              {
                "begin": 23202,
                "end": 23317,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "A0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SUB",
                "source": -1
              },
              {
                "begin": 23437,
                "end": 23452,
                "name": "DUP5",
                "source": 0
              },
              {
                "begin": 23437,
                "end": 23452,
                "name": "AND",
                "source": 0
              },
              {
                "begin": 23437,
                "end": 23446,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 23437,
                "end": 23452,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 23437,
                "end": 23452,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 23437,
                "end": 23452,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 23437,
                "end": 23452,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              {
                "begin": 23437,
                "end": 23452,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 23437,
                "end": 23452,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 23437,
                "end": 23452,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 23437,
                "end": 23452,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              {
                "begin": 23437,
                "end": 23452,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 23437,
                "end": 23452,
                "name": "KECCAK256",
                "source": 0
              },
              {
                "begin": 23455,
                "end": 23474,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 23455,
                "end": 23474,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 23455,
                "end": 23474,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 23455,
                "end": 23474,
                "name": "SUB",
                "source": 0
              },
              {
                "begin": 23437,
                "end": 23474,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 23437,
                "end": 23474,
                "name": "SSTORE",
                "source": 0
              },
              {
                "begin": 22959,
                "end": 23499,
                "name": "tag",
                "source": 0,
                "value": "54"
              },
              {
                "begin": 22959,
                "end": 23499,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "A0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SUB",
                "source": -1
              },
              {
                "begin": 23513,
                "end": 23529,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 23513,
                "end": 23529,
                "name": "AND",
                "source": 0
              },
              {
                "begin": 23509,
                "end": 23934,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "58"
              },
              {
                "begin": 23509,
                "end": 23934,
                "name": "JUMPI",
                "source": 0
              },
              {
                "begin": 23676,
                "end": 23688,
                "name": "PUSH",
                "source": 0,
                "value": "2"
              },
              {
                "begin": 23676,
                "end": 23697,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 23676,
                "end": 23697,
                "name": "SLOAD",
                "source": 0
              },
              {
                "begin": 23676,
                "end": 23697,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 23676,
                "end": 23697,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 23676,
                "end": 23697,
                "name": "SUB",
                "source": 0
              },
              {
                "begin": 23676,
                "end": 23697,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 23676,
                "end": 23697,
                "name": "SSTORE",
                "source": 0
              },
              {
                "begin": 23509,
                "end": 23934,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "59"
              },
              {
                "begin": 23509,
                "end": 23934,
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 23509,
                "end": 23934,
                "name": "tag",
                "source": 0,
                "value": "58"
              },
              {
                "begin": 23509,
                "end": 23934,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "A0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SUB",
                "source": -1
              },
              {
                "begin": 23887,
                "end": 23900,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 23887,
                "end": 23900,
                "name": "AND",
                "source": 0
              },
              {
                "begin": 23887,
                "end": 23896,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 23887,
                "end": 23900,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 23887,
                "end": 23900,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 23887,
                "end": 23900,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 23887,
                "end": 23900,
                "name": "PUSH",
                "source": 0,
                "value": "20"
              },
              {
                "begin": 23887,
                "end": 23900,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": 23887,
                "end": 23900,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 23887,
                "end": 23900,
                "name": "MSTORE",
                "source": 0
              },
              {
                "begin": 23887,
                "end": 23900,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              {
                "begin": 23887,
                "end": 23900,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 23887,
                "end": 23900,
                "name": "KECCAK256",
                "source": 0
              },
              {
                "begin": 23887,
                "end": 23909,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 23887,
                "end": 23909,
                "name": "SLOAD",
                "source": 0
              },
              {
                "begin": 23887,
                "end": 23909,
                "name": "DUP3",
                "source": 0
              },
              {
                "begin": 23887,
                "end": 23909,
                "name": "ADD",
                "source": 0
              },
              {
                "begin": 23887,
                "end": 23909,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 23887,
                "end": 23909,
                "name": "SSTORE",
                "source": 0
              },
              {
                "begin": 23509,
                "end": 23934,
                "name": "tag",
                "source": 0,
                "value": "59"
              },
              {
                "begin": 23509,
                "end": 23934,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 23964,
                "end": 23966,
                "name": "DUP2",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "A0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SUB",
                "source": -1
              },
              {
                "begin": 23949,
                "end": 23974,
                "name": "AND",
                "source": 0
              },
              {
                "begin": 23958,
                "end": 23962,
                "name": "DUP4",
                "source": 0
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "A0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SUB",
                "source": -1
              },
              {
                "begin": 23949,
                "end": 23974,
                "name": "AND",
                "source": 0
              },
              {
                "begin": 23949,
                "end": 23974,
                "name": "PUSH",
                "source": 0,
                "value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
              },
              {
                "begin": 23968,
                "end": 23973,
                "name": "DUP4",
                "source": 0
              },
              {
                "begin": 23949,
                "end": 23974,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              {
                "begin": 23949,
                "end": 23974,
                "name": "MLOAD",
                "source": 0
              },
              {
                "begin": 23949,
                "end": 23974,
                "name": "PUSH [tag]",
                "source": 0,
                "value": "60"
              },
              {
                "begin": 23949,
                "end": 23974,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 5226,
                "end": 5251,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 5226,
                "end": 5251,
                "name": "MSTORE",
                "source": 1
              },
              {
                "begin": 5214,
                "end": 5216,
                "name": "PUSH",
                "source": 1,
                "value": "20"
              },
              {
                "begin": 5199,
                "end": 5217,
                "name": "ADD",
                "source": 1
              },
              {
                "begin": 5199,
                "end": 5217,
                "name": "SWAP1",
                "source": 1
              },
              {
                "begin": 5080,
                "end": 5257,
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 23949,
                "end": 23974,
                "name": "tag",
                "source": 0,
                "value": "60"
              },
              {
                "begin": 23949,
                "end": 23974,
                "name": "JUMPDEST",
                "source": 0
              },
              {
                "begin": 23949,
                "end": 23974,
                "name": "PUSH",
                "source": 0,
                "value": "40"
              },
              {
                "begin": 23949,
                "end": 23974,
                "name": "MLOAD",
                "source": 0
              },
              {
                "begin": 23949,
                "end": 23974,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 23949,
                "end": 23974,
                "name": "SWAP2",
                "source": 0
              },
              {
                "begin": 23949,
                "end": 23974,
                "name": "SUB",
                "source": 0
              },
              {
                "begin": 23949,
                "end": 23974,
                "name": "SWAP1",
                "source": 0
              },
              {
                "begin": 23949,
                "end": 23974,
                "name": "LOG3",
                "source": 0
              },
              {
                "begin": 22874,
                "end": 23981,
                "name": "POP",
                "source": 0
              },
              {
                "begin": 22874,
                "end": 23981,
                "name": "POP",
                "source": 0
              },
              {
                "begin": 22874,
                "end": 23981,
                "name": "POP",
                "source": 0
              },
              {
                "begin": 22874,
                "end": 23981,
                "jumpType": "[out]",
                "name": "JUMP",
                "source": 0
              },
              {
                "begin": 14,
                "end": 141,
                "name": "tag",
                "source": 1,
                "value": "62"
              },
              {
                "begin": 14,
                "end": 141,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 75,
                "end": 85,
                "name": "PUSH",
                "source": 1,
                "value": "4E487B71"
              },
              {
                "begin": 70,
                "end": 73,
                "name": "PUSH",
                "source": 1,
                "value": "E0"
              },
              {
                "begin": 66,
                "end": 86,
                "name": "SHL",
                "source": 1
              },
              {
                "begin": 63,
                "end": 64,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              {
                "begin": 56,
                "end": 87,
                "name": "MSTORE",
                "source": 1
              },
              {
                "begin": 106,
                "end": 110,
                "name": "PUSH",
                "source": 1,
                "value": "41"
              },
              {
                "begin": 103,
                "end": 104,
                "name": "PUSH",
                "source": 1,
                "value": "4"
              },
              {
                "begin": 96,
                "end": 111,
                "name": "MSTORE",
                "source": 1
              },
              {
                "begin": 130,
                "end": 134,
                "name": "PUSH",
                "source": 1,
                "value": "24"
              },
              {
                "begin": 127,
                "end": 128,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              {
                "begin": 120,
                "end": 135,
                "name": "REVERT",
                "source": 1
              },
              {
                "begin": 146,
                "end": 526,
                "name": "tag",
                "source": 1,
                "value": "10"
              },
              {
                "begin": 146,
                "end": 526,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 225,
                "end": 226,
                "name": "PUSH",
                "source": 1,
                "value": "1"
              },
              {
                "begin": 221,
                "end": 233,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 221,
                "end": 233,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 221,
                "end": 233,
                "name": "SHR",
                "source": 1
              },
              {
                "begin": 221,
                "end": 233,
                "name": "SWAP1",
                "source": 1
              },
              {
                "begin": 268,
                "end": 280,
                "name": "DUP3",
                "source": 1
              },
              {
                "begin": 268,
                "end": 280,
                "name": "AND",
                "source": 1
              },
              {
                "begin": 268,
                "end": 280,
                "name": "DUP1",
                "source": 1
              },
              {
                "begin": 289,
                "end": 350,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "72"
              },
              {
                "begin": 289,
                "end": 350,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": 343,
                "end": 347,
                "name": "PUSH",
                "source": 1,
                "value": "7F"
              },
              {
                "begin": 335,
                "end": 341,
                "name": "DUP3",
                "source": 1
              },
              {
                "begin": 331,
                "end": 348,
                "name": "AND",
                "source": 1
              },
              {
                "begin": 321,
                "end": 348,
                "name": "SWAP2",
                "source": 1
              },
              {
                "begin": 321,
                "end": 348,
                "name": "POP",
                "source": 1
              },
              {
                "begin": 289,
                "end": 350,
                "name": "tag",
                "source": 1,
                "value": "72"
              },
              {
                "begin": 289,
                "end": 350,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 396,
                "end": 398,
                "name": "PUSH",
                "source": 1,
                "value": "20"
              },
              {
                "begin": 388,
                "end": 394,
                "name": "DUP3",
                "source": 1
              },
              {
                "begin": 385,
                "end": 399,
                "name": "LT",
                "source": 1
              },
              {
                "begin": 365,
                "end": 383,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 362,
                "end": 400,
                "name": "SUB",
                "source": 1
              },
              {
                "begin": 359,
                "end": 520,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "73"
              },
              {
                "begin": 359,
                "end": 520,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": 442,
                "end": 452,
                "name": "PUSH",
                "source": 1,
                "value": "4E487B71"
              },
              {
                "begin": 437,
                "end": 440,
                "name": "PUSH",
                "source": 1,
                "value": "E0"
              },
              {
                "begin": 433,
                "end": 453,
                "name": "SHL",
                "source": 1
              },
              {
                "begin": 430,
                "end": 431,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              {
                "begin": 423,
                "end": 454,
                "name": "MSTORE",
                "source": 1
              },
              {
                "begin": 477,
                "end": 481,
                "name": "PUSH",
                "source": 1,
                "value": "22"
              },
              {
                "begin": 474,
                "end": 475,
                "name": "PUSH",
                "source": 1,
                "value": "4"
              },
              {
                "begin": 467,
                "end": 482,
                "name": "MSTORE",
                "source": 1
              },
              {
                "begin": 505,
                "end": 509,
                "name": "PUSH",
                "source": 1,
                "value": "24"
              },
              {
                "begin": 502,
                "end": 503,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              {
                "begin": 495,
                "end": 510,
                "name": "REVERT",
                "source": 1
              },
              {
                "begin": 359,
                "end": 520,
                "name": "tag",
                "source": 1,
                "value": "73"
              },
              {
                "begin": 359,
                "end": 520,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 359,
                "end": 520,
                "name": "POP",
                "source": 1
              },
              {
                "begin": 146,
                "end": 526,
                "name": "SWAP2",
                "source": 1
              },
              {
                "begin": 146,
                "end": 526,
                "name": "SWAP1",
                "source": 1
              },
              {
                "begin": 146,
                "end": 526,
                "name": "POP",
                "source": 1
              },
              {
                "begin": 146,
                "end": 526,
                "jumpType": "[out]",
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 657,
                "end": 1175,
                "name": "tag",
                "source": 1,
                "value": "64"
              },
              {
                "begin": 657,
                "end": 1175,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 759,
                "end": 761,
                "name": "PUSH",
                "source": 1,
                "value": "1F"
              },
              {
                "begin": 754,
                "end": 757,
                "name": "DUP3",
                "source": 1
              },
              {
                "begin": 751,
                "end": 762,
                "name": "GT",
                "source": 1
              },
              {
                "begin": 748,
                "end": 1169,
                "name": "ISZERO",
                "source": 1
              },
              {
                "begin": 748,
                "end": 1169,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "76"
              },
              {
                "begin": 748,
                "end": 1169,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": 795,
                "end": 800,
                "name": "DUP1",
                "source": 1
              },
              {
                "begin": 792,
                "end": 793,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              {
                "begin": 785,
                "end": 801,
                "name": "MSTORE",
                "source": 1
              },
              {
                "begin": 839,
                "end": 843,
                "name": "PUSH",
                "source": 1,
                "value": "20"
              },
              {
                "begin": 836,
                "end": 837,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              {
                "begin": 826,
                "end": 844,
                "name": "KECCAK256",
                "source": 1
              },
              {
                "begin": 909,
                "end": 911,
                "name": "PUSH",
                "source": 1,
                "value": "1F"
              },
              {
                "begin": 897,
                "end": 907,
                "name": "DUP5",
                "source": 1
              },
              {
                "begin": 893,
                "end": 912,
                "name": "ADD",
                "source": 1
              },
              {
                "begin": 890,
                "end": 891,
                "name": "PUSH",
                "source": 1,
                "value": "5"
              },
              {
                "begin": 886,
                "end": 913,
                "name": "SHR",
                "source": 1
              },
              {
                "begin": 880,
                "end": 884,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 876,
                "end": 914,
                "name": "ADD",
                "source": 1
              },
              {
                "begin": 945,
                "end": 949,
                "name": "PUSH",
                "source": 1,
                "value": "20"
              },
              {
                "begin": 933,
                "end": 943,
                "name": "DUP6",
                "source": 1
              },
              {
                "begin": 930,
                "end": 950,
                "name": "LT",
                "source": 1
              },
              {
                "begin": 927,
                "end": 974,
                "name": "ISZERO",
                "source": 1
              },
              {
                "begin": 927,
                "end": 974,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "77"
              },
              {
                "begin": 927,
                "end": 974,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": 968,
                "end": 972,
                "name": "DUP1",
                "source": 1
              },
              {
                "begin": 927,
                "end": 974,
                "name": "tag",
                "source": 1,
                "value": "77"
              },
              {
                "begin": 927,
                "end": 974,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 1023,
                "end": 1025,
                "name": "PUSH",
                "source": 1,
                "value": "1F"
              },
              {
                "begin": 1018,
                "end": 1021,
                "name": "DUP5",
                "source": 1
              },
              {
                "begin": 1014,
                "end": 1026,
                "name": "ADD",
                "source": 1
              },
              {
                "begin": 1011,
                "end": 1012,
                "name": "PUSH",
                "source": 1,
                "value": "5"
              },
              {
                "begin": 1007,
                "end": 1027,
                "name": "SHR",
                "source": 1
              },
              {
                "begin": 1001,
                "end": 1005,
                "name": "DUP3",
                "source": 1
              },
              {
                "begin": 997,
                "end": 1028,
                "name": "ADD",
                "source": 1
              },
              {
                "begin": 987,
                "end": 1028,
                "name": "SWAP2",
                "source": 1
              },
              {
                "begin": 987,
                "end": 1028,
                "name": "POP",
                "source": 1
              },
              {
                "begin": 1078,
                "end": 1159,
                "name": "tag",
                "source": 1,
                "value": "78"
              },
              {
                "begin": 1078,
                "end": 1159,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 1096,
                "end": 1098,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 1089,
                "end": 1094,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 1086,
                "end": 1099,
                "name": "LT",
                "source": 1
              },
              {
                "begin": 1078,
                "end": 1159,
                "name": "ISZERO",
                "source": 1
              },
              {
                "begin": 1078,
                "end": 1159,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "80"
              },
              {
                "begin": 1078,
                "end": 1159,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": 1155,
                "end": 1156,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              {
                "begin": 1141,
                "end": 1157,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 1141,
                "end": 1157,
                "name": "SSTORE",
                "source": 1
              },
              {
                "begin": 1122,
                "end": 1123,
                "name": "PUSH",
                "source": 1,
                "value": "1"
              },
              {
                "begin": 1111,
                "end": 1124,
                "name": "ADD",
                "source": 1
              },
              {
                "begin": 1078,
                "end": 1159,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "78"
              },
              {
                "begin": 1078,
                "end": 1159,
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 1078,
                "end": 1159,
                "name": "tag",
                "source": 1,
                "value": "80"
              },
              {
                "begin": 1078,
                "end": 1159,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 1082,
                "end": 1085,
                "name": "POP",
                "source": 1
              },
              {
                "begin": 1082,
                "end": 1085,
                "name": "POP",
                "source": 1
              },
              {
                "begin": 748,
                "end": 1169,
                "name": "tag",
                "source": 1,
                "value": "76"
              },
              {
                "begin": 748,
                "end": 1169,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 657,
                "end": 1175,
                "name": "POP",
                "source": 1
              },
              {
                "begin": 657,
                "end": 1175,
                "name": "POP",
                "source": 1
              },
              {
                "begin": 657,
                "end": 1175,
                "name": "POP",
                "source": 1
              },
              {
                "begin": 657,
                "end": 1175,
                "jumpType": "[out]",
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 1351,
                "end": 2650,
                "name": "tag",
                "source": 1,
                "value": "2"
              },
              {
                "begin": 1351,
                "end": 2650,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 1471,
                "end": 1481,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 1471,
                "end": 1481,
                "name": "MLOAD",
                "source": 1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "40"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SHL",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "SUB",
                "source": -1
              },
              {
                "begin": 1493,
                "end": 1523,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 1493,
                "end": 1523,
                "name": "GT",
                "source": 1
              },
              {
                "begin": 1490,
                "end": 1546,
                "name": "ISZERO",
                "source": 1
              },
              {
                "begin": 1490,
                "end": 1546,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "84"
              },
              {
                "begin": 1490,
                "end": 1546,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": 1526,
                "end": 1544,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "84"
              },
              {
                "begin": 1526,
                "end": 1544,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "62"
              },
              {
                "begin": 1526,
                "end": 1544,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 1526,
                "end": 1544,
                "name": "tag",
                "source": 1,
                "value": "84"
              },
              {
                "begin": 1526,
                "end": 1544,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 1555,
                "end": 1652,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "85"
              },
              {
                "begin": 1645,
                "end": 1651,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 1605,
                "end": 1643,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "86"
              },
              {
                "begin": 1637,
                "end": 1641,
                "name": "DUP5",
                "source": 1
              },
              {
                "begin": 1631,
                "end": 1642,
                "name": "SLOAD",
                "source": 1
              },
              {
                "begin": 1605,
                "end": 1643,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "10"
              },
              {
                "begin": 1605,
                "end": 1643,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 1605,
                "end": 1643,
                "name": "tag",
                "source": 1,
                "value": "86"
              },
              {
                "begin": 1605,
                "end": 1643,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 1599,
                "end": 1603,
                "name": "DUP5",
                "source": 1
              },
              {
                "begin": 1555,
                "end": 1652,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "64"
              },
              {
                "begin": 1555,
                "end": 1652,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 1555,
                "end": 1652,
                "name": "tag",
                "source": 1,
                "value": "85"
              },
              {
                "begin": 1555,
                "end": 1652,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 1701,
                "end": 1705,
                "name": "PUSH",
                "source": 1,
                "value": "20"
              },
              {
                "begin": 1732,
                "end": 1734,
                "name": "PUSH",
                "source": 1,
                "value": "1F"
              },
              {
                "begin": 1721,
                "end": 1735,
                "name": "DUP3",
                "source": 1
              },
              {
                "begin": 1721,
                "end": 1735,
                "name": "GT",
                "source": 1
              },
              {
                "begin": 1749,
                "end": 1750,
                "name": "PUSH",
                "source": 1,
                "value": "1"
              },
              {
                "begin": 1744,
                "end": 2393,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 1744,
                "end": 2393,
                "name": "EQ",
                "source": 1
              },
              {
                "begin": 1744,
                "end": 2393,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "88"
              },
              {
                "begin": 1744,
                "end": 2393,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": 2437,
                "end": 2438,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              {
                "begin": 2454,
                "end": 2460,
                "name": "DUP4",
                "source": 1
              },
              {
                "begin": 2451,
                "end": 2540,
                "name": "ISZERO",
                "source": 1
              },
              {
                "begin": 2451,
                "end": 2540,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "89"
              },
              {
                "begin": 2451,
                "end": 2540,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": 2506,
                "end": 2525,
                "name": "DUP5",
                "source": 1
              },
              {
                "begin": 2506,
                "end": 2525,
                "name": "DUP3",
                "source": 1
              },
              {
                "begin": 2506,
                "end": 2525,
                "name": "ADD",
                "source": 1
              },
              {
                "begin": 2500,
                "end": 2526,
                "name": "MLOAD",
                "source": 1
              },
              {
                "begin": 2451,
                "end": 2540,
                "name": "tag",
                "source": 1,
                "value": "89"
              },
              {
                "begin": 2451,
                "end": 2540,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "NOT",
                "source": -1
              },
              {
                "begin": 1308,
                "end": 1309,
                "name": "PUSH",
                "source": 1,
                "value": "3"
              },
              {
                "begin": 1304,
                "end": 1315,
                "name": "DUP6",
                "source": 1
              },
              {
                "begin": 1304,
                "end": 1315,
                "name": "SWAP1",
                "source": 1
              },
              {
                "begin": 1304,
                "end": 1315,
                "name": "SHL",
                "source": 1
              },
              {
                "begin": 1300,
                "end": 1324,
                "name": "SHR",
                "source": 1
              },
              {
                "begin": 1296,
                "end": 1325,
                "name": "NOT",
                "source": 1
              },
              {
                "begin": 1286,
                "end": 1326,
                "name": "AND",
                "source": 1
              },
              {
                "begin": 1332,
                "end": 1333,
                "name": "PUSH",
                "source": 1,
                "value": "1"
              },
              {
                "begin": 1328,
                "end": 1339,
                "name": "DUP5",
                "source": 1
              },
              {
                "begin": 1328,
                "end": 1339,
                "name": "SWAP1",
                "source": 1
              },
              {
                "begin": 1328,
                "end": 1339,
                "name": "SHL",
                "source": 1
              },
              {
                "begin": 1283,
                "end": 1340,
                "name": "OR",
                "source": 1
              },
              {
                "begin": 2553,
                "end": 2634,
                "name": "DUP5",
                "source": 1
              },
              {
                "begin": 2553,
                "end": 2634,
                "name": "SSTORE",
                "source": 1
              },
              {
                "begin": 1714,
                "end": 2644,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "80"
              },
              {
                "begin": 1714,
                "end": 2644,
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 1744,
                "end": 2393,
                "name": "tag",
                "source": 1,
                "value": "88"
              },
              {
                "begin": 1744,
                "end": 2393,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 604,
                "end": 605,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              {
                "begin": 597,
                "end": 611,
                "name": "DUP5",
                "source": 1
              },
              {
                "begin": 597,
                "end": 611,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 597,
                "end": 611,
                "name": "MSTORE",
                "source": 1
              },
              {
                "begin": 641,
                "end": 645,
                "name": "PUSH",
                "source": 1,
                "value": "20"
              },
              {
                "begin": 628,
                "end": 646,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 628,
                "end": 646,
                "name": "KECCAK256",
                "source": 1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "1F"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "NOT",
                "source": -1
              },
              {
                "begin": 1780,
                "end": 1800,
                "name": "DUP6",
                "source": 1
              },
              {
                "begin": 1780,
                "end": 1800,
                "name": "AND",
                "source": 1
              },
              {
                "begin": 1780,
                "end": 1800,
                "name": "SWAP2",
                "source": 1
              },
              {
                "begin": 1898,
                "end": 2120,
                "name": "tag",
                "source": 1,
                "value": "92"
              },
              {
                "begin": 1898,
                "end": 2120,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 1912,
                "end": 1919,
                "name": "DUP3",
                "source": 1
              },
              {
                "begin": 1909,
                "end": 1910,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 1906,
                "end": 1920,
                "name": "LT",
                "source": 1
              },
              {
                "begin": 1898,
                "end": 2120,
                "name": "ISZERO",
                "source": 1
              },
              {
                "begin": 1898,
                "end": 2120,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "94"
              },
              {
                "begin": 1898,
                "end": 2120,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": 1994,
                "end": 2013,
                "name": "DUP8",
                "source": 1
              },
              {
                "begin": 1994,
                "end": 2013,
                "name": "DUP6",
                "source": 1
              },
              {
                "begin": 1994,
                "end": 2013,
                "name": "ADD",
                "source": 1
              },
              {
                "begin": 1988,
                "end": 2014,
                "name": "MLOAD",
                "source": 1
              },
              {
                "begin": 1973,
                "end": 2015,
                "name": "DUP3",
                "source": 1
              },
              {
                "begin": 1973,
                "end": 2015,
                "name": "SSTORE",
                "source": 1
              },
              {
                "begin": 2101,
                "end": 2105,
                "name": "PUSH",
                "source": 1,
                "value": "20"
              },
              {
                "begin": 2086,
                "end": 2106,
                "name": "SWAP5",
                "source": 1
              },
              {
                "begin": 2086,
                "end": 2106,
                "name": "DUP6",
                "source": 1
              },
              {
                "begin": 2086,
                "end": 2106,
                "name": "ADD",
                "source": 1
              },
              {
                "begin": 2086,
                "end": 2106,
                "name": "SWAP5",
                "source": 1
              },
              {
                "begin": 2054,
                "end": 2055,
                "name": "PUSH",
                "source": 1,
                "value": "1"
              },
              {
                "begin": 2042,
                "end": 2056,
                "name": "SWAP1",
                "source": 1
              },
              {
                "begin": 2042,
                "end": 2056,
                "name": "SWAP3",
                "source": 1
              },
              {
                "begin": 2042,
                "end": 2056,
                "name": "ADD",
                "source": 1
              },
              {
                "begin": 2042,
                "end": 2056,
                "name": "SWAP2",
                "source": 1
              },
              {
                "begin": 1928,
                "end": 1940,
                "name": "ADD",
                "source": 1
              },
              {
                "begin": 1898,
                "end": 2120,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "92"
              },
              {
                "begin": 1898,
                "end": 2120,
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 1898,
                "end": 2120,
                "name": "tag",
                "source": 1,
                "value": "94"
              },
              {
                "begin": 1898,
                "end": 2120,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 1902,
                "end": 1905,
                "name": "POP",
                "source": 1
              },
              {
                "begin": 2148,
                "end": 2154,
                "name": "DUP5",
                "source": 1
              },
              {
                "begin": 2139,
                "end": 2146,
                "name": "DUP3",
                "source": 1
              },
              {
                "begin": 2136,
                "end": 2155,
                "name": "LT",
                "source": 1
              },
              {
                "begin": 2133,
                "end": 2334,
                "name": "ISZERO",
                "source": 1
              },
              {
                "begin": 2133,
                "end": 2334,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "95"
              },
              {
                "begin": 2133,
                "end": 2334,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": 2209,
                "end": 2228,
                "name": "DUP7",
                "source": 1
              },
              {
                "begin": 2209,
                "end": 2228,
                "name": "DUP5",
                "source": 1
              },
              {
                "begin": 2209,
                "end": 2228,
                "name": "ADD",
                "source": 1
              },
              {
                "begin": 2203,
                "end": 2229,
                "name": "MLOAD",
                "source": 1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "NOT",
                "source": -1
              },
              {
                "begin": 2292,
                "end": 2293,
                "name": "PUSH",
                "source": 1,
                "value": "3"
              },
              {
                "begin": 2288,
                "end": 2302,
                "name": "DUP8",
                "source": 1
              },
              {
                "begin": 2288,
                "end": 2302,
                "name": "SWAP1",
                "source": 1
              },
              {
                "begin": 2288,
                "end": 2302,
                "name": "SHL",
                "source": 1
              },
              {
                "begin": 2304,
                "end": 2307,
                "name": "PUSH",
                "source": 1,
                "value": "F8"
              },
              {
                "begin": 2284,
                "end": 2308,
                "name": "AND",
                "source": 1
              },
              {
                "begin": 2280,
                "end": 2317,
                "name": "SHR",
                "source": 1
              },
              {
                "begin": 2276,
                "end": 2318,
                "name": "NOT",
                "source": 1
              },
              {
                "begin": 2261,
                "end": 2319,
                "name": "AND",
                "source": 1
              },
              {
                "begin": 2246,
                "end": 2320,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 2246,
                "end": 2320,
                "name": "SSTORE",
                "source": 1
              },
              {
                "begin": 2133,
                "end": 2334,
                "name": "tag",
                "source": 1,
                "value": "95"
              },
              {
                "begin": 2133,
                "end": 2334,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": 2380,
                "end": 2381,
                "name": "PUSH",
                "source": 1,
                "value": "1"
              },
              {
                "begin": 2364,
                "end": 2378,
                "name": "SWAP1",
                "source": 1
              },
              {
                "begin": 2364,
                "end": 2378,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 2364,
                "end": 2378,
                "name": "SHL",
                "source": 1
              },
              {
                "begin": 2360,
                "end": 2382,
                "name": "ADD",
                "source": 1
              },
              {
                "begin": 2347,
                "end": 2383,
                "name": "SWAP1",
                "source": 1
              },
              {
                "begin": 2347,
                "end": 2383,
                "name": "SSTORE",
                "source": 1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": 1351,
                "end": 2650,
                "jumpType": "[out]",
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 2863,
                "end": 2990,
                "name": "tag",
                "source": 1,
                "value": "66"
              },
              {
                "begin": 2863,
                "end": 2990,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 2924,
                "end": 2934,
                "name": "PUSH",
                "source": 1,
                "value": "4E487B71"
              },
              {
                "begin": 2919,
                "end": 2922,
                "name": "PUSH",
                "source": 1,
                "value": "E0"
              },
              {
                "begin": 2915,
                "end": 2935,
                "name": "SHL",
                "source": 1
              },
              {
                "begin": 2912,
                "end": 2913,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              {
                "begin": 2905,
                "end": 2936,
                "name": "MSTORE",
                "source": 1
              },
              {
                "begin": 2955,
                "end": 2959,
                "name": "PUSH",
                "source": 1,
                "value": "11"
              },
              {
                "begin": 2952,
                "end": 2953,
                "name": "PUSH",
                "source": 1,
                "value": "4"
              },
              {
                "begin": 2945,
                "end": 2960,
                "name": "MSTORE",
                "source": 1
              },
              {
                "begin": 2979,
                "end": 2983,
                "name": "PUSH",
                "source": 1,
                "value": "24"
              },
              {
                "begin": 2976,
                "end": 2977,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              {
                "begin": 2969,
                "end": 2984,
                "name": "REVERT",
                "source": 1
              },
              {
                "begin": 2995,
                "end": 3370,
                "name": "tag",
                "source": 1,
                "value": "67"
              },
              {
                "begin": 2995,
                "end": 3370,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 3083,
                "end": 3084,
                "name": "PUSH",
                "source": 1,
                "value": "1"
              },
              {
                "begin": 3101,
                "end": 3106,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 3115,
                "end": 3364,
                "name": "tag",
                "source": 1,
                "value": "99"
              },
              {
                "begin": 3115,
                "end": 3364,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 3136,
                "end": 3137,
                "name": "PUSH",
                "source": 1,
                "value": "1"
              },
              {
                "begin": 3126,
                "end": 3134,
                "name": "DUP5",
                "source": 1
              },
              {
                "begin": 3123,
                "end": 3138,
                "name": "GT",
                "source": 1
              },
              {
                "begin": 3115,
                "end": 3364,
                "name": "ISZERO",
                "source": 1
              },
              {
                "begin": 3115,
                "end": 3364,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "101"
              },
              {
                "begin": 3115,
                "end": 3364,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": 3186,
                "end": 3190,
                "name": "DUP1",
                "source": 1
              },
              {
                "begin": 3181,
                "end": 3184,
                "name": "DUP6",
                "source": 1
              },
              {
                "begin": 3177,
                "end": 3191,
                "name": "DIV",
                "source": 1
              },
              {
                "begin": 3171,
                "end": 3175,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 3168,
                "end": 3192,
                "name": "GT",
                "source": 1
              },
              {
                "begin": 3165,
                "end": 3215,
                "name": "ISZERO",
                "source": 1
              },
              {
                "begin": 3165,
                "end": 3215,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "103"
              },
              {
                "begin": 3165,
                "end": 3215,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": 3195,
                "end": 3213,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "103"
              },
              {
                "begin": 3195,
                "end": 3213,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "66"
              },
              {
                "begin": 3195,
                "end": 3213,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 3195,
                "end": 3213,
                "name": "tag",
                "source": 1,
                "value": "103"
              },
              {
                "begin": 3195,
                "end": 3213,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 3245,
                "end": 3246,
                "name": "PUSH",
                "source": 1,
                "value": "1"
              },
              {
                "begin": 3235,
                "end": 3243,
                "name": "DUP5",
                "source": 1
              },
              {
                "begin": 3231,
                "end": 3247,
                "name": "AND",
                "source": 1
              },
              {
                "begin": 3228,
                "end": 3277,
                "name": "ISZERO",
                "source": 1
              },
              {
                "begin": 3228,
                "end": 3277,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "104"
              },
              {
                "begin": 3228,
                "end": 3277,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": 3259,
                "end": 3275,
                "name": "SWAP1",
                "source": 1
              },
              {
                "begin": 3259,
                "end": 3275,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 3259,
                "end": 3275,
                "name": "MUL",
                "source": 1
              },
              {
                "begin": 3259,
                "end": 3275,
                "name": "SWAP1",
                "source": 1
              },
              {
                "begin": 3228,
                "end": 3277,
                "name": "tag",
                "source": 1,
                "value": "104"
              },
              {
                "begin": 3228,
                "end": 3277,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 3342,
                "end": 3343,
                "name": "PUSH",
                "source": 1,
                "value": "1"
              },
              {
                "begin": 3338,
                "end": 3354,
                "name": "SWAP4",
                "source": 1
              },
              {
                "begin": 3338,
                "end": 3354,
                "name": "SWAP1",
                "source": 1
              },
              {
                "begin": 3338,
                "end": 3354,
                "name": "SWAP4",
                "source": 1
              },
              {
                "begin": 3338,
                "end": 3354,
                "name": "SHR",
                "source": 1
              },
              {
                "begin": 3338,
                "end": 3354,
                "name": "SWAP3",
                "source": 1
              },
              {
                "begin": 3298,
                "end": 3313,
                "name": "DUP1",
                "source": 1
              },
              {
                "begin": 3298,
                "end": 3313,
                "name": "MUL",
                "source": 1
              },
              {
                "begin": 3115,
                "end": 3364,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "99"
              },
              {
                "begin": 3115,
                "end": 3364,
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 3115,
                "end": 3364,
                "name": "tag",
                "source": 1,
                "value": "101"
              },
              {
                "begin": 3115,
                "end": 3364,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 2995,
                "end": 3370,
                "name": "SWAP4",
                "source": 1
              },
              {
                "begin": 2995,
                "end": 3370,
                "name": "POP",
                "source": 1
              },
              {
                "begin": 2995,
                "end": 3370,
                "name": "SWAP4",
                "source": 1
              },
              {
                "begin": 2995,
                "end": 3370,
                "name": "SWAP2",
                "source": 1
              },
              {
                "begin": 2995,
                "end": 3370,
                "name": "POP",
                "source": 1
              },
              {
                "begin": 2995,
                "end": 3370,
                "name": "POP",
                "source": 1
              },
              {
                "begin": 2995,
                "end": 3370,
                "jumpType": "[out]",
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 3375,
                "end": 4277,
                "name": "tag",
                "source": 1,
                "value": "68"
              },
              {
                "begin": 3375,
                "end": 4277,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 3424,
                "end": 3429,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              {
                "begin": 3454,
                "end": 3462,
                "name": "DUP3",
                "source": 1
              },
              {
                "begin": 3444,
                "end": 3524,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "106"
              },
              {
                "begin": 3444,
                "end": 3524,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": 3495,
                "end": 3496,
                "name": "PUSH",
                "source": 1,
                "value": "1"
              },
              {
                "begin": 3509,
                "end": 3514,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "105"
              },
              {
                "begin": 3509,
                "end": 3514,
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 3444,
                "end": 3524,
                "name": "tag",
                "source": 1,
                "value": "106"
              },
              {
                "begin": 3444,
                "end": 3524,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 3543,
                "end": 3547,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 3533,
                "end": 3609,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "107"
              },
              {
                "begin": 3533,
                "end": 3609,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": 3580,
                "end": 3581,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              {
                "begin": 3594,
                "end": 3599,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "105"
              },
              {
                "begin": 3594,
                "end": 3599,
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 3533,
                "end": 3609,
                "name": "tag",
                "source": 1,
                "value": "107"
              },
              {
                "begin": 3533,
                "end": 3609,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 3625,
                "end": 3629,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 3643,
                "end": 3644,
                "name": "PUSH",
                "source": 1,
                "value": "1"
              },
              {
                "begin": 3638,
                "end": 3697,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 3638,
                "end": 3697,
                "name": "EQ",
                "source": 1
              },
              {
                "begin": 3638,
                "end": 3697,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "109"
              },
              {
                "begin": 3638,
                "end": 3697,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": 3711,
                "end": 3712,
                "name": "PUSH",
                "source": 1,
                "value": "2"
              },
              {
                "begin": 3706,
                "end": 3880,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 3706,
                "end": 3880,
                "name": "EQ",
                "source": 1
              },
              {
                "begin": 3706,
                "end": 3880,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "110"
              },
              {
                "begin": 3706,
                "end": 3880,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": 3618,
                "end": 3880,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "108"
              },
              {
                "begin": 3618,
                "end": 3880,
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 3638,
                "end": 3697,
                "name": "tag",
                "source": 1,
                "value": "109"
              },
              {
                "begin": 3638,
                "end": 3697,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 3668,
                "end": 3669,
                "name": "PUSH",
                "source": 1,
                "value": "1"
              },
              {
                "begin": 3659,
                "end": 3669,
                "name": "SWAP2",
                "source": 1
              },
              {
                "begin": 3659,
                "end": 3669,
                "name": "POP",
                "source": 1
              },
              {
                "begin": 3682,
                "end": 3687,
                "name": "POP",
                "source": 1
              },
              {
                "begin": 3682,
                "end": 3687,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "105"
              },
              {
                "begin": 3682,
                "end": 3687,
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 3706,
                "end": 3880,
                "name": "tag",
                "source": 1,
                "value": "110"
              },
              {
                "begin": 3706,
                "end": 3880,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 3743,
                "end": 3746,
                "name": "PUSH",
                "source": 1,
                "value": "FF"
              },
              {
                "begin": 3733,
                "end": 3741,
                "name": "DUP5",
                "source": 1
              },
              {
                "begin": 3730,
                "end": 3747,
                "name": "GT",
                "source": 1
              },
              {
                "begin": 3727,
                "end": 3770,
                "name": "ISZERO",
                "source": 1
              },
              {
                "begin": 3727,
                "end": 3770,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "112"
              },
              {
                "begin": 3727,
                "end": 3770,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": 3750,
                "end": 3768,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "112"
              },
              {
                "begin": 3750,
                "end": 3768,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "66"
              },
              {
                "begin": 3750,
                "end": 3768,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 3750,
                "end": 3768,
                "name": "tag",
                "source": 1,
                "value": "112"
              },
              {
                "begin": 3750,
                "end": 3768,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": 3806,
                "end": 3807,
                "name": "PUSH",
                "source": 1,
                "value": "1"
              },
              {
                "begin": 3792,
                "end": 3808,
                "name": "DUP3",
                "source": 1
              },
              {
                "begin": 3792,
                "end": 3808,
                "name": "SHL",
                "source": 1
              },
              {
                "begin": 3865,
                "end": 3870,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "105"
              },
              {
                "begin": 3865,
                "end": 3870,
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 3618,
                "end": 3880,
                "name": "tag",
                "source": 1,
                "value": "108"
              },
              {
                "begin": 3618,
                "end": 3880,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 3618,
                "end": 3880,
                "name": "POP",
                "source": 1
              },
              {
                "begin": 3964,
                "end": 3966,
                "name": "PUSH",
                "source": 1,
                "value": "20"
              },
              {
                "begin": 3954,
                "end": 3962,
                "name": "DUP4",
                "source": 1
              },
              {
                "begin": 3951,
                "end": 3967,
                "name": "LT",
                "source": 1
              },
              {
                "begin": 3945,
                "end": 3948,
                "name": "PUSH",
                "source": 1,
                "value": "133"
              },
              {
                "begin": 3939,
                "end": 3943,
                "name": "DUP4",
                "source": 1
              },
              {
                "begin": 3936,
                "end": 3949,
                "name": "LT",
                "source": 1
              },
              {
                "begin": 3932,
                "end": 3968,
                "name": "AND",
                "source": 1
              },
              {
                "begin": 3926,
                "end": 3928,
                "name": "PUSH",
                "source": 1,
                "value": "4E"
              },
              {
                "begin": 3916,
                "end": 3924,
                "name": "DUP5",
                "source": 1
              },
              {
                "begin": 3913,
                "end": 3929,
                "name": "LT",
                "source": 1
              },
              {
                "begin": 3908,
                "end": 3910,
                "name": "PUSH",
                "source": 1,
                "value": "B"
              },
              {
                "begin": 3902,
                "end": 3906,
                "name": "DUP5",
                "source": 1
              },
              {
                "begin": 3899,
                "end": 3911,
                "name": "LT",
                "source": 1
              },
              {
                "begin": 3895,
                "end": 3930,
                "name": "AND",
                "source": 1
              },
              {
                "begin": 3892,
                "end": 3969,
                "name": "OR",
                "source": 1
              },
              {
                "begin": 3889,
                "end": 4092,
                "name": "ISZERO",
                "source": 1
              },
              {
                "begin": 3889,
                "end": 4092,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "113"
              },
              {
                "begin": 3889,
                "end": 4092,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": 4001,
                "end": 4020,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 4001,
                "end": 4020,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 4001,
                "end": 4020,
                "name": "EXP",
                "source": 1
              },
              {
                "begin": 4077,
                "end": 4082,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "105"
              },
              {
                "begin": 4077,
                "end": 4082,
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 3889,
                "end": 4092,
                "name": "tag",
                "source": 1,
                "value": "113"
              },
              {
                "begin": 3889,
                "end": 4092,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 4124,
                "end": 4166,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "114"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "PUSH",
                "source": -1,
                "value": "0"
              },
              {
                "begin": -1,
                "end": -1,
                "name": "NOT",
                "source": -1
              },
              {
                "begin": 4149,
                "end": 4157,
                "name": "DUP5",
                "source": 1
              },
              {
                "begin": 4143,
                "end": 4147,
                "name": "DUP5",
                "source": 1
              },
              {
                "begin": 4124,
                "end": 4166,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "67"
              },
              {
                "begin": 4124,
                "end": 4166,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 4124,
                "end": 4166,
                "name": "tag",
                "source": 1,
                "value": "114"
              },
              {
                "begin": 4124,
                "end": 4166,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 4202,
                "end": 4208,
                "name": "DUP1",
                "source": 1
              },
              {
                "begin": 4198,
                "end": 4199,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              {
                "begin": 4194,
                "end": 4200,
                "name": "NOT",
                "source": 1
              },
              {
                "begin": 4190,
                "end": 4209,
                "name": "DIV",
                "source": 1
              },
              {
                "begin": 4181,
                "end": 4188,
                "name": "DUP3",
                "source": 1
              },
              {
                "begin": 4178,
                "end": 4210,
                "name": "GT",
                "source": 1
              },
              {
                "begin": 4175,
                "end": 4233,
                "name": "ISZERO",
                "source": 1
              },
              {
                "begin": 4175,
                "end": 4233,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "116"
              },
              {
                "begin": 4175,
                "end": 4233,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": 4213,
                "end": 4231,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "116"
              },
              {
                "begin": 4213,
                "end": 4231,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "66"
              },
              {
                "begin": 4213,
                "end": 4231,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 4213,
                "end": 4231,
                "name": "tag",
                "source": 1,
                "value": "116"
              },
              {
                "begin": 4213,
                "end": 4231,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 4251,
                "end": 4271,
                "name": "MUL",
                "source": 1
              },
              {
                "begin": 4251,
                "end": 4271,
                "name": "SWAP1",
                "source": 1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": 3375,
                "end": 4277,
                "name": "tag",
                "source": 1,
                "value": "105"
              },
              {
                "begin": 3375,
                "end": 4277,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 3375,
                "end": 4277,
                "name": "SWAP3",
                "source": 1
              },
              {
                "begin": 3375,
                "end": 4277,
                "name": "SWAP2",
                "source": 1
              },
              {
                "begin": 3375,
                "end": 4277,
                "name": "POP",
                "source": 1
              },
              {
                "begin": 3375,
                "end": 4277,
                "name": "POP",
                "source": 1
              },
              {
                "begin": 3375,
                "end": 4277,
                "jumpType": "[out]",
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 4282,
                "end": 4422,
                "name": "tag",
                "source": 1,
                "value": "34"
              },
              {
                "begin": 4282,
                "end": 4422,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 4340,
                "end": 4345,
                "name": "PUSH",
                "source": 1,
                "value": "0"
              },
              {
                "begin": 4369,
                "end": 4416,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "118"
              },
              {
                "begin": 4410,
                "end": 4414,
                "name": "PUSH",
                "source": 1,
                "value": "FF"
              },
              {
                "begin": 4400,
                "end": 4408,
                "name": "DUP5",
                "source": 1
              },
              {
                "begin": 4396,
                "end": 4415,
                "name": "AND",
                "source": 1
              },
              {
                "begin": 4390,
                "end": 4394,
                "name": "DUP4",
                "source": 1
              },
              {
                "begin": 4369,
                "end": 4416,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "68"
              },
              {
                "begin": 4369,
                "end": 4416,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 4369,
                "end": 4416,
                "name": "tag",
                "source": 1,
                "value": "118"
              },
              {
                "begin": 4369,
                "end": 4416,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 4360,
                "end": 4416,
                "name": "SWAP4",
                "source": 1
              },
              {
                "begin": 4282,
                "end": 4422,
                "name": "SWAP3",
                "source": 1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": -1,
                "end": -1,
                "name": "POP",
                "source": -1
              },
              {
                "begin": 4282,
                "end": 4422,
                "jumpType": "[out]",
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 4427,
                "end": 4595,
                "name": "tag",
                "source": 1,
                "value": "36"
              },
              {
                "begin": 4427,
                "end": 4595,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 4500,
                "end": 4509,
                "name": "DUP1",
                "source": 1
              },
              {
                "begin": 4500,
                "end": 4509,
                "name": "DUP3",
                "source": 1
              },
              {
                "begin": 4500,
                "end": 4509,
                "name": "MUL",
                "source": 1
              },
              {
                "begin": 4531,
                "end": 4540,
                "name": "DUP2",
                "source": 1
              },
              {
                "begin": 4531,
                "end": 4540,
                "name": "ISZERO",
                "source": 1
              },
              {
                "begin": 4548,
                "end": 4563,
                "name": "DUP3",
                "source": 1
              },
              {
                "begin": 4548,
                "end": 4563,
                "name": "DUP3",
                "source": 1
              },
              {
                "begin": 4548,
                "end": 4563,
                "name": "DIV",
                "source": 1
              },
              {
                "begin": 4542,
                "end": 4564,
                "name": "DUP5",
                "source": 1
              },
              {
                "begin": 4542,
                "end": 4564,
                "name": "EQ",
                "source": 1
              },
              {
                "begin": 4528,
                "end": 4565,
                "name": "OR",
                "source": 1
              },
              {
                "begin": 4518,
                "end": 4589,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "105"
              },
              {
                "begin": 4518,
                "end": 4589,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": 4569,
                "end": 4587,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "105"
              },
              {
                "begin": 4569,
                "end": 4587,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "66"
              },
              {
                "begin": 4569,
                "end": 4587,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 4600,
                "end": 4725,
                "name": "tag",
                "source": 1,
                "value": "53"
              },
              {
                "begin": 4600,
                "end": 4725,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 4665,
                "end": 4674,
                "name": "DUP1",
                "source": 1
              },
              {
                "begin": 4665,
                "end": 4674,
                "name": "DUP3",
                "source": 1
              },
              {
                "begin": 4665,
                "end": 4674,
                "name": "ADD",
                "source": 1
              },
              {
                "begin": 4686,
                "end": 4696,
                "name": "DUP1",
                "source": 1
              },
              {
                "begin": 4686,
                "end": 4696,
                "name": "DUP3",
                "source": 1
              },
              {
                "begin": 4686,
                "end": 4696,
                "name": "GT",
                "source": 1
              },
              {
                "begin": 4683,
                "end": 4719,
                "name": "ISZERO",
                "source": 1
              },
              {
                "begin": 4683,
                "end": 4719,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "105"
              },
              {
                "begin": 4683,
                "end": 4719,
                "name": "JUMPI",
                "source": 1
              },
              {
                "begin": 4699,
                "end": 4717,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "105"
              },
              {
                "begin": 4699,
                "end": 4717,
                "name": "PUSH [tag]",
                "source": 1,
                "value": "66"
              },
              {
                "begin": 4699,
                "end": 4717,
                "jumpType": "[in]",
                "name": "JUMP",
                "source": 1
              },
              {
                "begin": 5080,
                "end": 5257,
                "name": "tag",
                "source": 1,
                "value": "69"
              },
              {
                "begin": 5080,
                "end": 5257,
                "name": "JUMPDEST",
                "source": 1
              },
              {
                "begin": 27747,
                "end": 32568,
                "name": "PUSH #[$]",
                "source": 0,
                "value": "0000000000000000000000000000000000000000000000000000000000000000"
              },
              {
                "begin": 27747,
                "end": 32568,
                "name": "DUP1",
                "source": 0
              },
              {
                "begin": 27747,
                "end": 32568,
                "name": "PUSH [$]",
                "source": 0,
                "value": "0000000000000000000000000000000000000000000000000000000000000000"
              },
              {
                "begin": 27747,
                "end": 32568,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 27747,
                "end": 32568,
                "name": "CODECOPY",
                "source": 0
              },
              {
                "begin": 27747,
                "end": 32568,
                "name": "PUSH",
                "source": 0,
                "value": "0"
              },
              {
                "begin": 27747,
                "end": 32568,
                "name": "RETURN",
                "source": 0
              }
            ],
            ".data": {
              "0": {
                ".auxdata": "a264697066735822122013491db28270216ab726e747e928e000b705fa4443e5403541f3629448dc9a6964736f6c634300081a0033",
                ".code": [
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "80"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "CALLDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "LT",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "1"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "CALLDATALOAD",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "E0"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "SHR",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "715018A6"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "GT",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "28"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "CC1776D3"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "GT",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "29"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "EFDCD974"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "GT",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "30"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "EFDCD974"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "24"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "F2FDE38B"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "25"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "F4293890"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "26"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "F9432517"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "27"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "tag",
                    "source": 0,
                    "value": "30"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "CC1776D3"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "21"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "D73792A9"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "22"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "DD62ED3E"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "23"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "tag",
                    "source": 0,
                    "value": "29"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "715018A6"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "15"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "77B54BAD"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "16"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "8DA5CB5B"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "17"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "95D89B41"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "18"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "A9059CBB"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "19"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "B3F00674"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "tag",
                    "source": 0,
                    "value": "28"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4F7041A5"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "GT",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "31"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4F7041A5"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "9"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4F91E48C"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "10"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "52F7C988"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "11"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "589210D9"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "12"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "5A029535"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "13"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "70A08231"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "14"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "tag",
                    "source": 0,
                    "value": "31"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "6FDDE03"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "3"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "95EA7B3"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "18160DDD"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "5"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "23B872DD"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "6"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "313CE567"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "7"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "3F4BE31E"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "8"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "tag",
                    "source": 0,
                    "value": "1"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "CALLDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "2"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "STOP",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "tag",
                    "source": 0,
                    "value": "2"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27747,
                    "end": 32568,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "tag",
                    "source": 0,
                    "value": "3"
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "34"
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "tag",
                    "source": 0,
                    "value": "34"
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "35"
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "36"
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "tag",
                    "source": 0,
                    "value": "35"
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "37"
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "38"
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "tag",
                    "source": 0,
                    "value": "37"
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "SUB",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "RETURN",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "tag",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "39"
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "tag",
                    "source": 0,
                    "value": "39"
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "41"
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "CALLDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "42"
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "tag",
                    "source": 0,
                    "value": "41"
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "43"
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "tag",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 1181,
                    "end": 1195,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 1181,
                    "end": 1195,
                    "name": "ISZERO",
                    "source": 1
                  },
                  {
                    "begin": 1174,
                    "end": 1196,
                    "name": "ISZERO",
                    "source": 1
                  },
                  {
                    "begin": 1156,
                    "end": 1197,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 1156,
                    "end": 1197,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 1144,
                    "end": 1146,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 1129,
                    "end": 1147,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "37"
                  },
                  {
                    "begin": 1016,
                    "end": 1203,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 19747,
                    "end": 19844,
                    "name": "tag",
                    "source": 0,
                    "value": "5"
                  },
                  {
                    "begin": 19747,
                    "end": 19844,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 19747,
                    "end": 19844,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 19747,
                    "end": 19844,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 19747,
                    "end": 19844,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 19747,
                    "end": 19844,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "46"
                  },
                  {
                    "begin": 19747,
                    "end": 19844,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 19747,
                    "end": 19844,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 19747,
                    "end": 19844,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 19747,
                    "end": 19844,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 19747,
                    "end": 19844,
                    "name": "tag",
                    "source": 0,
                    "value": "46"
                  },
                  {
                    "begin": 19747,
                    "end": 19844,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 19825,
                    "end": 19837,
                    "name": "PUSH",
                    "source": 0,
                    "value": "2"
                  },
                  {
                    "begin": 19825,
                    "end": 19837,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 19747,
                    "end": 19844,
                    "name": "tag",
                    "source": 0,
                    "value": "47"
                  },
                  {
                    "begin": 19747,
                    "end": 19844,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 19747,
                    "end": 19844,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 19747,
                    "end": 19844,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 1354,
                    "end": 1379,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 1354,
                    "end": 1379,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 1354,
                    "end": 1379,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 1342,
                    "end": 1344,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 1327,
                    "end": 1345,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 19747,
                    "end": 19844,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "37"
                  },
                  {
                    "begin": 1208,
                    "end": 1385,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "tag",
                    "source": 0,
                    "value": "6"
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "51"
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "tag",
                    "source": 0,
                    "value": "51"
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "53"
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "CALLDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "54"
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "tag",
                    "source": 0,
                    "value": "53"
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "55"
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 19605,
                    "end": 19687,
                    "name": "tag",
                    "source": 0,
                    "value": "7"
                  },
                  {
                    "begin": 19605,
                    "end": 19687,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 19605,
                    "end": 19687,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 19605,
                    "end": 19687,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 19605,
                    "end": 19687,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 19605,
                    "end": 19687,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "57"
                  },
                  {
                    "begin": 19605,
                    "end": 19687,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 19605,
                    "end": 19687,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 19605,
                    "end": 19687,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 19605,
                    "end": 19687,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 19605,
                    "end": 19687,
                    "name": "tag",
                    "source": 0,
                    "value": "57"
                  },
                  {
                    "begin": 19605,
                    "end": 19687,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 19605,
                    "end": 19687,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 19605,
                    "end": 19687,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 19678,
                    "end": 19680,
                    "name": "PUSH",
                    "source": 0,
                    "value": "12"
                  },
                  {
                    "begin": 1911,
                    "end": 1947,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 1911,
                    "end": 1947,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 1899,
                    "end": 1901,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 1884,
                    "end": 1902,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 19605,
                    "end": 19687,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "37"
                  },
                  {
                    "begin": 1769,
                    "end": 1953,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 28137,
                    "end": 28186,
                    "name": "tag",
                    "source": 0,
                    "value": "8"
                  },
                  {
                    "begin": 28137,
                    "end": 28186,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 28137,
                    "end": 28186,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 28137,
                    "end": 28186,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28137,
                    "end": 28186,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 28137,
                    "end": 28186,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "62"
                  },
                  {
                    "begin": 28137,
                    "end": 28186,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 28137,
                    "end": 28186,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 28137,
                    "end": 28186,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28137,
                    "end": 28186,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 28137,
                    "end": 28186,
                    "name": "tag",
                    "source": 0,
                    "value": "62"
                  },
                  {
                    "begin": 28137,
                    "end": 28186,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 28137,
                    "end": 28186,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 28137,
                    "end": 28186,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "47"
                  },
                  {
                    "begin": 28137,
                    "end": 28186,
                    "name": "PUSH",
                    "source": 0,
                    "value": "E"
                  },
                  {
                    "begin": 28137,
                    "end": 28186,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 28137,
                    "end": 28186,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 28137,
                    "end": 28186,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 27987,
                    "end": 28008,
                    "name": "tag",
                    "source": 0,
                    "value": "9"
                  },
                  {
                    "begin": 27987,
                    "end": 28008,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 27987,
                    "end": 28008,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 27987,
                    "end": 28008,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27987,
                    "end": 28008,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 27987,
                    "end": 28008,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "66"
                  },
                  {
                    "begin": 27987,
                    "end": 28008,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27987,
                    "end": 28008,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 27987,
                    "end": 28008,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27987,
                    "end": 28008,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 27987,
                    "end": 28008,
                    "name": "tag",
                    "source": 0,
                    "value": "66"
                  },
                  {
                    "begin": 27987,
                    "end": 28008,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 27987,
                    "end": 28008,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 27987,
                    "end": 28008,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "47"
                  },
                  {
                    "begin": 27987,
                    "end": 28008,
                    "name": "PUSH",
                    "source": 0,
                    "value": "9"
                  },
                  {
                    "begin": 27987,
                    "end": 28008,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 27987,
                    "end": 28008,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 27987,
                    "end": 28008,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 28072,
                    "end": 28096,
                    "name": "tag",
                    "source": 0,
                    "value": "10"
                  },
                  {
                    "begin": 28072,
                    "end": 28096,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 28072,
                    "end": 28096,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 28072,
                    "end": 28096,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28072,
                    "end": 28096,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 28072,
                    "end": 28096,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "70"
                  },
                  {
                    "begin": 28072,
                    "end": 28096,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 28072,
                    "end": 28096,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 28072,
                    "end": 28096,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28072,
                    "end": 28096,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 28072,
                    "end": 28096,
                    "name": "tag",
                    "source": 0,
                    "value": "70"
                  },
                  {
                    "begin": 28072,
                    "end": 28096,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 28072,
                    "end": 28096,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 28072,
                    "end": 28096,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "47"
                  },
                  {
                    "begin": 28072,
                    "end": 28096,
                    "name": "PUSH",
                    "source": 0,
                    "value": "C"
                  },
                  {
                    "begin": 28072,
                    "end": 28096,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 28072,
                    "end": 28096,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 28072,
                    "end": 28096,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "tag",
                    "source": 0,
                    "value": "11"
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "74"
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "tag",
                    "source": 0,
                    "value": "74"
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "75"
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "76"
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "CALLDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "77"
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "tag",
                    "source": 0,
                    "value": "76"
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "78"
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "tag",
                    "source": 0,
                    "value": "75"
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "STOP",
                    "source": 0
                  },
                  {
                    "begin": 28043,
                    "end": 28066,
                    "name": "tag",
                    "source": 0,
                    "value": "12"
                  },
                  {
                    "begin": 28043,
                    "end": 28066,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 28043,
                    "end": 28066,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 28043,
                    "end": 28066,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28043,
                    "end": 28066,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 28043,
                    "end": 28066,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "79"
                  },
                  {
                    "begin": 28043,
                    "end": 28066,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 28043,
                    "end": 28066,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 28043,
                    "end": 28066,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28043,
                    "end": 28066,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 28043,
                    "end": 28066,
                    "name": "tag",
                    "source": 0,
                    "value": "79"
                  },
                  {
                    "begin": 28043,
                    "end": 28066,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 28043,
                    "end": 28066,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 28043,
                    "end": 28066,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "47"
                  },
                  {
                    "begin": 28043,
                    "end": 28066,
                    "name": "PUSH",
                    "source": 0,
                    "value": "B"
                  },
                  {
                    "begin": 28043,
                    "end": 28066,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 28043,
                    "end": 28066,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 28043,
                    "end": 28066,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "tag",
                    "source": 0,
                    "value": "13"
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "83"
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "tag",
                    "source": 0,
                    "value": "83"
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "75"
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "85"
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "CALLDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "86"
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "tag",
                    "source": 0,
                    "value": "85"
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "87"
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "tag",
                    "source": 0,
                    "value": "14"
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "88"
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "tag",
                    "source": 0,
                    "value": "88"
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "47"
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "90"
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "CALLDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "91"
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "tag",
                    "source": 0,
                    "value": "90"
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 19967,
                    "end": 19974,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "KECCAK256",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 14210,
                    "end": 14311,
                    "name": "tag",
                    "source": 0,
                    "value": "15"
                  },
                  {
                    "begin": 14210,
                    "end": 14311,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 14210,
                    "end": 14311,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 14210,
                    "end": 14311,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 14210,
                    "end": 14311,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 14210,
                    "end": 14311,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "94"
                  },
                  {
                    "begin": 14210,
                    "end": 14311,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 14210,
                    "end": 14311,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 14210,
                    "end": 14311,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 14210,
                    "end": 14311,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 14210,
                    "end": 14311,
                    "name": "tag",
                    "source": 0,
                    "value": "94"
                  },
                  {
                    "begin": 14210,
                    "end": 14311,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 14210,
                    "end": 14311,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 14210,
                    "end": 14311,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "75"
                  },
                  {
                    "begin": 14210,
                    "end": 14311,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "96"
                  },
                  {
                    "begin": 14210,
                    "end": 14311,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "tag",
                    "source": 0,
                    "value": "16"
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "97"
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "tag",
                    "source": 0,
                    "value": "97"
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "99"
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "CALLDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "42"
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "tag",
                    "source": 0,
                    "value": "99"
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "100"
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 13555,
                    "end": 13640,
                    "name": "tag",
                    "source": 0,
                    "value": "17"
                  },
                  {
                    "begin": 13555,
                    "end": 13640,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 13555,
                    "end": 13640,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 13555,
                    "end": 13640,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 13555,
                    "end": 13640,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 13555,
                    "end": 13640,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "102"
                  },
                  {
                    "begin": 13555,
                    "end": 13640,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 13555,
                    "end": 13640,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 13555,
                    "end": 13640,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 13555,
                    "end": 13640,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 13555,
                    "end": 13640,
                    "name": "tag",
                    "source": 0,
                    "value": "102"
                  },
                  {
                    "begin": 13555,
                    "end": 13640,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 13627,
                    "end": 13633,
                    "name": "PUSH",
                    "source": 0,
                    "value": "5"
                  },
                  {
                    "begin": 13627,
                    "end": 13633,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 13627,
                    "end": 13633,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 13555,
                    "end": 13640,
                    "name": "tag",
                    "source": 0,
                    "value": "103"
                  },
                  {
                    "begin": 13555,
                    "end": 13640,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 13555,
                    "end": 13640,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 13555,
                    "end": 13640,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 2895,
                    "end": 2927,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 2895,
                    "end": 2927,
                    "name": "SWAP2",
                    "source": 1
                  },
                  {
                    "begin": 2895,
                    "end": 2927,
                    "name": "AND",
                    "source": 1
                  },
                  {
                    "begin": 2877,
                    "end": 2928,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 2877,
                    "end": 2928,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 2865,
                    "end": 2867,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 2850,
                    "end": 2868,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 13555,
                    "end": 13640,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "37"
                  },
                  {
                    "begin": 2731,
                    "end": 2934,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 18879,
                    "end": 18972,
                    "name": "tag",
                    "source": 0,
                    "value": "18"
                  },
                  {
                    "begin": 18879,
                    "end": 18972,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 18879,
                    "end": 18972,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 18879,
                    "end": 18972,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 18879,
                    "end": 18972,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 18879,
                    "end": 18972,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "107"
                  },
                  {
                    "begin": 18879,
                    "end": 18972,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 18879,
                    "end": 18972,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 18879,
                    "end": 18972,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 18879,
                    "end": 18972,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 18879,
                    "end": 18972,
                    "name": "tag",
                    "source": 0,
                    "value": "107"
                  },
                  {
                    "begin": 18879,
                    "end": 18972,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 18879,
                    "end": 18972,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 18879,
                    "end": 18972,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "35"
                  },
                  {
                    "begin": 18879,
                    "end": 18972,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "109"
                  },
                  {
                    "begin": 18879,
                    "end": 18972,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "tag",
                    "source": 0,
                    "value": "19"
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "111"
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "tag",
                    "source": 0,
                    "value": "111"
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "113"
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "CALLDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "42"
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "tag",
                    "source": 0,
                    "value": "113"
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "114"
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 28193,
                    "end": 28219,
                    "name": "tag",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 28193,
                    "end": 28219,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 28193,
                    "end": 28219,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 28193,
                    "end": 28219,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28193,
                    "end": 28219,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 28193,
                    "end": 28219,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "116"
                  },
                  {
                    "begin": 28193,
                    "end": 28219,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 28193,
                    "end": 28219,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 28193,
                    "end": 28219,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28193,
                    "end": 28219,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 28193,
                    "end": 28219,
                    "name": "tag",
                    "source": 0,
                    "value": "116"
                  },
                  {
                    "begin": 28193,
                    "end": 28219,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 28193,
                    "end": 28219,
                    "name": "PUSH",
                    "source": 0,
                    "value": "F"
                  },
                  {
                    "begin": 28193,
                    "end": 28219,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 28193,
                    "end": 28219,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "103"
                  },
                  {
                    "begin": 28193,
                    "end": 28219,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 28193,
                    "end": 28219,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 28193,
                    "end": 28219,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 28193,
                    "end": 28219,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 28014,
                    "end": 28036,
                    "name": "tag",
                    "source": 0,
                    "value": "21"
                  },
                  {
                    "begin": 28014,
                    "end": 28036,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 28014,
                    "end": 28036,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 28014,
                    "end": 28036,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28014,
                    "end": 28036,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 28014,
                    "end": 28036,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "120"
                  },
                  {
                    "begin": 28014,
                    "end": 28036,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 28014,
                    "end": 28036,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 28014,
                    "end": 28036,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28014,
                    "end": 28036,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 28014,
                    "end": 28036,
                    "name": "tag",
                    "source": 0,
                    "value": "120"
                  },
                  {
                    "begin": 28014,
                    "end": 28036,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 28014,
                    "end": 28036,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 28014,
                    "end": 28036,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "47"
                  },
                  {
                    "begin": 28014,
                    "end": 28036,
                    "name": "PUSH",
                    "source": 0,
                    "value": "A"
                  },
                  {
                    "begin": 28014,
                    "end": 28036,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 28014,
                    "end": 28036,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 28014,
                    "end": 28036,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 27934,
                    "end": 27980,
                    "name": "tag",
                    "source": 0,
                    "value": "22"
                  },
                  {
                    "begin": 27934,
                    "end": 27980,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 27934,
                    "end": 27980,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 27934,
                    "end": 27980,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27934,
                    "end": 27980,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 27934,
                    "end": 27980,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "124"
                  },
                  {
                    "begin": 27934,
                    "end": 27980,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 27934,
                    "end": 27980,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 27934,
                    "end": 27980,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 27934,
                    "end": 27980,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 27934,
                    "end": 27980,
                    "name": "tag",
                    "source": 0,
                    "value": "124"
                  },
                  {
                    "begin": 27934,
                    "end": 27980,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 27934,
                    "end": 27980,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 27934,
                    "end": 27980,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "47"
                  },
                  {
                    "begin": 27976,
                    "end": 27980,
                    "name": "PUSH",
                    "source": 0,
                    "value": "3E8"
                  },
                  {
                    "begin": 27934,
                    "end": 27980,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 27934,
                    "end": 27980,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "tag",
                    "source": 0,
                    "value": "23"
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "128"
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "tag",
                    "source": 0,
                    "value": "128"
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "47"
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "130"
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "CALLDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "131"
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "tag",
                    "source": 0,
                    "value": "130"
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 20555,
                    "end": 20573,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20573,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20573,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 20529,
                    "end": 20536,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 20555,
                    "end": 20573,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20573,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20573,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20566,
                    "name": "PUSH",
                    "source": 0,
                    "value": "1"
                  },
                  {
                    "begin": 20555,
                    "end": 20573,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 20555,
                    "end": 20573,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20573,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20573,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20573,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 20555,
                    "end": 20573,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20573,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20573,
                    "name": "KECCAK256",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20582,
                    "name": "SWAP4",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20582,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20582,
                    "name": "SWAP5",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20582,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20582,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20582,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20582,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20582,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20582,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20582,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20582,
                    "name": "KECCAK256",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20582,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 20555,
                    "end": 20582,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "tag",
                    "source": 0,
                    "value": "24"
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "134"
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "tag",
                    "source": 0,
                    "value": "134"
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "75"
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "136"
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "CALLDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "91"
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "tag",
                    "source": 0,
                    "value": "136"
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "137"
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "tag",
                    "source": 0,
                    "value": "25"
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "138"
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "tag",
                    "source": 0,
                    "value": "138"
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "75"
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "140"
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "CALLDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "91"
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "tag",
                    "source": 0,
                    "value": "140"
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "141"
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 31574,
                    "end": 31794,
                    "name": "tag",
                    "source": 0,
                    "value": "26"
                  },
                  {
                    "begin": 31574,
                    "end": 31794,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 31574,
                    "end": 31794,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 31574,
                    "end": 31794,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 31574,
                    "end": 31794,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 31574,
                    "end": 31794,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "142"
                  },
                  {
                    "begin": 31574,
                    "end": 31794,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 31574,
                    "end": 31794,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 31574,
                    "end": 31794,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 31574,
                    "end": 31794,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 31574,
                    "end": 31794,
                    "name": "tag",
                    "source": 0,
                    "value": "142"
                  },
                  {
                    "begin": 31574,
                    "end": 31794,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 31574,
                    "end": 31794,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 31574,
                    "end": 31794,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "75"
                  },
                  {
                    "begin": 31574,
                    "end": 31794,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "144"
                  },
                  {
                    "begin": 31574,
                    "end": 31794,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 28102,
                    "end": 28130,
                    "name": "tag",
                    "source": 0,
                    "value": "27"
                  },
                  {
                    "begin": 28102,
                    "end": 28130,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 28102,
                    "end": 28130,
                    "name": "CALLVALUE",
                    "source": 0
                  },
                  {
                    "begin": 28102,
                    "end": 28130,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28102,
                    "end": 28130,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 28102,
                    "end": 28130,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "145"
                  },
                  {
                    "begin": 28102,
                    "end": 28130,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 28102,
                    "end": 28130,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 28102,
                    "end": 28130,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28102,
                    "end": 28130,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 28102,
                    "end": 28130,
                    "name": "tag",
                    "source": 0,
                    "value": "145"
                  },
                  {
                    "begin": 28102,
                    "end": 28130,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 28102,
                    "end": 28130,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 28102,
                    "end": 28130,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "47"
                  },
                  {
                    "begin": 28102,
                    "end": 28130,
                    "name": "PUSH",
                    "source": 0,
                    "value": "D"
                  },
                  {
                    "begin": 28102,
                    "end": 28130,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 28102,
                    "end": 28130,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 28102,
                    "end": 28130,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "tag",
                    "source": 0,
                    "value": "36"
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 18722,
                    "end": 18735,
                    "name": "PUSH",
                    "source": 0,
                    "value": "60"
                  },
                  {
                    "begin": 18754,
                    "end": 18759,
                    "name": "PUSH",
                    "source": 0,
                    "value": "3"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "150"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "151"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "tag",
                    "source": 0,
                    "value": "150"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH",
                    "source": 0,
                    "value": "1F"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DIV",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "MUL",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SWAP3",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "152"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "151"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "tag",
                    "source": 0,
                    "value": "152"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "153"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH",
                    "source": 0,
                    "value": "1F"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "LT",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "154"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH",
                    "source": 0,
                    "value": "100"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DIV",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "MUL",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "153"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "tag",
                    "source": 0,
                    "value": "154"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "KECCAK256",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "tag",
                    "source": 0,
                    "value": "155"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH",
                    "source": 0,
                    "value": "1"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "GT",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "155"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SUB",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "PUSH",
                    "source": 0,
                    "value": "1F"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "tag",
                    "source": 0,
                    "value": "153"
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 18747,
                    "end": 18759,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 18677,
                    "end": 18766,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "tag",
                    "source": 0,
                    "value": "43"
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 20969,
                    "end": 20973,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 12351,
                    "end": 12361,
                    "name": "CALLER",
                    "source": 0
                  },
                  {
                    "begin": 21023,
                    "end": 21054,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "159"
                  },
                  {
                    "begin": 12351,
                    "end": 12361,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 21039,
                    "end": 21046,
                    "name": "DUP6",
                    "source": 0
                  },
                  {
                    "begin": 21048,
                    "end": 21053,
                    "name": "DUP6",
                    "source": 0
                  },
                  {
                    "begin": 21023,
                    "end": 21031,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "160"
                  },
                  {
                    "begin": 21023,
                    "end": 21054,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 21023,
                    "end": 21054,
                    "name": "tag",
                    "source": 0,
                    "value": "159"
                  },
                  {
                    "begin": 21023,
                    "end": 21054,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 21071,
                    "end": 21075,
                    "name": "PUSH",
                    "source": 0,
                    "value": "1"
                  },
                  {
                    "begin": 21064,
                    "end": 21075,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 21064,
                    "end": 21075,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 21064,
                    "end": 21075,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "tag",
                    "source": 0,
                    "value": "156"
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "SWAP3",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 20896,
                    "end": 21082,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "tag",
                    "source": 0,
                    "value": "55"
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 30249,
                    "end": 30253,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 30282,
                    "end": 30283,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 30273,
                    "end": 30279,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 30273,
                    "end": 30283,
                    "name": "GT",
                    "source": 0
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "163"
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "461BCD"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E5"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 3791,
                    "end": 3793,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 3773,
                    "end": 3794,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 3830,
                    "end": 3832,
                    "name": "PUSH",
                    "source": 1,
                    "value": "E"
                  },
                  {
                    "begin": 3810,
                    "end": 3828,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 3810,
                    "end": 3828,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 3810,
                    "end": 3828,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 3803,
                    "end": 3833,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "125B9D985B1A5908185B5BDD5B9D"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "92"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 3849,
                    "end": 3867,
                    "name": "PUSH",
                    "source": 1,
                    "value": "44"
                  },
                  {
                    "begin": 3849,
                    "end": 3867,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 3849,
                    "end": 3867,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 3842,
                    "end": 3886,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 3903,
                    "end": 3921,
                    "name": "PUSH",
                    "source": 1,
                    "value": "64"
                  },
                  {
                    "begin": 3903,
                    "end": 3921,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "tag",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "SUB",
                    "source": 0
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "tag",
                    "source": 0,
                    "value": "163"
                  },
                  {
                    "begin": 30265,
                    "end": 30302,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 30320,
                    "end": 30343,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 30320,
                    "end": 30343,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 30312,
                    "end": 30365,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "166"
                  },
                  {
                    "begin": 30312,
                    "end": 30365,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 30312,
                    "end": 30365,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 30312,
                    "end": 30365,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "461BCD"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E5"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 30312,
                    "end": 30365,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 30312,
                    "end": 30365,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 4134,
                    "end": 4136,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 30312,
                    "end": 30365,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 30312,
                    "end": 30365,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 30312,
                    "end": 30365,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 4116,
                    "end": 4137,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 4173,
                    "end": 4175,
                    "name": "PUSH",
                    "source": 1,
                    "value": "11"
                  },
                  {
                    "begin": 4153,
                    "end": 4171,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 4153,
                    "end": 4171,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 4153,
                    "end": 4171,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 4146,
                    "end": 4176,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "125B9D985B1A59081C9958DA5C1A595B9D"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "7A"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 4192,
                    "end": 4210,
                    "name": "PUSH",
                    "source": 1,
                    "value": "44"
                  },
                  {
                    "begin": 4192,
                    "end": 4210,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 4192,
                    "end": 4210,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 4185,
                    "end": 4232,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 4249,
                    "end": 4267,
                    "name": "PUSH",
                    "source": 1,
                    "value": "64"
                  },
                  {
                    "begin": 4249,
                    "end": 4267,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 30312,
                    "end": 30365,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 3932,
                    "end": 4273,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 30312,
                    "end": 30365,
                    "name": "tag",
                    "source": 0,
                    "value": "166"
                  },
                  {
                    "begin": 30312,
                    "end": 30365,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 30383,
                    "end": 30403,
                    "name": "DUP5",
                    "source": 0
                  },
                  {
                    "begin": 30383,
                    "end": 30403,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 30375,
                    "end": 30422,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "169"
                  },
                  {
                    "begin": 30375,
                    "end": 30422,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 30375,
                    "end": 30422,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 30375,
                    "end": 30422,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "461BCD"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E5"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 30375,
                    "end": 30422,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 30375,
                    "end": 30422,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 4480,
                    "end": 4482,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 30375,
                    "end": 30422,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 30375,
                    "end": 30422,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 30375,
                    "end": 30422,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 4462,
                    "end": 4483,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 4519,
                    "end": 4521,
                    "name": "PUSH",
                    "source": 1,
                    "value": "E"
                  },
                  {
                    "begin": 4499,
                    "end": 4517,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 4499,
                    "end": 4517,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 4499,
                    "end": 4517,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 4492,
                    "end": 4522,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "24B73B30B634B21039B2B73232B9"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "91"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 4538,
                    "end": 4556,
                    "name": "PUSH",
                    "source": 1,
                    "value": "44"
                  },
                  {
                    "begin": 4538,
                    "end": 4556,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 4538,
                    "end": 4556,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 4531,
                    "end": 4575,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 4592,
                    "end": 4610,
                    "name": "PUSH",
                    "source": 1,
                    "value": "64"
                  },
                  {
                    "begin": 4592,
                    "end": 4610,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 30375,
                    "end": 30422,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 4278,
                    "end": 4616,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 30375,
                    "end": 30422,
                    "name": "tag",
                    "source": 0,
                    "value": "169"
                  },
                  {
                    "begin": 30375,
                    "end": 30422,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 30433,
                    "end": 30457,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 30460,
                    "end": 30491,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "172"
                  },
                  {
                    "begin": 30470,
                    "end": 30476,
                    "name": "DUP6",
                    "source": 0
                  },
                  {
                    "begin": 12351,
                    "end": 12361,
                    "name": "CALLER",
                    "source": 0
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "130"
                  },
                  {
                    "begin": 20449,
                    "end": 20589,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 30460,
                    "end": 30491,
                    "name": "tag",
                    "source": 0,
                    "value": "172"
                  },
                  {
                    "begin": 30460,
                    "end": 30491,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 30433,
                    "end": 30491,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 30433,
                    "end": 30491,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 30529,
                    "end": 30535,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 30509,
                    "end": 30525,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 30509,
                    "end": 30535,
                    "name": "LT",
                    "source": 0
                  },
                  {
                    "begin": 30509,
                    "end": 30535,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 30501,
                    "end": 30562,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "174"
                  },
                  {
                    "begin": 30501,
                    "end": 30562,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 30501,
                    "end": 30562,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 30501,
                    "end": 30562,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "461BCD"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E5"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 30501,
                    "end": 30562,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 30501,
                    "end": 30562,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 4823,
                    "end": 4825,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 30501,
                    "end": 30562,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 30501,
                    "end": 30562,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 30501,
                    "end": 30562,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 4805,
                    "end": 4826,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 4862,
                    "end": 4864,
                    "name": "PUSH",
                    "source": 1,
                    "value": "16"
                  },
                  {
                    "begin": 4842,
                    "end": 4860,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 4842,
                    "end": 4860,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 4842,
                    "end": 4860,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 4835,
                    "end": 4865,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "496E73756666696369656E7420416C6C6F77616E6365"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "50"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 4881,
                    "end": 4899,
                    "name": "PUSH",
                    "source": 1,
                    "value": "44"
                  },
                  {
                    "begin": 4881,
                    "end": 4899,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 4881,
                    "end": 4899,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 4874,
                    "end": 4926,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 4943,
                    "end": 4961,
                    "name": "PUSH",
                    "source": 1,
                    "value": "64"
                  },
                  {
                    "begin": 4943,
                    "end": 4961,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 30501,
                    "end": 30562,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 4621,
                    "end": 4967,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 30501,
                    "end": 30562,
                    "name": "tag",
                    "source": 0,
                    "value": "174"
                  },
                  {
                    "begin": 30501,
                    "end": 30562,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 30580,
                    "end": 30620,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "177"
                  },
                  {
                    "begin": 30594,
                    "end": 30600,
                    "name": "DUP6",
                    "source": 0
                  },
                  {
                    "begin": 30602,
                    "end": 30611,
                    "name": "DUP6",
                    "source": 0
                  },
                  {
                    "begin": 30613,
                    "end": 30619,
                    "name": "DUP6",
                    "source": 0
                  },
                  {
                    "begin": 30580,
                    "end": 30593,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "178"
                  },
                  {
                    "begin": 30580,
                    "end": 30620,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 30580,
                    "end": 30620,
                    "name": "tag",
                    "source": 0,
                    "value": "177"
                  },
                  {
                    "begin": 30580,
                    "end": 30620,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 30573,
                    "end": 30620,
                    "name": "SWAP6",
                    "source": 0
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "name": "SWAP5",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 30121,
                    "end": 30627,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "tag",
                    "source": 0,
                    "value": "78"
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 13448,
                    "end": 13461,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "181"
                  },
                  {
                    "begin": 13448,
                    "end": 13459,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "182"
                  },
                  {
                    "begin": 13448,
                    "end": 13461,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 13448,
                    "end": 13461,
                    "name": "tag",
                    "source": 0,
                    "value": "181"
                  },
                  {
                    "begin": 13448,
                    "end": 13461,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 32293,
                    "end": 32299,
                    "modifierDepth": 1,
                    "name": "PUSH",
                    "source": 0,
                    "value": "9"
                  },
                  {
                    "begin": 32293,
                    "end": 32306,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 32293,
                    "end": 32306,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 32293,
                    "end": 32306,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 32293,
                    "end": 32306,
                    "name": "SSTORE",
                    "source": 0
                  },
                  {
                    "begin": 32316,
                    "end": 32323,
                    "modifierDepth": 1,
                    "name": "PUSH",
                    "source": 0,
                    "value": "A"
                  },
                  {
                    "begin": 32316,
                    "end": 32331,
                    "name": "SSTORE",
                    "source": 0
                  },
                  {
                    "begin": 32219,
                    "end": 32338,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "tag",
                    "source": 0,
                    "value": "87"
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 13448,
                    "end": 13461,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "185"
                  },
                  {
                    "begin": 13448,
                    "end": 13459,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "182"
                  },
                  {
                    "begin": 13448,
                    "end": 13461,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 13448,
                    "end": 13461,
                    "name": "tag",
                    "source": 0,
                    "value": "185"
                  },
                  {
                    "begin": 13448,
                    "end": 13461,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 29724,
                    "end": 29746,
                    "modifierDepth": 1,
                    "name": "PUSH",
                    "source": 0,
                    "value": "E"
                  },
                  {
                    "begin": 29724,
                    "end": 29757,
                    "name": "SSTORE",
                    "source": 0
                  },
                  {
                    "begin": 29641,
                    "end": 29764,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 14210,
                    "end": 14311,
                    "name": "tag",
                    "source": 0,
                    "value": "96"
                  },
                  {
                    "begin": 14210,
                    "end": 14311,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 13448,
                    "end": 13461,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "189"
                  },
                  {
                    "begin": 13448,
                    "end": 13459,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "182"
                  },
                  {
                    "begin": 13448,
                    "end": 13461,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 13448,
                    "end": 13461,
                    "name": "tag",
                    "source": 0,
                    "value": "189"
                  },
                  {
                    "begin": 13448,
                    "end": 13461,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 14274,
                    "end": 14304,
                    "modifierDepth": 1,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "191"
                  },
                  {
                    "begin": 14301,
                    "end": 14302,
                    "modifierDepth": 1,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 14274,
                    "end": 14292,
                    "modifierDepth": 1,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "192"
                  },
                  {
                    "begin": 14274,
                    "end": 14304,
                    "jumpType": "[in]",
                    "modifierDepth": 1,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 14274,
                    "end": 14304,
                    "modifierDepth": 1,
                    "name": "tag",
                    "source": 0,
                    "value": "191"
                  },
                  {
                    "begin": 14274,
                    "end": 14304,
                    "modifierDepth": 1,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 14210,
                    "end": 14311,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "tag",
                    "source": 0,
                    "value": "100"
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 31962,
                    "end": 31973,
                    "name": "PUSH",
                    "source": 0,
                    "value": "F"
                  },
                  {
                    "begin": 31962,
                    "end": 31973,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 31897,
                    "end": 31909,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 31897,
                    "end": 31909,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 31962,
                    "end": 31973,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 12351,
                    "end": 12361,
                    "name": "CALLER",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 31946,
                    "end": 31973,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 31946,
                    "end": 31973,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 31925,
                    "end": 32035,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "195"
                  },
                  {
                    "begin": 31925,
                    "end": 32035,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 31925,
                    "end": 32035,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 31925,
                    "end": 32035,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "461BCD"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E5"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 31925,
                    "end": 32035,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 31925,
                    "end": 32035,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 31925,
                    "end": 32035,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 31925,
                    "end": 32035,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 31925,
                    "end": 32035,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 31925,
                    "end": 32035,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 31925,
                    "end": 32035,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "197"
                  },
                  {
                    "begin": 31925,
                    "end": 32035,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 31925,
                    "end": 32035,
                    "name": "tag",
                    "source": 0,
                    "value": "195"
                  },
                  {
                    "begin": 31925,
                    "end": 32035,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 32050,
                    "end": 32056,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 32060,
                    "end": 32061,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 32050,
                    "end": 32061,
                    "name": "SUB",
                    "source": 0
                  },
                  {
                    "begin": 32046,
                    "end": 32141,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "198"
                  },
                  {
                    "begin": 32046,
                    "end": 32141,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "70A08231"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 32124,
                    "end": 32128,
                    "name": "ADDRESS",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 2877,
                    "end": 2928,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 32086,
                    "end": 32115,
                    "name": "DUP5",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32115,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32115,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32115,
                    "name": "PUSH",
                    "source": 0,
                    "value": "70A08231"
                  },
                  {
                    "begin": 32086,
                    "end": 32115,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 2850,
                    "end": 2868,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 2850,
                    "end": 2868,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "SUB",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "DUP7",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "GAS",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "STATICCALL",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "201"
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "RETURNDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "RETURNDATACOPY",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "RETURNDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "tag",
                    "source": 0,
                    "value": "201"
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "RETURNDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "PUSH",
                    "source": 0,
                    "value": "1F"
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "NOT",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "PUSH",
                    "source": 0,
                    "value": "1F"
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "202"
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "203"
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "tag",
                    "source": 0,
                    "value": "202"
                  },
                  {
                    "begin": 32086,
                    "end": 32130,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 32077,
                    "end": 32130,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 32077,
                    "end": 32130,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 32046,
                    "end": 32141,
                    "name": "tag",
                    "source": 0,
                    "value": "198"
                  },
                  {
                    "begin": 32046,
                    "end": 32141,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 32186,
                    "end": 32197,
                    "name": "PUSH",
                    "source": 0,
                    "value": "F"
                  },
                  {
                    "begin": 32186,
                    "end": 32197,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A9059CBB"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 32186,
                    "end": 32197,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 32186,
                    "end": 32197,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 32186,
                    "end": 32197,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 5740,
                    "end": 5791,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 5807,
                    "end": 5825,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 5807,
                    "end": 5825,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 5807,
                    "end": 5825,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 5800,
                    "end": 5834,
                    "name": "DUP5",
                    "source": 1
                  },
                  {
                    "begin": 5800,
                    "end": 5834,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 5800,
                    "end": 5834,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 32157,
                    "end": 32185,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32185,
                    "name": "DUP5",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32185,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32185,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32185,
                    "name": "PUSH",
                    "source": 0,
                    "value": "A9059CBB"
                  },
                  {
                    "begin": 32157,
                    "end": 32185,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 5713,
                    "end": 5731,
                    "name": "PUSH",
                    "source": 1,
                    "value": "44"
                  },
                  {
                    "begin": 5713,
                    "end": 5731,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "SUB",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "DUP8",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "GAS",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "CALL",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "207"
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "RETURNDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "RETURNDATACOPY",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "RETURNDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "tag",
                    "source": 0,
                    "value": "207"
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "RETURNDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "PUSH",
                    "source": 0,
                    "value": "1F"
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "NOT",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "PUSH",
                    "source": 0,
                    "value": "1F"
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "208"
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "209"
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "tag",
                    "source": 0,
                    "value": "208"
                  },
                  {
                    "begin": 32157,
                    "end": 32206,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 32150,
                    "end": 32206,
                    "name": "SWAP4",
                    "source": 0
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "name": "SWAP3",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 31800,
                    "end": 32213,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 18879,
                    "end": 18972,
                    "name": "tag",
                    "source": 0,
                    "value": "109"
                  },
                  {
                    "begin": 18879,
                    "end": 18972,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 18926,
                    "end": 18939,
                    "name": "PUSH",
                    "source": 0,
                    "value": "60"
                  },
                  {
                    "begin": 18958,
                    "end": 18965,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 18951,
                    "end": 18965,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 18951,
                    "end": 18965,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 18951,
                    "end": 18965,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "150"
                  },
                  {
                    "begin": 18951,
                    "end": 18965,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 18951,
                    "end": 18965,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "151"
                  },
                  {
                    "begin": 18951,
                    "end": 18965,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "tag",
                    "source": 0,
                    "value": "114"
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 28864,
                    "end": 28877,
                    "name": "PUSH",
                    "source": 0,
                    "value": "D"
                  },
                  {
                    "begin": 28864,
                    "end": 28877,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "PUSH",
                    "source": 0,
                    "value": "8"
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "3A3930B739B332B9"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "C1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SWAP2",
                    "source": -1
                  },
                  {
                    "begin": 29876,
                    "end": 29886,
                    "name": "CALLER",
                    "source": 0
                  },
                  {
                    "begin": 29876,
                    "end": 29886,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 29888,
                    "end": 29897,
                    "name": "DUP6",
                    "source": 0
                  },
                  {
                    "begin": 29888,
                    "end": 29897,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 29899,
                    "end": 29905,
                    "name": "DUP6",
                    "source": 0
                  },
                  {
                    "begin": 29899,
                    "end": 29905,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 28668,
                    "end": 28686,
                    "name": "DUP5",
                    "source": 0
                  },
                  {
                    "begin": 28668,
                    "end": 28686,
                    "name": "EXTCODESIZE",
                    "source": 0
                  },
                  {
                    "begin": 28713,
                    "end": 28721,
                    "name": "PUSH",
                    "source": 0,
                    "value": "FFFFFFFF"
                  },
                  {
                    "begin": 28713,
                    "end": 28721,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 28713,
                    "end": 28721,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 28930,
                    "end": 29209,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "220"
                  },
                  {
                    "begin": 28930,
                    "end": 29209,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 28976,
                    "end": 28984,
                    "name": "PUSH",
                    "source": 0,
                    "value": "B"
                  },
                  {
                    "begin": 28976,
                    "end": 28984,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "PUSH",
                    "source": 0,
                    "value": "3"
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "627579"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E8"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 28930,
                    "end": 29209,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "224"
                  },
                  {
                    "begin": 28930,
                    "end": 29209,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 28930,
                    "end": 29209,
                    "name": "tag",
                    "source": 0,
                    "value": "220"
                  },
                  {
                    "begin": 28930,
                    "end": 29209,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 28668,
                    "end": 28686,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 28668,
                    "end": 28686,
                    "name": "EXTCODESIZE",
                    "source": 0
                  },
                  {
                    "begin": 28713,
                    "end": 28721,
                    "name": "PUSH",
                    "source": 0,
                    "value": "FFFFFFFF"
                  },
                  {
                    "begin": 28713,
                    "end": 28721,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 28713,
                    "end": 28721,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 29028,
                    "end": 29209,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "223"
                  },
                  {
                    "begin": 29028,
                    "end": 29209,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 29077,
                    "end": 29086,
                    "name": "PUSH",
                    "source": 0,
                    "value": "C"
                  },
                  {
                    "begin": 29077,
                    "end": 29086,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1CD95B1B"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E2"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 29028,
                    "end": 29209,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "224"
                  },
                  {
                    "begin": 29028,
                    "end": 29209,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 29028,
                    "end": 29209,
                    "name": "tag",
                    "source": 0,
                    "value": "223"
                  },
                  {
                    "begin": 29028,
                    "end": 29209,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 29153,
                    "end": 29166,
                    "name": "PUSH",
                    "source": 0,
                    "value": "D"
                  },
                  {
                    "begin": 29153,
                    "end": 29166,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "PUSH",
                    "source": 0,
                    "value": "8"
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "3A3930B739B332B9"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "C1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 29028,
                    "end": 29209,
                    "name": "tag",
                    "source": 0,
                    "value": "224"
                  },
                  {
                    "begin": 29028,
                    "end": 29209,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 29249,
                    "end": 29255,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 29240,
                    "end": 29245,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 29240,
                    "end": 29255,
                    "name": "LT",
                    "source": 0
                  },
                  {
                    "begin": 29240,
                    "end": 29255,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 29372,
                    "end": 29378,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 29445,
                    "end": 29450,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 29534,
                    "end": 29539,
                    "name": "DUP5",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "225"
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "SWAP4",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "SWAP3",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "226"
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "tag",
                    "source": 0,
                    "value": "225"
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "SUB",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "SUB",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "227"
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "461BCD"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E5"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "38"
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "tag",
                    "source": 0,
                    "value": "227"
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 29961,
                    "end": 29962,
                    "modifierDepth": 1,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 29952,
                    "end": 29958,
                    "modifierDepth": 1,
                    "name": "DUP8",
                    "source": 0
                  },
                  {
                    "begin": 29952,
                    "end": 29962,
                    "modifierDepth": 1,
                    "name": "GT",
                    "source": 0
                  },
                  {
                    "begin": 29944,
                    "end": 29981,
                    "modifierDepth": 1,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "230"
                  },
                  {
                    "begin": 29944,
                    "end": 29981,
                    "modifierDepth": 1,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 29944,
                    "end": 29981,
                    "modifierDepth": 1,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 29944,
                    "end": 29981,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "461BCD"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E5"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 29944,
                    "end": 29981,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 29944,
                    "end": 29981,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 3791,
                    "end": 3793,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 29944,
                    "end": 29981,
                    "modifierDepth": 1,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 29944,
                    "end": 29981,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 29944,
                    "end": 29981,
                    "modifierDepth": 1,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 3773,
                    "end": 3794,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 3830,
                    "end": 3832,
                    "name": "PUSH",
                    "source": 1,
                    "value": "E"
                  },
                  {
                    "begin": 3810,
                    "end": 3828,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 3810,
                    "end": 3828,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 3810,
                    "end": 3828,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 3803,
                    "end": 3833,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "125B9D985B1A5908185B5BDD5B9D"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "92"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 3849,
                    "end": 3867,
                    "name": "PUSH",
                    "source": 1,
                    "value": "44"
                  },
                  {
                    "begin": 3849,
                    "end": 3867,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 3849,
                    "end": 3867,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 3842,
                    "end": 3886,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 3903,
                    "end": 3921,
                    "name": "PUSH",
                    "source": 1,
                    "value": "64"
                  },
                  {
                    "begin": 3903,
                    "end": 3921,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 29944,
                    "end": 29981,
                    "modifierDepth": 1,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 3589,
                    "end": 3927,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 29944,
                    "end": 29981,
                    "modifierDepth": 1,
                    "name": "tag",
                    "source": 0,
                    "value": "230"
                  },
                  {
                    "begin": 29944,
                    "end": 29981,
                    "modifierDepth": 1,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 29999,
                    "end": 30022,
                    "name": "DUP9",
                    "source": 0
                  },
                  {
                    "begin": 29999,
                    "end": 30022,
                    "modifierDepth": 1,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 29991,
                    "end": 30044,
                    "modifierDepth": 1,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "232"
                  },
                  {
                    "begin": 29991,
                    "end": 30044,
                    "modifierDepth": 1,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 29991,
                    "end": 30044,
                    "modifierDepth": 1,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 29991,
                    "end": 30044,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "461BCD"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E5"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 29991,
                    "end": 30044,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 29991,
                    "end": 30044,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 4134,
                    "end": 4136,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 29991,
                    "end": 30044,
                    "modifierDepth": 1,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 29991,
                    "end": 30044,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 29991,
                    "end": 30044,
                    "modifierDepth": 1,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 4116,
                    "end": 4137,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 4173,
                    "end": 4175,
                    "name": "PUSH",
                    "source": 1,
                    "value": "11"
                  },
                  {
                    "begin": 4153,
                    "end": 4171,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 4153,
                    "end": 4171,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 4153,
                    "end": 4171,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 4146,
                    "end": 4176,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "125B9D985B1A59081C9958DA5C1A595B9D"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "7A"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 4192,
                    "end": 4210,
                    "name": "PUSH",
                    "source": 1,
                    "value": "44"
                  },
                  {
                    "begin": 4192,
                    "end": 4210,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 4192,
                    "end": 4210,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 4185,
                    "end": 4232,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 4249,
                    "end": 4267,
                    "name": "PUSH",
                    "source": 1,
                    "value": "64"
                  },
                  {
                    "begin": 4249,
                    "end": 4267,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 29991,
                    "end": 30044,
                    "modifierDepth": 1,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 3932,
                    "end": 4273,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 29991,
                    "end": 30044,
                    "modifierDepth": 1,
                    "name": "tag",
                    "source": 0,
                    "value": "232"
                  },
                  {
                    "begin": 29991,
                    "end": 30044,
                    "modifierDepth": 1,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 30062,
                    "end": 30108,
                    "modifierDepth": 1,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "234"
                  },
                  {
                    "begin": 12351,
                    "end": 12361,
                    "name": "CALLER",
                    "source": 0
                  },
                  {
                    "begin": 30090,
                    "end": 30099,
                    "modifierDepth": 1,
                    "name": "DUP10",
                    "source": 0
                  },
                  {
                    "begin": 30101,
                    "end": 30107,
                    "modifierDepth": 1,
                    "name": "DUP10",
                    "source": 0
                  },
                  {
                    "begin": 30062,
                    "end": 30075,
                    "modifierDepth": 1,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "178"
                  },
                  {
                    "begin": 30062,
                    "end": 30108,
                    "jumpType": "[in]",
                    "modifierDepth": 1,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 30062,
                    "end": 30108,
                    "modifierDepth": 1,
                    "name": "tag",
                    "source": 0,
                    "value": "234"
                  },
                  {
                    "begin": 30062,
                    "end": 30108,
                    "modifierDepth": 1,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 30055,
                    "end": 30108,
                    "name": "SWAP9",
                    "source": 0
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "name": "SWAP8",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 29770,
                    "end": 30115,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "tag",
                    "source": 0,
                    "value": "137"
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 32446,
                    "end": 32457,
                    "name": "PUSH",
                    "source": 0,
                    "value": "F"
                  },
                  {
                    "begin": 32446,
                    "end": 32457,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 32446,
                    "end": 32457,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 12351,
                    "end": 12361,
                    "name": "CALLER",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 32430,
                    "end": 32457,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 32430,
                    "end": 32457,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 32409,
                    "end": 32522,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "239"
                  },
                  {
                    "begin": 32409,
                    "end": 32522,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 32409,
                    "end": 32522,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 32409,
                    "end": 32522,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "461BCD"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E5"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 32409,
                    "end": 32522,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 32409,
                    "end": 32522,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 7525,
                    "end": 7527,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 32409,
                    "end": 32522,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 32409,
                    "end": 32522,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 32409,
                    "end": 32522,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 7507,
                    "end": 7528,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 7564,
                    "end": 7566,
                    "name": "PUSH",
                    "source": 1,
                    "value": "27"
                  },
                  {
                    "begin": 7544,
                    "end": 7562,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 7544,
                    "end": 7562,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 7544,
                    "end": 7562,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 7537,
                    "end": 7567,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 7603,
                    "end": 7637,
                    "name": "PUSH",
                    "source": 1,
                    "value": "596F7520617265206E6F7420616C6C6F77656420746F20736574206665652072"
                  },
                  {
                    "begin": 7583,
                    "end": 7601,
                    "name": "PUSH",
                    "source": 1,
                    "value": "44"
                  },
                  {
                    "begin": 7583,
                    "end": 7601,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 7583,
                    "end": 7601,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 7576,
                    "end": 7638,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "32B1B2B4BB32B9"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "C9"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 7654,
                    "end": 7672,
                    "name": "PUSH",
                    "source": 1,
                    "value": "64"
                  },
                  {
                    "begin": 7654,
                    "end": 7672,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 7654,
                    "end": 7672,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 7647,
                    "end": 7684,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 7701,
                    "end": 7720,
                    "name": "PUSH",
                    "source": 1,
                    "value": "84"
                  },
                  {
                    "begin": 7701,
                    "end": 7720,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 32409,
                    "end": 32522,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 7323,
                    "end": 7726,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 32409,
                    "end": 32522,
                    "name": "tag",
                    "source": 0,
                    "value": "239"
                  },
                  {
                    "begin": 32409,
                    "end": 32522,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 32533,
                    "end": 32544,
                    "name": "PUSH",
                    "source": 0,
                    "value": "F"
                  },
                  {
                    "begin": 32533,
                    "end": 32559,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 32533,
                    "end": 32559,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "NOT",
                    "source": -1
                  },
                  {
                    "begin": 32533,
                    "end": 32559,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 32533,
                    "end": 32559,
                    "name": "SWAP3",
                    "source": 0
                  },
                  {
                    "begin": 32533,
                    "end": 32559,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 32533,
                    "end": 32559,
                    "name": "SWAP3",
                    "source": 0
                  },
                  {
                    "begin": 32533,
                    "end": 32559,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 32533,
                    "end": 32559,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 32533,
                    "end": 32559,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 32533,
                    "end": 32559,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 32533,
                    "end": 32559,
                    "name": "OR",
                    "source": 0
                  },
                  {
                    "begin": 32533,
                    "end": 32559,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 32533,
                    "end": 32559,
                    "name": "SSTORE",
                    "source": 0
                  },
                  {
                    "begin": 32344,
                    "end": 32566,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "tag",
                    "source": 0,
                    "value": "141"
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 13448,
                    "end": 13461,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "243"
                  },
                  {
                    "begin": 13448,
                    "end": 13459,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "182"
                  },
                  {
                    "begin": 13448,
                    "end": 13461,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 13448,
                    "end": 13461,
                    "name": "tag",
                    "source": 0,
                    "value": "243"
                  },
                  {
                    "begin": 13448,
                    "end": 13461,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 14544,
                    "end": 14566,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 14544,
                    "end": 14566,
                    "modifierDepth": 1,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 14540,
                    "end": 14631,
                    "modifierDepth": 1,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "245"
                  },
                  {
                    "begin": 14540,
                    "end": 14631,
                    "modifierDepth": 1,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 14589,
                    "end": 14620,
                    "modifierDepth": 1,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 14589,
                    "end": 14620,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1E4FBDF7"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 14589,
                    "end": 14620,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 14589,
                    "end": 14620,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 14617,
                    "end": 14618,
                    "modifierDepth": 1,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 14589,
                    "end": 14620,
                    "modifierDepth": 1,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 14589,
                    "end": 14620,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 14589,
                    "end": 14620,
                    "modifierDepth": 1,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 2877,
                    "end": 2928,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 2850,
                    "end": 2868,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 2850,
                    "end": 2868,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 14589,
                    "end": 14620,
                    "modifierDepth": 1,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 2731,
                    "end": 2934,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 14540,
                    "end": 14631,
                    "modifierDepth": 1,
                    "name": "tag",
                    "source": 0,
                    "value": "245"
                  },
                  {
                    "begin": 14540,
                    "end": 14631,
                    "modifierDepth": 1,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 14640,
                    "end": 14668,
                    "modifierDepth": 1,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "247"
                  },
                  {
                    "begin": 14659,
                    "end": 14667,
                    "modifierDepth": 1,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 14640,
                    "end": 14658,
                    "modifierDepth": 1,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "192"
                  },
                  {
                    "begin": 14640,
                    "end": 14668,
                    "jumpType": "[in]",
                    "modifierDepth": 1,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 14640,
                    "end": 14668,
                    "modifierDepth": 1,
                    "name": "tag",
                    "source": 0,
                    "value": "247"
                  },
                  {
                    "begin": 14640,
                    "end": 14668,
                    "modifierDepth": 1,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 14460,
                    "end": 14675,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 31574,
                    "end": 31794,
                    "name": "tag",
                    "source": 0,
                    "value": "144"
                  },
                  {
                    "begin": 31574,
                    "end": 31794,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 31652,
                    "end": 31663,
                    "name": "PUSH",
                    "source": 0,
                    "value": "F"
                  },
                  {
                    "begin": 31652,
                    "end": 31663,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 31652,
                    "end": 31663,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 12351,
                    "end": 12361,
                    "name": "CALLER",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 31636,
                    "end": 31663,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 31636,
                    "end": 31663,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 31615,
                    "end": 31725,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "250"
                  },
                  {
                    "begin": 31615,
                    "end": 31725,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 31615,
                    "end": 31725,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 31615,
                    "end": 31725,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "461BCD"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E5"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 31615,
                    "end": 31725,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 31615,
                    "end": 31725,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 31615,
                    "end": 31725,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 31615,
                    "end": 31725,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 31615,
                    "end": 31725,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 31615,
                    "end": 31725,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 31615,
                    "end": 31725,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "197"
                  },
                  {
                    "begin": 31615,
                    "end": 31725,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 31615,
                    "end": 31725,
                    "name": "tag",
                    "source": 0,
                    "value": "250"
                  },
                  {
                    "begin": 31615,
                    "end": 31725,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 31743,
                    "end": 31754,
                    "name": "PUSH",
                    "source": 0,
                    "value": "F"
                  },
                  {
                    "begin": 31743,
                    "end": 31754,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 31743,
                    "end": 31754,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 31743,
                    "end": 31754,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 31743,
                    "end": 31754,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 31743,
                    "end": 31754,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 31765,
                    "end": 31786,
                    "name": "SELFBALANCE",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "PUSH",
                    "source": 0,
                    "value": "8FC"
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "MUL",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 31743,
                    "end": 31754,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 31743,
                    "end": 31754,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 31765,
                    "end": 31786,
                    "name": "DUP6",
                    "source": 0
                  },
                  {
                    "begin": 31743,
                    "end": 31754,
                    "name": "DUP9",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "DUP9",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "CALL",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "SWAP4",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "247"
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "RETURNDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "RETURNDATACOPY",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "RETURNDATASIZE",
                    "source": 0
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 31735,
                    "end": 31787,
                    "name": "REVERT",
                    "source": 0
                  },
                  {
                    "begin": 25592,
                    "end": 25720,
                    "name": "tag",
                    "source": 0,
                    "value": "160"
                  },
                  {
                    "begin": 25592,
                    "end": 25720,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 25676,
                    "end": 25713,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "256"
                  },
                  {
                    "begin": 25685,
                    "end": 25690,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 25692,
                    "end": 25699,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 25701,
                    "end": 25706,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 25708,
                    "end": 25712,
                    "name": "PUSH",
                    "source": 0,
                    "value": "1"
                  },
                  {
                    "begin": 25676,
                    "end": 25684,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "257"
                  },
                  {
                    "begin": 25676,
                    "end": 25713,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 25676,
                    "end": 25713,
                    "name": "tag",
                    "source": 0,
                    "value": "256"
                  },
                  {
                    "begin": 25676,
                    "end": 25713,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 25592,
                    "end": 25720,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 25592,
                    "end": 25720,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 25592,
                    "end": 25720,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 25592,
                    "end": 25720,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 30633,
                    "end": 31060,
                    "name": "tag",
                    "source": 0,
                    "value": "178"
                  },
                  {
                    "begin": 30633,
                    "end": 31060,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 28864,
                    "end": 28877,
                    "name": "PUSH",
                    "source": 0,
                    "value": "D"
                  },
                  {
                    "begin": 28864,
                    "end": 28877,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "PUSH",
                    "source": 0,
                    "value": "8"
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "3A3930B739B332B9"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "C1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 28887,
                    "end": 28919,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SWAP2",
                    "source": -1
                  },
                  {
                    "begin": 30759,
                    "end": 30765,
                    "name": "DUP6",
                    "source": 0
                  },
                  {
                    "begin": 30759,
                    "end": 30765,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 30767,
                    "end": 30776,
                    "name": "DUP6",
                    "source": 0
                  },
                  {
                    "begin": 30767,
                    "end": 30776,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 30778,
                    "end": 30784,
                    "name": "DUP6",
                    "source": 0
                  },
                  {
                    "begin": 30778,
                    "end": 30784,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 28668,
                    "end": 28686,
                    "name": "DUP5",
                    "source": 0
                  },
                  {
                    "begin": 28668,
                    "end": 28686,
                    "name": "EXTCODESIZE",
                    "source": 0
                  },
                  {
                    "begin": 28713,
                    "end": 28721,
                    "name": "PUSH",
                    "source": 0,
                    "value": "FFFFFFFF"
                  },
                  {
                    "begin": 28713,
                    "end": 28721,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 28713,
                    "end": 28721,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 28930,
                    "end": 29209,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "260"
                  },
                  {
                    "begin": 28930,
                    "end": 29209,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 28976,
                    "end": 28984,
                    "name": "PUSH",
                    "source": 0,
                    "value": "B"
                  },
                  {
                    "begin": 28976,
                    "end": 28984,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "PUSH",
                    "source": 0,
                    "value": "3"
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "627579"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E8"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 28998,
                    "end": 29011,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 28930,
                    "end": 29209,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "264"
                  },
                  {
                    "begin": 28930,
                    "end": 29209,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 28930,
                    "end": 29209,
                    "name": "tag",
                    "source": 0,
                    "value": "260"
                  },
                  {
                    "begin": 28930,
                    "end": 29209,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 28668,
                    "end": 28686,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 28668,
                    "end": 28686,
                    "name": "EXTCODESIZE",
                    "source": 0
                  },
                  {
                    "begin": 28713,
                    "end": 28721,
                    "name": "PUSH",
                    "source": 0,
                    "value": "FFFFFFFF"
                  },
                  {
                    "begin": 28713,
                    "end": 28721,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 28713,
                    "end": 28721,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 29028,
                    "end": 29209,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "263"
                  },
                  {
                    "begin": 29028,
                    "end": 29209,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 29077,
                    "end": 29086,
                    "name": "PUSH",
                    "source": 0,
                    "value": "C"
                  },
                  {
                    "begin": 29077,
                    "end": 29086,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1CD95B1B"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E2"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 29100,
                    "end": 29114,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 29028,
                    "end": 29209,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "264"
                  },
                  {
                    "begin": 29028,
                    "end": 29209,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 29028,
                    "end": 29209,
                    "name": "tag",
                    "source": 0,
                    "value": "263"
                  },
                  {
                    "begin": 29028,
                    "end": 29209,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 29153,
                    "end": 29166,
                    "name": "PUSH",
                    "source": 0,
                    "value": "D"
                  },
                  {
                    "begin": 29153,
                    "end": 29166,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "PUSH",
                    "source": 0,
                    "value": "8"
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "3A3930B739B332B9"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "C1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 29180,
                    "end": 29198,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 29028,
                    "end": 29209,
                    "name": "tag",
                    "source": 0,
                    "value": "264"
                  },
                  {
                    "begin": 29028,
                    "end": 29209,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 29249,
                    "end": 29255,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 29240,
                    "end": 29245,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 29240,
                    "end": 29255,
                    "name": "LT",
                    "source": 0
                  },
                  {
                    "begin": 29240,
                    "end": 29255,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 29372,
                    "end": 29378,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 29445,
                    "end": 29450,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 29534,
                    "end": 29539,
                    "name": "DUP5",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "265"
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "SWAP4",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "SWAP3",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "226"
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "tag",
                    "source": 0,
                    "value": "265"
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "SUB",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "SUB",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 29293,
                    "end": 29557,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "266"
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "461BCD"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E5"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "38"
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "tag",
                    "source": 0,
                    "value": "266"
                  },
                  {
                    "begin": 29219,
                    "end": 29581,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "DUP10",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 30811,
                    "end": 30832,
                    "modifierDepth": 1,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "KECCAK256",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 30870,
                    "end": 30893,
                    "name": "DUP8",
                    "source": 0
                  },
                  {
                    "begin": 30870,
                    "end": 30893,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 30870,
                    "end": 30893,
                    "modifierDepth": 1,
                    "name": "LT",
                    "source": 0
                  },
                  {
                    "begin": 30870,
                    "end": 30893,
                    "modifierDepth": 1,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 30862,
                    "end": 30918,
                    "modifierDepth": 1,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "270"
                  },
                  {
                    "begin": 30862,
                    "end": 30918,
                    "modifierDepth": 1,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 30862,
                    "end": 30918,
                    "modifierDepth": 1,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 30862,
                    "end": 30918,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "461BCD"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E5"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 30862,
                    "end": 30918,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 30862,
                    "end": 30918,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 7933,
                    "end": 7935,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 30862,
                    "end": 30918,
                    "modifierDepth": 1,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 30862,
                    "end": 30918,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 30862,
                    "end": 30918,
                    "modifierDepth": 1,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 7915,
                    "end": 7936,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 7972,
                    "end": 7974,
                    "name": "PUSH",
                    "source": 1,
                    "value": "14"
                  },
                  {
                    "begin": 7952,
                    "end": 7970,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 7952,
                    "end": 7970,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 7952,
                    "end": 7970,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 7945,
                    "end": 7975,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "496E73756666696369656E742042616C616E6365"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "60"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 7991,
                    "end": 8009,
                    "name": "PUSH",
                    "source": 1,
                    "value": "44"
                  },
                  {
                    "begin": 7991,
                    "end": 8009,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 7991,
                    "end": 8009,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 7984,
                    "end": 8034,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 8051,
                    "end": 8069,
                    "name": "PUSH",
                    "source": 1,
                    "value": "64"
                  },
                  {
                    "begin": 8051,
                    "end": 8069,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 30862,
                    "end": 30918,
                    "modifierDepth": 1,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 7731,
                    "end": 8075,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 30862,
                    "end": 30918,
                    "modifierDepth": 1,
                    "name": "tag",
                    "source": 0,
                    "value": "270"
                  },
                  {
                    "begin": 30862,
                    "end": 30918,
                    "modifierDepth": 1,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 30929,
                    "end": 30951,
                    "modifierDepth": 1,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 30954,
                    "end": 30977,
                    "modifierDepth": 1,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "273"
                  },
                  {
                    "begin": 30962,
                    "end": 30968,
                    "modifierDepth": 1,
                    "name": "DUP12",
                    "source": 0
                  },
                  {
                    "begin": 30970,
                    "end": 30976,
                    "modifierDepth": 1,
                    "name": "DUP11",
                    "source": 0
                  },
                  {
                    "begin": 30954,
                    "end": 30961,
                    "modifierDepth": 1,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "274"
                  },
                  {
                    "begin": 30954,
                    "end": 30977,
                    "jumpType": "[in]",
                    "modifierDepth": 1,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 30954,
                    "end": 30977,
                    "modifierDepth": 1,
                    "name": "tag",
                    "source": 0,
                    "value": "273"
                  },
                  {
                    "begin": 30954,
                    "end": 30977,
                    "modifierDepth": 1,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 30929,
                    "end": 30977,
                    "modifierDepth": 1,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 30929,
                    "end": 30977,
                    "modifierDepth": 1,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 30987,
                    "end": 31031,
                    "modifierDepth": 1,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "275"
                  },
                  {
                    "begin": 30997,
                    "end": 31003,
                    "modifierDepth": 1,
                    "name": "DUP12",
                    "source": 0
                  },
                  {
                    "begin": 31005,
                    "end": 31014,
                    "modifierDepth": 1,
                    "name": "DUP12",
                    "source": 0
                  },
                  {
                    "begin": 31016,
                    "end": 31030,
                    "modifierDepth": 1,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 30987,
                    "end": 30996,
                    "modifierDepth": 1,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "276"
                  },
                  {
                    "begin": 30987,
                    "end": 31031,
                    "jumpType": "[in]",
                    "modifierDepth": 1,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 30987,
                    "end": 31031,
                    "modifierDepth": 1,
                    "name": "tag",
                    "source": 0,
                    "value": "275"
                  },
                  {
                    "begin": 30987,
                    "end": 31031,
                    "modifierDepth": 1,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 31049,
                    "end": 31053,
                    "modifierDepth": 1,
                    "name": "PUSH",
                    "source": 0,
                    "value": "1"
                  },
                  {
                    "begin": 31049,
                    "end": 31053,
                    "name": "SWAP11",
                    "source": 0
                  },
                  {
                    "begin": 30633,
                    "end": 31060,
                    "name": "SWAP10",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 30633,
                    "end": 31060,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 13713,
                    "end": 13875,
                    "name": "tag",
                    "source": 0,
                    "value": "182"
                  },
                  {
                    "begin": 13713,
                    "end": 13875,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 13627,
                    "end": 13633,
                    "name": "PUSH",
                    "source": 0,
                    "value": "5"
                  },
                  {
                    "begin": 13627,
                    "end": 13633,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 13627,
                    "end": 13633,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 12351,
                    "end": 12361,
                    "name": "CALLER",
                    "source": 0
                  },
                  {
                    "begin": 13772,
                    "end": 13795,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 13768,
                    "end": 13869,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "191"
                  },
                  {
                    "begin": 13768,
                    "end": 13869,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 13818,
                    "end": 13858,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 13818,
                    "end": 13858,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "118CDAA7"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 13818,
                    "end": 13858,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 13818,
                    "end": 13858,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 12351,
                    "end": 12361,
                    "name": "CALLER",
                    "source": 0
                  },
                  {
                    "begin": 13818,
                    "end": 13858,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 13818,
                    "end": 13858,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 13818,
                    "end": 13858,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 2877,
                    "end": 2928,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 2850,
                    "end": 2868,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 2850,
                    "end": 2868,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 13818,
                    "end": 13858,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 2731,
                    "end": 2934,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 14829,
                    "end": 15016,
                    "name": "tag",
                    "source": 0,
                    "value": "192"
                  },
                  {
                    "begin": 14829,
                    "end": 15016,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 14921,
                    "end": 14927,
                    "name": "PUSH",
                    "source": 0,
                    "value": "5"
                  },
                  {
                    "begin": 14921,
                    "end": 14927,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 14921,
                    "end": 14927,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 14937,
                    "end": 14954,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 14937,
                    "end": 14954,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 14937,
                    "end": 14954,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "NOT",
                    "source": -1
                  },
                  {
                    "begin": 14937,
                    "end": 14954,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 14937,
                    "end": 14954,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 14937,
                    "end": 14954,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 14937,
                    "end": 14954,
                    "name": "OR",
                    "source": 0
                  },
                  {
                    "begin": 14937,
                    "end": 14954,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 14937,
                    "end": 14954,
                    "name": "SWAP4",
                    "source": 0
                  },
                  {
                    "begin": 14937,
                    "end": 14954,
                    "name": "SSTORE",
                    "source": 0
                  },
                  {
                    "begin": 14969,
                    "end": 15009,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 14969,
                    "end": 15009,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 14921,
                    "end": 14927,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 14921,
                    "end": 14927,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 14921,
                    "end": 14927,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 14937,
                    "end": 14954,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 14921,
                    "end": 14927,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 14921,
                    "end": 14927,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 14969,
                    "end": 15009,
                    "name": "PUSH",
                    "source": 0,
                    "value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
                  },
                  {
                    "begin": 14969,
                    "end": 15009,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 14902,
                    "end": 14918,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 14902,
                    "end": 14918,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 14969,
                    "end": 15009,
                    "name": "LOG3",
                    "source": 0
                  },
                  {
                    "begin": 14892,
                    "end": 15016,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 14829,
                    "end": 15016,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 14829,
                    "end": 15016,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 26552,
                    "end": 26984,
                    "name": "tag",
                    "source": 0,
                    "value": "257"
                  },
                  {
                    "begin": 26552,
                    "end": 26984,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 26664,
                    "end": 26683,
                    "name": "DUP5",
                    "source": 0
                  },
                  {
                    "begin": 26664,
                    "end": 26683,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 26660,
                    "end": 26749,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "286"
                  },
                  {
                    "begin": 26660,
                    "end": 26749,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 26706,
                    "end": 26738,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 26706,
                    "end": 26738,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E602DF05"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 26706,
                    "end": 26738,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 26706,
                    "end": 26738,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 26735,
                    "end": 26736,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 26706,
                    "end": 26738,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 26706,
                    "end": 26738,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 26706,
                    "end": 26738,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 2877,
                    "end": 2928,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 2850,
                    "end": 2868,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 2850,
                    "end": 2868,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 26706,
                    "end": 26738,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 2731,
                    "end": 2934,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 26660,
                    "end": 26749,
                    "name": "tag",
                    "source": 0,
                    "value": "286"
                  },
                  {
                    "begin": 26660,
                    "end": 26749,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 26762,
                    "end": 26783,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 26762,
                    "end": 26783,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 26758,
                    "end": 26848,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "288"
                  },
                  {
                    "begin": 26758,
                    "end": 26848,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 26806,
                    "end": 26837,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 26806,
                    "end": 26837,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "4A1406B1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 26806,
                    "end": 26837,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 26806,
                    "end": 26837,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 26834,
                    "end": 26835,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 26806,
                    "end": 26837,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 26806,
                    "end": 26837,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 26806,
                    "end": 26837,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 2877,
                    "end": 2928,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 2850,
                    "end": 2868,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 2850,
                    "end": 2868,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 26806,
                    "end": 26837,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 2731,
                    "end": 2934,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 26758,
                    "end": 26848,
                    "name": "tag",
                    "source": 0,
                    "value": "288"
                  },
                  {
                    "begin": 26758,
                    "end": 26848,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 26857,
                    "end": 26875,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26875,
                    "name": "DUP6",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26875,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26875,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 26857,
                    "end": 26875,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26875,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26875,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26868,
                    "name": "PUSH",
                    "source": 0,
                    "value": "1"
                  },
                  {
                    "begin": 26857,
                    "end": 26875,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 26857,
                    "end": 26875,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26875,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26875,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26875,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 26857,
                    "end": 26875,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26875,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26875,
                    "name": "KECCAK256",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26884,
                    "name": "SWAP4",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26884,
                    "name": "DUP8",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26884,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26884,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26884,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26884,
                    "name": "SWAP3",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26884,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26884,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26884,
                    "name": "KECCAK256",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26892,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26892,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 26857,
                    "end": 26892,
                    "name": "SSTORE",
                    "source": 0
                  },
                  {
                    "begin": 26902,
                    "end": 26978,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 26902,
                    "end": 26978,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 26902,
                    "end": 26978,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "290"
                  },
                  {
                    "begin": 26902,
                    "end": 26978,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 26952,
                    "end": 26959,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 26936,
                    "end": 26967,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 26945,
                    "end": 26950,
                    "name": "DUP5",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 26936,
                    "end": 26967,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 26936,
                    "end": 26967,
                    "name": "PUSH",
                    "source": 0,
                    "value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
                  },
                  {
                    "begin": 26961,
                    "end": 26966,
                    "name": "DUP5",
                    "source": 0
                  },
                  {
                    "begin": 26936,
                    "end": 26967,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 26936,
                    "end": 26967,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 26936,
                    "end": 26967,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "291"
                  },
                  {
                    "begin": 26936,
                    "end": 26967,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 1354,
                    "end": 1379,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 1354,
                    "end": 1379,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 1342,
                    "end": 1344,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 1327,
                    "end": 1345,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 1327,
                    "end": 1345,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 1208,
                    "end": 1385,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 26936,
                    "end": 26967,
                    "name": "tag",
                    "source": 0,
                    "value": "291"
                  },
                  {
                    "begin": 26936,
                    "end": 26967,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 26936,
                    "end": 26967,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 26936,
                    "end": 26967,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 26936,
                    "end": 26967,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 26936,
                    "end": 26967,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 26936,
                    "end": 26967,
                    "name": "SUB",
                    "source": 0
                  },
                  {
                    "begin": 26936,
                    "end": 26967,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 26936,
                    "end": 26967,
                    "name": "LOG3",
                    "source": 0
                  },
                  {
                    "begin": 26902,
                    "end": 26978,
                    "name": "tag",
                    "source": 0,
                    "value": "290"
                  },
                  {
                    "begin": 26902,
                    "end": 26978,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 26552,
                    "end": 26984,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 26552,
                    "end": 26984,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 26552,
                    "end": 26984,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 26552,
                    "end": 26984,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 26552,
                    "end": 26984,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 31066,
                    "end": 31568,
                    "name": "tag",
                    "source": 0,
                    "value": "274"
                  },
                  {
                    "begin": 31066,
                    "end": 31568,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 31149,
                    "end": 31156,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 31149,
                    "end": 31156,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 31186,
                    "end": 31208,
                    "name": "DUP5",
                    "source": 0
                  },
                  {
                    "begin": 31186,
                    "end": 31208,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 12351,
                    "end": 12361,
                    "name": "CALLER",
                    "source": 0
                  },
                  {
                    "begin": 31186,
                    "end": 31208,
                    "name": "EQ",
                    "source": 0
                  },
                  {
                    "begin": 31186,
                    "end": 31227,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "294"
                  },
                  {
                    "begin": 31186,
                    "end": 31227,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 31221,
                    "end": 31227,
                    "name": "PUSH",
                    "source": 0,
                    "value": "9"
                  },
                  {
                    "begin": 31221,
                    "end": 31227,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 31186,
                    "end": 31227,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "295"
                  },
                  {
                    "begin": 31186,
                    "end": 31227,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 31186,
                    "end": 31227,
                    "name": "tag",
                    "source": 0,
                    "value": "294"
                  },
                  {
                    "begin": 31186,
                    "end": 31227,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 31211,
                    "end": 31218,
                    "name": "PUSH",
                    "source": 0,
                    "value": "A"
                  },
                  {
                    "begin": 31211,
                    "end": 31218,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 31186,
                    "end": 31227,
                    "name": "tag",
                    "source": 0,
                    "value": "295"
                  },
                  {
                    "begin": 31186,
                    "end": 31227,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 31172,
                    "end": 31227,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 31238,
                    "end": 31255,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 31258,
                    "end": 31294,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "296"
                  },
                  {
                    "begin": 27976,
                    "end": 27980,
                    "name": "PUSH",
                    "source": 0,
                    "value": "3E8"
                  },
                  {
                    "begin": 31258,
                    "end": 31273,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "297"
                  },
                  {
                    "begin": 31258,
                    "end": 31264,
                    "name": "DUP7",
                    "source": 0
                  },
                  {
                    "begin": 31172,
                    "end": 31227,
                    "name": "DUP6",
                    "source": 0
                  },
                  {
                    "begin": 31258,
                    "end": 31268,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "298"
                  },
                  {
                    "begin": 31258,
                    "end": 31273,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 31258,
                    "end": 31273,
                    "name": "tag",
                    "source": 0,
                    "value": "297"
                  },
                  {
                    "begin": 31258,
                    "end": 31273,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 31258,
                    "end": 31277,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 31258,
                    "end": 31277,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "299"
                  },
                  {
                    "begin": 31258,
                    "end": 31294,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 31258,
                    "end": 31294,
                    "name": "tag",
                    "source": 0,
                    "value": "296"
                  },
                  {
                    "begin": 31258,
                    "end": 31294,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 31238,
                    "end": 31294,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 31304,
                    "end": 31331,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 31334,
                    "end": 31355,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "300"
                  },
                  {
                    "begin": 31334,
                    "end": 31340,
                    "name": "DUP6",
                    "source": 0
                  },
                  {
                    "begin": 31238,
                    "end": 31294,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 31334,
                    "end": 31344,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "301"
                  },
                  {
                    "begin": 31334,
                    "end": 31355,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 31334,
                    "end": 31355,
                    "name": "tag",
                    "source": 0,
                    "value": "300"
                  },
                  {
                    "begin": 31334,
                    "end": 31355,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 31304,
                    "end": 31355,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 31304,
                    "end": 31355,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 31366,
                    "end": 31387,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 31390,
                    "end": 31407,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "302"
                  },
                  {
                    "begin": 31400,
                    "end": 31406,
                    "name": "DUP8",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 19967,
                    "end": 19974,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "KECCAK256",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 19993,
                    "end": 20011,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 19902,
                    "end": 20018,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 31390,
                    "end": 31407,
                    "name": "tag",
                    "source": 0,
                    "value": "302"
                  },
                  {
                    "begin": 31390,
                    "end": 31407,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 31366,
                    "end": 31407,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 31366,
                    "end": 31407,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 31442,
                    "end": 31448,
                    "name": "DUP6",
                    "source": 0
                  },
                  {
                    "begin": 31425,
                    "end": 31438,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 31425,
                    "end": 31448,
                    "name": "LT",
                    "source": 0
                  },
                  {
                    "begin": 31425,
                    "end": 31448,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 31417,
                    "end": 31473,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "303"
                  },
                  {
                    "begin": 31417,
                    "end": 31473,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 31417,
                    "end": 31473,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 31417,
                    "end": 31473,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "461BCD"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E5"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 31417,
                    "end": 31473,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 31417,
                    "end": 31473,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 7933,
                    "end": 7935,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 31417,
                    "end": 31473,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 31417,
                    "end": 31473,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 31417,
                    "end": 31473,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 7915,
                    "end": 7936,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 7972,
                    "end": 7974,
                    "name": "PUSH",
                    "source": 1,
                    "value": "14"
                  },
                  {
                    "begin": 7952,
                    "end": 7970,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 7952,
                    "end": 7970,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 7952,
                    "end": 7970,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 7945,
                    "end": 7975,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "496E73756666696369656E742042616C616E6365"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "60"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 7991,
                    "end": 8009,
                    "name": "PUSH",
                    "source": 1,
                    "value": "44"
                  },
                  {
                    "begin": 7991,
                    "end": 8009,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 7991,
                    "end": 8009,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 7984,
                    "end": 8034,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 8051,
                    "end": 8069,
                    "name": "PUSH",
                    "source": 1,
                    "value": "64"
                  },
                  {
                    "begin": 8051,
                    "end": 8069,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 31417,
                    "end": 31473,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 7731,
                    "end": 8075,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 31417,
                    "end": 31473,
                    "name": "tag",
                    "source": 0,
                    "value": "303"
                  },
                  {
                    "begin": 31417,
                    "end": 31473,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 31501,
                    "end": 31512,
                    "name": "PUSH",
                    "source": 0,
                    "value": "F"
                  },
                  {
                    "begin": 31501,
                    "end": 31512,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 31483,
                    "end": 31524,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "305"
                  },
                  {
                    "begin": 31483,
                    "end": 31524,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 31493,
                    "end": 31499,
                    "name": "DUP9",
                    "source": 0
                  },
                  {
                    "begin": 31493,
                    "end": 31499,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 31501,
                    "end": 31512,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 31514,
                    "end": 31523,
                    "name": "DUP6",
                    "source": 0
                  },
                  {
                    "begin": 31483,
                    "end": 31492,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "276"
                  },
                  {
                    "begin": 31483,
                    "end": 31524,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 31483,
                    "end": 31524,
                    "name": "tag",
                    "source": 0,
                    "value": "305"
                  },
                  {
                    "begin": 31483,
                    "end": 31524,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 31542,
                    "end": 31561,
                    "name": "SWAP6",
                    "source": 0
                  },
                  {
                    "begin": 31066,
                    "end": 31568,
                    "name": "SWAP5",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 31066,
                    "end": 31568,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 22259,
                    "end": 22559,
                    "name": "tag",
                    "source": 0,
                    "value": "276"
                  },
                  {
                    "begin": 22259,
                    "end": 22559,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 22342,
                    "end": 22360,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 22342,
                    "end": 22360,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 22338,
                    "end": 22424,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "307"
                  },
                  {
                    "begin": 22338,
                    "end": 22424,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 22383,
                    "end": 22413,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 22383,
                    "end": 22413,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "4B637E8F"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 22383,
                    "end": 22413,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 22383,
                    "end": 22413,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 22410,
                    "end": 22411,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 22383,
                    "end": 22413,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 22383,
                    "end": 22413,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 22383,
                    "end": 22413,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 2877,
                    "end": 2928,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 2850,
                    "end": 2868,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 2850,
                    "end": 2868,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 22383,
                    "end": 22413,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 2731,
                    "end": 2934,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 22338,
                    "end": 22424,
                    "name": "tag",
                    "source": 0,
                    "value": "307"
                  },
                  {
                    "begin": 22338,
                    "end": 22424,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 22437,
                    "end": 22453,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 22437,
                    "end": 22453,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 22433,
                    "end": 22519,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "309"
                  },
                  {
                    "begin": 22433,
                    "end": 22519,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 22476,
                    "end": 22508,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 22476,
                    "end": 22508,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "EC442F05"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 22476,
                    "end": 22508,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 22476,
                    "end": 22508,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 22505,
                    "end": 22506,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 22476,
                    "end": 22508,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 22476,
                    "end": 22508,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 22476,
                    "end": 22508,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 2877,
                    "end": 2928,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 2850,
                    "end": 2868,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 2850,
                    "end": 2868,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 22476,
                    "end": 22508,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 2731,
                    "end": 2934,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 22433,
                    "end": 22519,
                    "name": "tag",
                    "source": 0,
                    "value": "309"
                  },
                  {
                    "begin": 22433,
                    "end": 22519,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 22528,
                    "end": 22552,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "256"
                  },
                  {
                    "begin": 22536,
                    "end": 22540,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 22542,
                    "end": 22544,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 22546,
                    "end": 22551,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 22528,
                    "end": 22535,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "312"
                  },
                  {
                    "begin": 22528,
                    "end": 22552,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 3042,
                    "end": 3138,
                    "name": "tag",
                    "source": 0,
                    "value": "298"
                  },
                  {
                    "begin": 3042,
                    "end": 3138,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 3100,
                    "end": 3107,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 3126,
                    "end": 3131,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "208"
                  },
                  {
                    "begin": 3130,
                    "end": 3131,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 3126,
                    "end": 3127,
                    "name": "DUP5",
                    "source": 0
                  },
                  {
                    "begin": 3126,
                    "end": 3131,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "315"
                  },
                  {
                    "begin": 3126,
                    "end": 3131,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 3427,
                    "end": 3523,
                    "name": "tag",
                    "source": 0,
                    "value": "299"
                  },
                  {
                    "begin": 3427,
                    "end": 3523,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 3485,
                    "end": 3492,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 3511,
                    "end": 3516,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "208"
                  },
                  {
                    "begin": 3515,
                    "end": 3516,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 3511,
                    "end": 3512,
                    "name": "DUP5",
                    "source": 0
                  },
                  {
                    "begin": 3511,
                    "end": 3516,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "318"
                  },
                  {
                    "begin": 3511,
                    "end": 3516,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 2699,
                    "end": 2795,
                    "name": "tag",
                    "source": 0,
                    "value": "301"
                  },
                  {
                    "begin": 2699,
                    "end": 2795,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 2757,
                    "end": 2764,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 2783,
                    "end": 2788,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "208"
                  },
                  {
                    "begin": 2787,
                    "end": 2788,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 2783,
                    "end": 2784,
                    "name": "DUP5",
                    "source": 0
                  },
                  {
                    "begin": 2783,
                    "end": 2788,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "321"
                  },
                  {
                    "begin": 2783,
                    "end": 2788,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 22874,
                    "end": 23981,
                    "name": "tag",
                    "source": 0,
                    "value": "312"
                  },
                  {
                    "begin": 22874,
                    "end": 23981,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 22963,
                    "end": 22981,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 22963,
                    "end": 22981,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 22959,
                    "end": 23499,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "323"
                  },
                  {
                    "begin": 22959,
                    "end": 23499,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 23115,
                    "end": 23120,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 23099,
                    "end": 23111,
                    "name": "PUSH",
                    "source": 0,
                    "value": "2"
                  },
                  {
                    "begin": 23099,
                    "end": 23111,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 23099,
                    "end": 23120,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 23099,
                    "end": 23120,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 23099,
                    "end": 23120,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 23099,
                    "end": 23120,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "324"
                  },
                  {
                    "begin": 23099,
                    "end": 23120,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 23099,
                    "end": 23120,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 23099,
                    "end": 23120,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "325"
                  },
                  {
                    "begin": 23099,
                    "end": 23120,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 23099,
                    "end": 23120,
                    "name": "tag",
                    "source": 0,
                    "value": "324"
                  },
                  {
                    "begin": 23099,
                    "end": 23120,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 23099,
                    "end": 23120,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 23099,
                    "end": 23120,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 23099,
                    "end": 23120,
                    "name": "SSTORE",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 22959,
                    "end": 23499,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "326"
                  },
                  {
                    "begin": 22959,
                    "end": 23499,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 22959,
                    "end": 23499,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 22959,
                    "end": 23499,
                    "name": "tag",
                    "source": 0,
                    "value": "323"
                  },
                  {
                    "begin": 22959,
                    "end": 23499,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 23173,
                    "end": 23188,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 23173,
                    "end": 23188,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 23151,
                    "end": 23170,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 23173,
                    "end": 23188,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 23173,
                    "end": 23188,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 23173,
                    "end": 23188,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 23173,
                    "end": 23188,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 23173,
                    "end": 23188,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 23173,
                    "end": 23188,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 23173,
                    "end": 23188,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 23173,
                    "end": 23188,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 23173,
                    "end": 23188,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 23173,
                    "end": 23188,
                    "name": "KECCAK256",
                    "source": 0
                  },
                  {
                    "begin": 23173,
                    "end": 23188,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 23206,
                    "end": 23225,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 23206,
                    "end": 23225,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 23206,
                    "end": 23225,
                    "name": "LT",
                    "source": 0
                  },
                  {
                    "begin": 23202,
                    "end": 23317,
                    "name": "ISZERO",
                    "source": 0
                  },
                  {
                    "begin": 23202,
                    "end": 23317,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "327"
                  },
                  {
                    "begin": 23202,
                    "end": 23317,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 23252,
                    "end": 23302,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 23252,
                    "end": 23302,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "391434E3"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E2"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 23252,
                    "end": 23302,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 23252,
                    "end": 23302,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 9090,
                    "end": 9122,
                    "name": "DUP6",
                    "source": 1
                  },
                  {
                    "begin": 9090,
                    "end": 9122,
                    "name": "AND",
                    "source": 1
                  },
                  {
                    "begin": 23252,
                    "end": 23302,
                    "name": "PUSH",
                    "source": 0,
                    "value": "4"
                  },
                  {
                    "begin": 23252,
                    "end": 23302,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 23252,
                    "end": 23302,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 9072,
                    "end": 9123,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 9139,
                    "end": 9157,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 9139,
                    "end": 9157,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 9139,
                    "end": 9157,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 9132,
                    "end": 9166,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 9132,
                    "end": 9166,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 9132,
                    "end": 9166,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 9182,
                    "end": 9200,
                    "name": "PUSH",
                    "source": 1,
                    "value": "44"
                  },
                  {
                    "begin": 9182,
                    "end": 9200,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 9182,
                    "end": 9200,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 9175,
                    "end": 9209,
                    "name": "DUP4",
                    "source": 1
                  },
                  {
                    "begin": 9175,
                    "end": 9209,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 9175,
                    "end": 9209,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 9045,
                    "end": 9063,
                    "name": "PUSH",
                    "source": 1,
                    "value": "64"
                  },
                  {
                    "begin": 9045,
                    "end": 9063,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 23252,
                    "end": 23302,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "164"
                  },
                  {
                    "begin": 8870,
                    "end": 9215,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 23202,
                    "end": 23317,
                    "name": "tag",
                    "source": 0,
                    "value": "327"
                  },
                  {
                    "begin": 23202,
                    "end": 23317,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 23437,
                    "end": 23452,
                    "name": "DUP5",
                    "source": 0
                  },
                  {
                    "begin": 23437,
                    "end": 23452,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 23437,
                    "end": 23446,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 23437,
                    "end": 23452,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 23437,
                    "end": 23452,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 23437,
                    "end": 23452,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 23437,
                    "end": 23452,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 23437,
                    "end": 23452,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 23437,
                    "end": 23452,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 23437,
                    "end": 23452,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 23437,
                    "end": 23452,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 23437,
                    "end": 23452,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 23437,
                    "end": 23452,
                    "name": "KECCAK256",
                    "source": 0
                  },
                  {
                    "begin": 23455,
                    "end": 23474,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 23455,
                    "end": 23474,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 23455,
                    "end": 23474,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 23455,
                    "end": 23474,
                    "name": "SUB",
                    "source": 0
                  },
                  {
                    "begin": 23437,
                    "end": 23474,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 23437,
                    "end": 23474,
                    "name": "SSTORE",
                    "source": 0
                  },
                  {
                    "begin": 22959,
                    "end": 23499,
                    "name": "tag",
                    "source": 0,
                    "value": "326"
                  },
                  {
                    "begin": 22959,
                    "end": 23499,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 23513,
                    "end": 23529,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 23513,
                    "end": 23529,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 23509,
                    "end": 23934,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "330"
                  },
                  {
                    "begin": 23509,
                    "end": 23934,
                    "name": "JUMPI",
                    "source": 0
                  },
                  {
                    "begin": 23676,
                    "end": 23688,
                    "name": "PUSH",
                    "source": 0,
                    "value": "2"
                  },
                  {
                    "begin": 23676,
                    "end": 23697,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 23676,
                    "end": 23697,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 23676,
                    "end": 23697,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 23676,
                    "end": 23697,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 23676,
                    "end": 23697,
                    "name": "SUB",
                    "source": 0
                  },
                  {
                    "begin": 23676,
                    "end": 23697,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 23676,
                    "end": 23697,
                    "name": "SSTORE",
                    "source": 0
                  },
                  {
                    "begin": 23509,
                    "end": 23934,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "331"
                  },
                  {
                    "begin": 23509,
                    "end": 23934,
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 23509,
                    "end": 23934,
                    "name": "tag",
                    "source": 0,
                    "value": "330"
                  },
                  {
                    "begin": 23509,
                    "end": 23934,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 23887,
                    "end": 23900,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 23887,
                    "end": 23900,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 23887,
                    "end": 23896,
                    "name": "PUSH",
                    "source": 0,
                    "value": "0"
                  },
                  {
                    "begin": 23887,
                    "end": 23900,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 23887,
                    "end": 23900,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 23887,
                    "end": 23900,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 23887,
                    "end": 23900,
                    "name": "PUSH",
                    "source": 0,
                    "value": "20"
                  },
                  {
                    "begin": 23887,
                    "end": 23900,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": 23887,
                    "end": 23900,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 23887,
                    "end": 23900,
                    "name": "MSTORE",
                    "source": 0
                  },
                  {
                    "begin": 23887,
                    "end": 23900,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 23887,
                    "end": 23900,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 23887,
                    "end": 23900,
                    "name": "KECCAK256",
                    "source": 0
                  },
                  {
                    "begin": 23887,
                    "end": 23909,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 23887,
                    "end": 23909,
                    "name": "SLOAD",
                    "source": 0
                  },
                  {
                    "begin": 23887,
                    "end": 23909,
                    "name": "DUP3",
                    "source": 0
                  },
                  {
                    "begin": 23887,
                    "end": 23909,
                    "name": "ADD",
                    "source": 0
                  },
                  {
                    "begin": 23887,
                    "end": 23909,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 23887,
                    "end": 23909,
                    "name": "SSTORE",
                    "source": 0
                  },
                  {
                    "begin": 23509,
                    "end": 23934,
                    "name": "tag",
                    "source": 0,
                    "value": "331"
                  },
                  {
                    "begin": 23509,
                    "end": 23934,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 23964,
                    "end": 23966,
                    "name": "DUP2",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 23949,
                    "end": 23974,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 23958,
                    "end": 23962,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 23949,
                    "end": 23974,
                    "name": "AND",
                    "source": 0
                  },
                  {
                    "begin": 23949,
                    "end": 23974,
                    "name": "PUSH",
                    "source": 0,
                    "value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
                  },
                  {
                    "begin": 23968,
                    "end": 23973,
                    "name": "DUP4",
                    "source": 0
                  },
                  {
                    "begin": 23949,
                    "end": 23974,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 23949,
                    "end": 23974,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 23949,
                    "end": 23974,
                    "name": "PUSH [tag]",
                    "source": 0,
                    "value": "332"
                  },
                  {
                    "begin": 23949,
                    "end": 23974,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 1354,
                    "end": 1379,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 1354,
                    "end": 1379,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 1342,
                    "end": 1344,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 1327,
                    "end": 1345,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 1327,
                    "end": 1345,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 1208,
                    "end": 1385,
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 23949,
                    "end": 23974,
                    "name": "tag",
                    "source": 0,
                    "value": "332"
                  },
                  {
                    "begin": 23949,
                    "end": 23974,
                    "name": "JUMPDEST",
                    "source": 0
                  },
                  {
                    "begin": 23949,
                    "end": 23974,
                    "name": "PUSH",
                    "source": 0,
                    "value": "40"
                  },
                  {
                    "begin": 23949,
                    "end": 23974,
                    "name": "MLOAD",
                    "source": 0
                  },
                  {
                    "begin": 23949,
                    "end": 23974,
                    "name": "DUP1",
                    "source": 0
                  },
                  {
                    "begin": 23949,
                    "end": 23974,
                    "name": "SWAP2",
                    "source": 0
                  },
                  {
                    "begin": 23949,
                    "end": 23974,
                    "name": "SUB",
                    "source": 0
                  },
                  {
                    "begin": 23949,
                    "end": 23974,
                    "name": "SWAP1",
                    "source": 0
                  },
                  {
                    "begin": 23949,
                    "end": 23974,
                    "name": "LOG3",
                    "source": 0
                  },
                  {
                    "begin": 22874,
                    "end": 23981,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 22874,
                    "end": 23981,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 22874,
                    "end": 23981,
                    "name": "POP",
                    "source": 0
                  },
                  {
                    "begin": 22874,
                    "end": 23981,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 0
                  },
                  {
                    "begin": 14,
                    "end": 303,
                    "name": "tag",
                    "source": 1,
                    "value": "333"
                  },
                  {
                    "begin": 14,
                    "end": 303,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 56,
                    "end": 59,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 94,
                    "end": 99,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 88,
                    "end": 100,
                    "name": "MLOAD",
                    "source": 1
                  },
                  {
                    "begin": 121,
                    "end": 127,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 116,
                    "end": 119,
                    "name": "DUP5",
                    "source": 1
                  },
                  {
                    "begin": 109,
                    "end": 128,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 177,
                    "end": 183,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 170,
                    "end": 174,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 163,
                    "end": 168,
                    "name": "DUP5",
                    "source": 1
                  },
                  {
                    "begin": 159,
                    "end": 175,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 152,
                    "end": 156,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 147,
                    "end": 150,
                    "name": "DUP7",
                    "source": 1
                  },
                  {
                    "begin": 143,
                    "end": 157,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 137,
                    "end": 184,
                    "name": "MCOPY",
                    "source": 1
                  },
                  {
                    "begin": 229,
                    "end": 230,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 222,
                    "end": 226,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 213,
                    "end": 219,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 208,
                    "end": 211,
                    "name": "DUP7",
                    "source": 1
                  },
                  {
                    "begin": 204,
                    "end": 220,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 200,
                    "end": 227,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 193,
                    "end": 231,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 292,
                    "end": 296,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 285,
                    "end": 287,
                    "name": "PUSH",
                    "source": 1,
                    "value": "1F"
                  },
                  {
                    "begin": 281,
                    "end": 288,
                    "name": "NOT",
                    "source": 1
                  },
                  {
                    "begin": 276,
                    "end": 278,
                    "name": "PUSH",
                    "source": 1,
                    "value": "1F"
                  },
                  {
                    "begin": 268,
                    "end": 274,
                    "name": "DUP4",
                    "source": 1
                  },
                  {
                    "begin": 264,
                    "end": 279,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 260,
                    "end": 289,
                    "name": "AND",
                    "source": 1
                  },
                  {
                    "begin": 255,
                    "end": 258,
                    "name": "DUP6",
                    "source": 1
                  },
                  {
                    "begin": 251,
                    "end": 290,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 247,
                    "end": 297,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 240,
                    "end": 297,
                    "name": "SWAP2",
                    "source": 1
                  },
                  {
                    "begin": 240,
                    "end": 297,
                    "name": "POP",
                    "source": 1
                  },
                  {
                    "begin": 240,
                    "end": 297,
                    "name": "POP",
                    "source": 1
                  },
                  {
                    "begin": 14,
                    "end": 303,
                    "name": "SWAP3",
                    "source": 1
                  },
                  {
                    "begin": 14,
                    "end": 303,
                    "name": "SWAP2",
                    "source": 1
                  },
                  {
                    "begin": 14,
                    "end": 303,
                    "name": "POP",
                    "source": 1
                  },
                  {
                    "begin": 14,
                    "end": 303,
                    "name": "POP",
                    "source": 1
                  },
                  {
                    "begin": 14,
                    "end": 303,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 308,
                    "end": 528,
                    "name": "tag",
                    "source": 1,
                    "value": "38"
                  },
                  {
                    "begin": 308,
                    "end": 528,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 457,
                    "end": 459,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 446,
                    "end": 455,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 439,
                    "end": 460,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 420,
                    "end": 424,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 477,
                    "end": 522,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "208"
                  },
                  {
                    "begin": 518,
                    "end": 520,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 507,
                    "end": 516,
                    "name": "DUP4",
                    "source": 1
                  },
                  {
                    "begin": 503,
                    "end": 521,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 495,
                    "end": 501,
                    "name": "DUP5",
                    "source": 1
                  },
                  {
                    "begin": 477,
                    "end": 522,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "333"
                  },
                  {
                    "begin": 477,
                    "end": 522,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 533,
                    "end": 706,
                    "name": "tag",
                    "source": 1,
                    "value": "334"
                  },
                  {
                    "begin": 533,
                    "end": 706,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 601,
                    "end": 621,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 601,
                    "end": 621,
                    "name": "CALLDATALOAD",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "A0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SUB",
                    "source": -1
                  },
                  {
                    "begin": 650,
                    "end": 681,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 650,
                    "end": 681,
                    "name": "AND",
                    "source": 1
                  },
                  {
                    "begin": 640,
                    "end": 682,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 640,
                    "end": 682,
                    "name": "EQ",
                    "source": 1
                  },
                  {
                    "begin": 630,
                    "end": 700,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "341"
                  },
                  {
                    "begin": 630,
                    "end": 700,
                    "name": "JUMPI",
                    "source": 1
                  },
                  {
                    "begin": 696,
                    "end": 697,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 693,
                    "end": 694,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 686,
                    "end": 698,
                    "name": "REVERT",
                    "source": 1
                  },
                  {
                    "begin": 630,
                    "end": 700,
                    "name": "tag",
                    "source": 1,
                    "value": "341"
                  },
                  {
                    "begin": 630,
                    "end": 700,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 533,
                    "end": 706,
                    "name": "SWAP2",
                    "source": 1
                  },
                  {
                    "begin": 533,
                    "end": 706,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 533,
                    "end": 706,
                    "name": "POP",
                    "source": 1
                  },
                  {
                    "begin": 533,
                    "end": 706,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 711,
                    "end": 1011,
                    "name": "tag",
                    "source": 1,
                    "value": "42"
                  },
                  {
                    "begin": 711,
                    "end": 1011,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 779,
                    "end": 785,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 787,
                    "end": 793,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 840,
                    "end": 842,
                    "name": "PUSH",
                    "source": 1,
                    "value": "40"
                  },
                  {
                    "begin": 828,
                    "end": 837,
                    "name": "DUP4",
                    "source": 1
                  },
                  {
                    "begin": 819,
                    "end": 826,
                    "name": "DUP6",
                    "source": 1
                  },
                  {
                    "begin": 815,
                    "end": 838,
                    "name": "SUB",
                    "source": 1
                  },
                  {
                    "begin": 811,
                    "end": 843,
                    "name": "SLT",
                    "source": 1
                  },
                  {
                    "begin": 808,
                    "end": 860,
                    "name": "ISZERO",
                    "source": 1
                  },
                  {
                    "begin": 808,
                    "end": 860,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "343"
                  },
                  {
                    "begin": 808,
                    "end": 860,
                    "name": "JUMPI",
                    "source": 1
                  },
                  {
                    "begin": 856,
                    "end": 857,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 853,
                    "end": 854,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 846,
                    "end": 858,
                    "name": "REVERT",
                    "source": 1
                  },
                  {
                    "begin": 808,
                    "end": 860,
                    "name": "tag",
                    "source": 1,
                    "value": "343"
                  },
                  {
                    "begin": 808,
                    "end": 860,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 879,
                    "end": 908,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "344"
                  },
                  {
                    "begin": 898,
                    "end": 907,
                    "name": "DUP4",
                    "source": 1
                  },
                  {
                    "begin": 879,
                    "end": 908,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "334"
                  },
                  {
                    "begin": 879,
                    "end": 908,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 879,
                    "end": 908,
                    "name": "tag",
                    "source": 1,
                    "value": "344"
                  },
                  {
                    "begin": 879,
                    "end": 908,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 869,
                    "end": 908,
                    "name": "SWAP5",
                    "source": 1
                  },
                  {
                    "begin": 977,
                    "end": 979,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 962,
                    "end": 980,
                    "name": "SWAP4",
                    "source": 1
                  },
                  {
                    "begin": 962,
                    "end": 980,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 962,
                    "end": 980,
                    "name": "SWAP4",
                    "source": 1
                  },
                  {
                    "begin": 962,
                    "end": 980,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 949,
                    "end": 981,
                    "name": "CALLDATALOAD",
                    "source": 1
                  },
                  {
                    "begin": 949,
                    "end": 981,
                    "name": "SWAP4",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 711,
                    "end": 1011,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 1390,
                    "end": 1764,
                    "name": "tag",
                    "source": 1,
                    "value": "54"
                  },
                  {
                    "begin": 1390,
                    "end": 1764,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 1467,
                    "end": 1473,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 1475,
                    "end": 1481,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 1483,
                    "end": 1489,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 1536,
                    "end": 1538,
                    "name": "PUSH",
                    "source": 1,
                    "value": "60"
                  },
                  {
                    "begin": 1524,
                    "end": 1533,
                    "name": "DUP5",
                    "source": 1
                  },
                  {
                    "begin": 1515,
                    "end": 1522,
                    "name": "DUP7",
                    "source": 1
                  },
                  {
                    "begin": 1511,
                    "end": 1534,
                    "name": "SUB",
                    "source": 1
                  },
                  {
                    "begin": 1507,
                    "end": 1539,
                    "name": "SLT",
                    "source": 1
                  },
                  {
                    "begin": 1504,
                    "end": 1556,
                    "name": "ISZERO",
                    "source": 1
                  },
                  {
                    "begin": 1504,
                    "end": 1556,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "348"
                  },
                  {
                    "begin": 1504,
                    "end": 1556,
                    "name": "JUMPI",
                    "source": 1
                  },
                  {
                    "begin": 1552,
                    "end": 1553,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 1549,
                    "end": 1550,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 1542,
                    "end": 1554,
                    "name": "REVERT",
                    "source": 1
                  },
                  {
                    "begin": 1504,
                    "end": 1556,
                    "name": "tag",
                    "source": 1,
                    "value": "348"
                  },
                  {
                    "begin": 1504,
                    "end": 1556,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 1575,
                    "end": 1604,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "349"
                  },
                  {
                    "begin": 1594,
                    "end": 1603,
                    "name": "DUP5",
                    "source": 1
                  },
                  {
                    "begin": 1575,
                    "end": 1604,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "334"
                  },
                  {
                    "begin": 1575,
                    "end": 1604,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 1575,
                    "end": 1604,
                    "name": "tag",
                    "source": 1,
                    "value": "349"
                  },
                  {
                    "begin": 1575,
                    "end": 1604,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 1565,
                    "end": 1604,
                    "name": "SWAP3",
                    "source": 1
                  },
                  {
                    "begin": 1565,
                    "end": 1604,
                    "name": "POP",
                    "source": 1
                  },
                  {
                    "begin": 1623,
                    "end": 1661,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "350"
                  },
                  {
                    "begin": 1657,
                    "end": 1659,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 1646,
                    "end": 1655,
                    "name": "DUP6",
                    "source": 1
                  },
                  {
                    "begin": 1642,
                    "end": 1660,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 1623,
                    "end": 1661,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "334"
                  },
                  {
                    "begin": 1623,
                    "end": 1661,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 1623,
                    "end": 1661,
                    "name": "tag",
                    "source": 1,
                    "value": "350"
                  },
                  {
                    "begin": 1623,
                    "end": 1661,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 1390,
                    "end": 1764,
                    "name": "SWAP3",
                    "source": 1
                  },
                  {
                    "begin": 1390,
                    "end": 1764,
                    "name": "SWAP6",
                    "source": 1
                  },
                  {
                    "begin": 1613,
                    "end": 1661,
                    "name": "SWAP3",
                    "source": 1
                  },
                  {
                    "begin": 1613,
                    "end": 1661,
                    "name": "SWAP5",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 1730,
                    "end": 1732,
                    "name": "PUSH",
                    "source": 1,
                    "value": "40"
                  },
                  {
                    "begin": 1715,
                    "end": 1733,
                    "name": "SWAP2",
                    "source": 1
                  },
                  {
                    "begin": 1715,
                    "end": 1733,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 1715,
                    "end": 1733,
                    "name": "SWAP2",
                    "source": 1
                  },
                  {
                    "begin": 1715,
                    "end": 1733,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 1702,
                    "end": 1734,
                    "name": "CALLDATALOAD",
                    "source": 1
                  },
                  {
                    "begin": 1702,
                    "end": 1734,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 1390,
                    "end": 1764,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 1958,
                    "end": 2304,
                    "name": "tag",
                    "source": 1,
                    "value": "77"
                  },
                  {
                    "begin": 1958,
                    "end": 2304,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 2026,
                    "end": 2032,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 2034,
                    "end": 2040,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 2087,
                    "end": 2089,
                    "name": "PUSH",
                    "source": 1,
                    "value": "40"
                  },
                  {
                    "begin": 2075,
                    "end": 2084,
                    "name": "DUP4",
                    "source": 1
                  },
                  {
                    "begin": 2066,
                    "end": 2073,
                    "name": "DUP6",
                    "source": 1
                  },
                  {
                    "begin": 2062,
                    "end": 2085,
                    "name": "SUB",
                    "source": 1
                  },
                  {
                    "begin": 2058,
                    "end": 2090,
                    "name": "SLT",
                    "source": 1
                  },
                  {
                    "begin": 2055,
                    "end": 2107,
                    "name": "ISZERO",
                    "source": 1
                  },
                  {
                    "begin": 2055,
                    "end": 2107,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "353"
                  },
                  {
                    "begin": 2055,
                    "end": 2107,
                    "name": "JUMPI",
                    "source": 1
                  },
                  {
                    "begin": 2103,
                    "end": 2104,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 2100,
                    "end": 2101,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 2093,
                    "end": 2105,
                    "name": "REVERT",
                    "source": 1
                  },
                  {
                    "begin": 2055,
                    "end": 2107,
                    "name": "tag",
                    "source": 1,
                    "value": "353"
                  },
                  {
                    "begin": 2055,
                    "end": 2107,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 2148,
                    "end": 2171,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 2148,
                    "end": 2171,
                    "name": "CALLDATALOAD",
                    "source": 1
                  },
                  {
                    "begin": 2148,
                    "end": 2171,
                    "name": "SWAP3",
                    "source": 1
                  },
                  {
                    "begin": 2268,
                    "end": 2270,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 2253,
                    "end": 2271,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 2253,
                    "end": 2271,
                    "name": "SWAP2",
                    "source": 1
                  },
                  {
                    "begin": 2253,
                    "end": 2271,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 2240,
                    "end": 2272,
                    "name": "CALLDATALOAD",
                    "source": 1
                  },
                  {
                    "begin": 2240,
                    "end": 2272,
                    "name": "SWAP2",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 1958,
                    "end": 2304,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 2309,
                    "end": 2535,
                    "name": "tag",
                    "source": 1,
                    "value": "86"
                  },
                  {
                    "begin": 2309,
                    "end": 2535,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 2368,
                    "end": 2374,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 2421,
                    "end": 2423,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 2409,
                    "end": 2418,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 2400,
                    "end": 2407,
                    "name": "DUP5",
                    "source": 1
                  },
                  {
                    "begin": 2396,
                    "end": 2419,
                    "name": "SUB",
                    "source": 1
                  },
                  {
                    "begin": 2392,
                    "end": 2424,
                    "name": "SLT",
                    "source": 1
                  },
                  {
                    "begin": 2389,
                    "end": 2441,
                    "name": "ISZERO",
                    "source": 1
                  },
                  {
                    "begin": 2389,
                    "end": 2441,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "355"
                  },
                  {
                    "begin": 2389,
                    "end": 2441,
                    "name": "JUMPI",
                    "source": 1
                  },
                  {
                    "begin": 2437,
                    "end": 2438,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 2434,
                    "end": 2435,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 2427,
                    "end": 2439,
                    "name": "REVERT",
                    "source": 1
                  },
                  {
                    "begin": 2389,
                    "end": 2441,
                    "name": "tag",
                    "source": 1,
                    "value": "355"
                  },
                  {
                    "begin": 2389,
                    "end": 2441,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 2482,
                    "end": 2505,
                    "name": "CALLDATALOAD",
                    "source": 1
                  },
                  {
                    "begin": 2482,
                    "end": 2505,
                    "name": "SWAP2",
                    "source": 1
                  },
                  {
                    "begin": 2309,
                    "end": 2535,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 2309,
                    "end": 2535,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 2540,
                    "end": 2726,
                    "name": "tag",
                    "source": 1,
                    "value": "91"
                  },
                  {
                    "begin": 2540,
                    "end": 2726,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 2599,
                    "end": 2605,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 2652,
                    "end": 2654,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 2640,
                    "end": 2649,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 2631,
                    "end": 2638,
                    "name": "DUP5",
                    "source": 1
                  },
                  {
                    "begin": 2627,
                    "end": 2650,
                    "name": "SUB",
                    "source": 1
                  },
                  {
                    "begin": 2623,
                    "end": 2655,
                    "name": "SLT",
                    "source": 1
                  },
                  {
                    "begin": 2620,
                    "end": 2672,
                    "name": "ISZERO",
                    "source": 1
                  },
                  {
                    "begin": 2620,
                    "end": 2672,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "357"
                  },
                  {
                    "begin": 2620,
                    "end": 2672,
                    "name": "JUMPI",
                    "source": 1
                  },
                  {
                    "begin": 2668,
                    "end": 2669,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 2665,
                    "end": 2666,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 2658,
                    "end": 2670,
                    "name": "REVERT",
                    "source": 1
                  },
                  {
                    "begin": 2620,
                    "end": 2672,
                    "name": "tag",
                    "source": 1,
                    "value": "357"
                  },
                  {
                    "begin": 2620,
                    "end": 2672,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 2691,
                    "end": 2720,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "208"
                  },
                  {
                    "begin": 2710,
                    "end": 2719,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 2691,
                    "end": 2720,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "334"
                  },
                  {
                    "begin": 2691,
                    "end": 2720,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 2939,
                    "end": 3199,
                    "name": "tag",
                    "source": 1,
                    "value": "131"
                  },
                  {
                    "begin": 2939,
                    "end": 3199,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 3007,
                    "end": 3013,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 3015,
                    "end": 3021,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 3068,
                    "end": 3070,
                    "name": "PUSH",
                    "source": 1,
                    "value": "40"
                  },
                  {
                    "begin": 3056,
                    "end": 3065,
                    "name": "DUP4",
                    "source": 1
                  },
                  {
                    "begin": 3047,
                    "end": 3054,
                    "name": "DUP6",
                    "source": 1
                  },
                  {
                    "begin": 3043,
                    "end": 3066,
                    "name": "SUB",
                    "source": 1
                  },
                  {
                    "begin": 3039,
                    "end": 3071,
                    "name": "SLT",
                    "source": 1
                  },
                  {
                    "begin": 3036,
                    "end": 3088,
                    "name": "ISZERO",
                    "source": 1
                  },
                  {
                    "begin": 3036,
                    "end": 3088,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "361"
                  },
                  {
                    "begin": 3036,
                    "end": 3088,
                    "name": "JUMPI",
                    "source": 1
                  },
                  {
                    "begin": 3084,
                    "end": 3085,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 3081,
                    "end": 3082,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 3074,
                    "end": 3086,
                    "name": "REVERT",
                    "source": 1
                  },
                  {
                    "begin": 3036,
                    "end": 3088,
                    "name": "tag",
                    "source": 1,
                    "value": "361"
                  },
                  {
                    "begin": 3036,
                    "end": 3088,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 3107,
                    "end": 3136,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "362"
                  },
                  {
                    "begin": 3126,
                    "end": 3135,
                    "name": "DUP4",
                    "source": 1
                  },
                  {
                    "begin": 3107,
                    "end": 3136,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "334"
                  },
                  {
                    "begin": 3107,
                    "end": 3136,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 3107,
                    "end": 3136,
                    "name": "tag",
                    "source": 1,
                    "value": "362"
                  },
                  {
                    "begin": 3107,
                    "end": 3136,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 3097,
                    "end": 3136,
                    "name": "SWAP2",
                    "source": 1
                  },
                  {
                    "begin": 3097,
                    "end": 3136,
                    "name": "POP",
                    "source": 1
                  },
                  {
                    "begin": 3155,
                    "end": 3193,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "363"
                  },
                  {
                    "begin": 3189,
                    "end": 3191,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 3178,
                    "end": 3187,
                    "name": "DUP5",
                    "source": 1
                  },
                  {
                    "begin": 3174,
                    "end": 3192,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 3155,
                    "end": 3193,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "334"
                  },
                  {
                    "begin": 3155,
                    "end": 3193,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 3155,
                    "end": 3193,
                    "name": "tag",
                    "source": 1,
                    "value": "363"
                  },
                  {
                    "begin": 3155,
                    "end": 3193,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 3145,
                    "end": 3193,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 3145,
                    "end": 3193,
                    "name": "POP",
                    "source": 1
                  },
                  {
                    "begin": 2939,
                    "end": 3199,
                    "name": "SWAP3",
                    "source": 1
                  },
                  {
                    "begin": 2939,
                    "end": 3199,
                    "name": "POP",
                    "source": 1
                  },
                  {
                    "begin": 2939,
                    "end": 3199,
                    "name": "SWAP3",
                    "source": 1
                  },
                  {
                    "begin": 2939,
                    "end": 3199,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 2939,
                    "end": 3199,
                    "name": "POP",
                    "source": 1
                  },
                  {
                    "begin": 2939,
                    "end": 3199,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 3204,
                    "end": 3584,
                    "name": "tag",
                    "source": 1,
                    "value": "151"
                  },
                  {
                    "begin": 3204,
                    "end": 3584,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 3283,
                    "end": 3284,
                    "name": "PUSH",
                    "source": 1,
                    "value": "1"
                  },
                  {
                    "begin": 3279,
                    "end": 3291,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 3279,
                    "end": 3291,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 3279,
                    "end": 3291,
                    "name": "SHR",
                    "source": 1
                  },
                  {
                    "begin": 3279,
                    "end": 3291,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 3326,
                    "end": 3338,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 3326,
                    "end": 3338,
                    "name": "AND",
                    "source": 1
                  },
                  {
                    "begin": 3326,
                    "end": 3338,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 3347,
                    "end": 3408,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "365"
                  },
                  {
                    "begin": 3347,
                    "end": 3408,
                    "name": "JUMPI",
                    "source": 1
                  },
                  {
                    "begin": 3401,
                    "end": 3405,
                    "name": "PUSH",
                    "source": 1,
                    "value": "7F"
                  },
                  {
                    "begin": 3393,
                    "end": 3399,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 3389,
                    "end": 3406,
                    "name": "AND",
                    "source": 1
                  },
                  {
                    "begin": 3379,
                    "end": 3406,
                    "name": "SWAP2",
                    "source": 1
                  },
                  {
                    "begin": 3379,
                    "end": 3406,
                    "name": "POP",
                    "source": 1
                  },
                  {
                    "begin": 3347,
                    "end": 3408,
                    "name": "tag",
                    "source": 1,
                    "value": "365"
                  },
                  {
                    "begin": 3347,
                    "end": 3408,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 3454,
                    "end": 3456,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 3446,
                    "end": 3452,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 3443,
                    "end": 3457,
                    "name": "LT",
                    "source": 1
                  },
                  {
                    "begin": 3423,
                    "end": 3441,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 3420,
                    "end": 3458,
                    "name": "SUB",
                    "source": 1
                  },
                  {
                    "begin": 3417,
                    "end": 3578,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "366"
                  },
                  {
                    "begin": 3417,
                    "end": 3578,
                    "name": "JUMPI",
                    "source": 1
                  },
                  {
                    "begin": 3500,
                    "end": 3510,
                    "name": "PUSH",
                    "source": 1,
                    "value": "4E487B71"
                  },
                  {
                    "begin": 3495,
                    "end": 3498,
                    "name": "PUSH",
                    "source": 1,
                    "value": "E0"
                  },
                  {
                    "begin": 3491,
                    "end": 3511,
                    "name": "SHL",
                    "source": 1
                  },
                  {
                    "begin": 3488,
                    "end": 3489,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 3481,
                    "end": 3512,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 3535,
                    "end": 3539,
                    "name": "PUSH",
                    "source": 1,
                    "value": "22"
                  },
                  {
                    "begin": 3532,
                    "end": 3533,
                    "name": "PUSH",
                    "source": 1,
                    "value": "4"
                  },
                  {
                    "begin": 3525,
                    "end": 3540,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 3563,
                    "end": 3567,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 3560,
                    "end": 3561,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 3553,
                    "end": 3568,
                    "name": "REVERT",
                    "source": 1
                  },
                  {
                    "begin": 3417,
                    "end": 3578,
                    "name": "tag",
                    "source": 1,
                    "value": "366"
                  },
                  {
                    "begin": 3417,
                    "end": 3578,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 3417,
                    "end": 3578,
                    "name": "POP",
                    "source": 1
                  },
                  {
                    "begin": 3204,
                    "end": 3584,
                    "name": "SWAP2",
                    "source": 1
                  },
                  {
                    "begin": 3204,
                    "end": 3584,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 3204,
                    "end": 3584,
                    "name": "POP",
                    "source": 1
                  },
                  {
                    "begin": 3204,
                    "end": 3584,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 4972,
                    "end": 5372,
                    "name": "tag",
                    "source": 1,
                    "value": "197"
                  },
                  {
                    "begin": 4972,
                    "end": 5372,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 5174,
                    "end": 5176,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 5156,
                    "end": 5177,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 5156,
                    "end": 5177,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 5156,
                    "end": 5177,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 5213,
                    "end": 5215,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 5193,
                    "end": 5211,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 5193,
                    "end": 5211,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 5193,
                    "end": 5211,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 5186,
                    "end": 5216,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 5252,
                    "end": 5286,
                    "name": "PUSH",
                    "source": 1,
                    "value": "6F6E6C79206665652072656365697665722063616E207472616E736665722066"
                  },
                  {
                    "begin": 5247,
                    "end": 5249,
                    "name": "PUSH",
                    "source": 1,
                    "value": "40"
                  },
                  {
                    "begin": 5232,
                    "end": 5250,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 5232,
                    "end": 5250,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 5225,
                    "end": 5287,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "756E6473"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "E0"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 5318,
                    "end": 5320,
                    "name": "PUSH",
                    "source": 1,
                    "value": "60"
                  },
                  {
                    "begin": 5303,
                    "end": 5321,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 5303,
                    "end": 5321,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 5296,
                    "end": 5330,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 5362,
                    "end": 5365,
                    "name": "PUSH",
                    "source": 1,
                    "value": "80"
                  },
                  {
                    "begin": 5347,
                    "end": 5366,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 5347,
                    "end": 5366,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 4972,
                    "end": 5372,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 5377,
                    "end": 5561,
                    "name": "tag",
                    "source": 1,
                    "value": "203"
                  },
                  {
                    "begin": 5377,
                    "end": 5561,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 5447,
                    "end": 5453,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 5500,
                    "end": 5502,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 5488,
                    "end": 5497,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 5479,
                    "end": 5486,
                    "name": "DUP5",
                    "source": 1
                  },
                  {
                    "begin": 5475,
                    "end": 5498,
                    "name": "SUB",
                    "source": 1
                  },
                  {
                    "begin": 5471,
                    "end": 5503,
                    "name": "SLT",
                    "source": 1
                  },
                  {
                    "begin": 5468,
                    "end": 5520,
                    "name": "ISZERO",
                    "source": 1
                  },
                  {
                    "begin": 5468,
                    "end": 5520,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "373"
                  },
                  {
                    "begin": 5468,
                    "end": 5520,
                    "name": "JUMPI",
                    "source": 1
                  },
                  {
                    "begin": 5516,
                    "end": 5517,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 5513,
                    "end": 5514,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 5506,
                    "end": 5518,
                    "name": "REVERT",
                    "source": 1
                  },
                  {
                    "begin": 5468,
                    "end": 5520,
                    "name": "tag",
                    "source": 1,
                    "value": "373"
                  },
                  {
                    "begin": 5468,
                    "end": 5520,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 5539,
                    "end": 5555,
                    "name": "MLOAD",
                    "source": 1
                  },
                  {
                    "begin": 5539,
                    "end": 5555,
                    "name": "SWAP2",
                    "source": 1
                  },
                  {
                    "begin": 5377,
                    "end": 5561,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 5377,
                    "end": 5561,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 5845,
                    "end": 6122,
                    "name": "tag",
                    "source": 1,
                    "value": "209"
                  },
                  {
                    "begin": 5845,
                    "end": 6122,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 5912,
                    "end": 5918,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 5965,
                    "end": 5967,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 5953,
                    "end": 5962,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 5944,
                    "end": 5951,
                    "name": "DUP5",
                    "source": 1
                  },
                  {
                    "begin": 5940,
                    "end": 5963,
                    "name": "SUB",
                    "source": 1
                  },
                  {
                    "begin": 5936,
                    "end": 5968,
                    "name": "SLT",
                    "source": 1
                  },
                  {
                    "begin": 5933,
                    "end": 5985,
                    "name": "ISZERO",
                    "source": 1
                  },
                  {
                    "begin": 5933,
                    "end": 5985,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "376"
                  },
                  {
                    "begin": 5933,
                    "end": 5985,
                    "name": "JUMPI",
                    "source": 1
                  },
                  {
                    "begin": 5981,
                    "end": 5982,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 5978,
                    "end": 5979,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 5971,
                    "end": 5983,
                    "name": "REVERT",
                    "source": 1
                  },
                  {
                    "begin": 5933,
                    "end": 5985,
                    "name": "tag",
                    "source": 1,
                    "value": "376"
                  },
                  {
                    "begin": 5933,
                    "end": 5985,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 6013,
                    "end": 6022,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 6007,
                    "end": 6023,
                    "name": "MLOAD",
                    "source": 1
                  },
                  {
                    "begin": 6066,
                    "end": 6071,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 6059,
                    "end": 6072,
                    "name": "ISZERO",
                    "source": 1
                  },
                  {
                    "begin": 6052,
                    "end": 6073,
                    "name": "ISZERO",
                    "source": 1
                  },
                  {
                    "begin": 6045,
                    "end": 6050,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 6042,
                    "end": 6074,
                    "name": "EQ",
                    "source": 1
                  },
                  {
                    "begin": 6032,
                    "end": 6092,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "208"
                  },
                  {
                    "begin": 6032,
                    "end": 6092,
                    "name": "JUMPI",
                    "source": 1
                  },
                  {
                    "begin": 6088,
                    "end": 6089,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 6085,
                    "end": 6086,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 6078,
                    "end": 6090,
                    "name": "REVERT",
                    "source": 1
                  },
                  {
                    "begin": 6127,
                    "end": 7318,
                    "name": "tag",
                    "source": 1,
                    "value": "226"
                  },
                  {
                    "begin": 6127,
                    "end": 7318,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 6635,
                    "end": 6638,
                    "name": "PUSH",
                    "source": 1,
                    "value": "C0"
                  },
                  {
                    "begin": 6624,
                    "end": 6633,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 6617,
                    "end": 6639,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 6676,
                    "end": 6678,
                    "name": "PUSH",
                    "source": 1,
                    "value": "17"
                  },
                  {
                    "begin": 6670,
                    "end": 6673,
                    "name": "PUSH",
                    "source": 1,
                    "value": "C0"
                  },
                  {
                    "begin": 6659,
                    "end": 6668,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 6655,
                    "end": 6674,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 6648,
                    "end": 6679,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 6716,
                    "end": 6741,
                    "name": "PUSH",
                    "source": 1,
                    "value": "546865207472616E7366657220616D6F756E74206F6620000000000000000000"
                  },
                  {
                    "begin": 6710,
                    "end": 6713,
                    "name": "PUSH",
                    "source": 1,
                    "value": "E0"
                  },
                  {
                    "begin": 6699,
                    "end": 6708,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 6695,
                    "end": 6714,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 6688,
                    "end": 6742,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 6780,
                    "end": 6786,
                    "name": "DUP4",
                    "source": 1
                  },
                  {
                    "begin": 6773,
                    "end": 6777,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 6762,
                    "end": 6771,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 6758,
                    "end": 6778,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 6751,
                    "end": 6787,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 6823,
                    "end": 6826,
                    "name": "PUSH",
                    "source": 1,
                    "value": "100"
                  },
                  {
                    "begin": 6818,
                    "end": 6820,
                    "name": "PUSH",
                    "source": 1,
                    "value": "40"
                  },
                  {
                    "begin": 6807,
                    "end": 6816,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 6803,
                    "end": 6821,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 6796,
                    "end": 6827,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 6864,
                    "end": 6866,
                    "name": "PUSH",
                    "source": 1,
                    "value": "15"
                  },
                  {
                    "begin": 6858,
                    "end": 6861,
                    "name": "PUSH",
                    "source": 1,
                    "value": "100"
                  },
                  {
                    "begin": 6847,
                    "end": 6856,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 6843,
                    "end": 6862,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 6836,
                    "end": 6867,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "1032BC31B2B2B239903A34329030B63637BBB2B21"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "5D"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 6898,
                    "end": 6901,
                    "name": "PUSH",
                    "source": 1,
                    "value": "120"
                  },
                  {
                    "begin": 6887,
                    "end": 6896,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 6883,
                    "end": 6902,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 6876,
                    "end": 6928,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 6964,
                    "end": 6967,
                    "name": "PUSH",
                    "source": 1,
                    "value": "140"
                  },
                  {
                    "begin": 6959,
                    "end": 6961,
                    "name": "PUSH",
                    "source": 1,
                    "value": "60"
                  },
                  {
                    "begin": 6948,
                    "end": 6957,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 6944,
                    "end": 6962,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 6937,
                    "end": 6968,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 6598,
                    "end": 6602,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 6991,
                    "end": 7037,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "379"
                  },
                  {
                    "begin": 7032,
                    "end": 7035,
                    "name": "PUSH",
                    "source": 1,
                    "value": "140"
                  },
                  {
                    "begin": 7021,
                    "end": 7030,
                    "name": "DUP4",
                    "source": 1
                  },
                  {
                    "begin": 7017,
                    "end": 7036,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 7009,
                    "end": 7015,
                    "name": "DUP6",
                    "source": 1
                  },
                  {
                    "begin": 6991,
                    "end": 7037,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "333"
                  },
                  {
                    "begin": 6991,
                    "end": 7037,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 6991,
                    "end": 7037,
                    "name": "tag",
                    "source": 1,
                    "value": "379"
                  },
                  {
                    "begin": 6991,
                    "end": 7037,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 7074,
                    "end": 7096,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 7074,
                    "end": 7096,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 7074,
                    "end": 7096,
                    "name": "SUB",
                    "source": 1
                  },
                  {
                    "begin": 7068,
                    "end": 7071,
                    "name": "PUSH",
                    "source": 1,
                    "value": "80"
                  },
                  {
                    "begin": 7053,
                    "end": 7072,
                    "name": "DUP5",
                    "source": 1
                  },
                  {
                    "begin": 7053,
                    "end": 7072,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 7046,
                    "end": 7097,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 7121,
                    "end": 7123,
                    "name": "PUSH",
                    "source": 1,
                    "value": "26"
                  },
                  {
                    "begin": 7106,
                    "end": 7124,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 7106,
                    "end": 7124,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 7159,
                    "end": 7193,
                    "name": "PUSH",
                    "source": 1,
                    "value": "206C696D69742E20546865206D6178696D756D20616C6C6F77656420616D6F75"
                  },
                  {
                    "begin": 7152,
                    "end": 7156,
                    "name": "PUSH",
                    "source": 1,
                    "value": "20"
                  },
                  {
                    "begin": 7140,
                    "end": 7157,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 7140,
                    "end": 7157,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 7133,
                    "end": 7194,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "373A1034B99"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "PUSH",
                    "source": -1,
                    "value": "D5"
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "SHL",
                    "source": -1
                  },
                  {
                    "begin": 7222,
                    "end": 7224,
                    "name": "PUSH",
                    "source": 1,
                    "value": "40"
                  },
                  {
                    "begin": 7210,
                    "end": 7225,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 7210,
                    "end": 7225,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 7203,
                    "end": 7236,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 7299,
                    "end": 7302,
                    "name": "PUSH",
                    "source": 1,
                    "value": "A0"
                  },
                  {
                    "begin": 7284,
                    "end": 7303,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 7284,
                    "end": 7303,
                    "name": "SWAP3",
                    "source": 1
                  },
                  {
                    "begin": 7284,
                    "end": 7303,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 7277,
                    "end": 7312,
                    "name": "SWAP3",
                    "source": 1
                  },
                  {
                    "begin": 7277,
                    "end": 7312,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 7277,
                    "end": 7312,
                    "name": "SWAP3",
                    "source": 1
                  },
                  {
                    "begin": 7277,
                    "end": 7312,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 7265,
                    "end": 7267,
                    "name": "PUSH",
                    "source": 1,
                    "value": "60"
                  },
                  {
                    "begin": 7253,
                    "end": 7268,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 7253,
                    "end": 7268,
                    "name": "SWAP4",
                    "source": 1
                  },
                  {
                    "begin": 6127,
                    "end": 7318,
                    "name": "SWAP3",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 6127,
                    "end": 7318,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 8080,
                    "end": 8207,
                    "name": "tag",
                    "source": 1,
                    "value": "335"
                  },
                  {
                    "begin": 8080,
                    "end": 8207,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 8141,
                    "end": 8151,
                    "name": "PUSH",
                    "source": 1,
                    "value": "4E487B71"
                  },
                  {
                    "begin": 8136,
                    "end": 8139,
                    "name": "PUSH",
                    "source": 1,
                    "value": "E0"
                  },
                  {
                    "begin": 8132,
                    "end": 8152,
                    "name": "SHL",
                    "source": 1
                  },
                  {
                    "begin": 8129,
                    "end": 8130,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 8122,
                    "end": 8153,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 8172,
                    "end": 8176,
                    "name": "PUSH",
                    "source": 1,
                    "value": "11"
                  },
                  {
                    "begin": 8169,
                    "end": 8170,
                    "name": "PUSH",
                    "source": 1,
                    "value": "4"
                  },
                  {
                    "begin": 8162,
                    "end": 8177,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 8196,
                    "end": 8200,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 8193,
                    "end": 8194,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 8186,
                    "end": 8201,
                    "name": "REVERT",
                    "source": 1
                  },
                  {
                    "begin": 8212,
                    "end": 8380,
                    "name": "tag",
                    "source": 1,
                    "value": "315"
                  },
                  {
                    "begin": 8212,
                    "end": 8380,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 8285,
                    "end": 8294,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 8285,
                    "end": 8294,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 8285,
                    "end": 8294,
                    "name": "MUL",
                    "source": 1
                  },
                  {
                    "begin": 8316,
                    "end": 8325,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 8316,
                    "end": 8325,
                    "name": "ISZERO",
                    "source": 1
                  },
                  {
                    "begin": 8333,
                    "end": 8348,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 8333,
                    "end": 8348,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 8333,
                    "end": 8348,
                    "name": "DIV",
                    "source": 1
                  },
                  {
                    "begin": 8327,
                    "end": 8349,
                    "name": "DUP5",
                    "source": 1
                  },
                  {
                    "begin": 8327,
                    "end": 8349,
                    "name": "EQ",
                    "source": 1
                  },
                  {
                    "begin": 8313,
                    "end": 8350,
                    "name": "OR",
                    "source": 1
                  },
                  {
                    "begin": 8303,
                    "end": 8374,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "156"
                  },
                  {
                    "begin": 8303,
                    "end": 8374,
                    "name": "JUMPI",
                    "source": 1
                  },
                  {
                    "begin": 8354,
                    "end": 8372,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "156"
                  },
                  {
                    "begin": 8354,
                    "end": 8372,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "335"
                  },
                  {
                    "begin": 8354,
                    "end": 8372,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 8385,
                    "end": 8602,
                    "name": "tag",
                    "source": 1,
                    "value": "318"
                  },
                  {
                    "begin": 8385,
                    "end": 8602,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 8425,
                    "end": 8426,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 8451,
                    "end": 8452,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 8441,
                    "end": 8573,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "387"
                  },
                  {
                    "begin": 8441,
                    "end": 8573,
                    "name": "JUMPI",
                    "source": 1
                  },
                  {
                    "begin": 8495,
                    "end": 8505,
                    "name": "PUSH",
                    "source": 1,
                    "value": "4E487B71"
                  },
                  {
                    "begin": 8490,
                    "end": 8493,
                    "name": "PUSH",
                    "source": 1,
                    "value": "E0"
                  },
                  {
                    "begin": 8486,
                    "end": 8506,
                    "name": "SHL",
                    "source": 1
                  },
                  {
                    "begin": 8483,
                    "end": 8484,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 8476,
                    "end": 8507,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 8530,
                    "end": 8534,
                    "name": "PUSH",
                    "source": 1,
                    "value": "12"
                  },
                  {
                    "begin": 8527,
                    "end": 8528,
                    "name": "PUSH",
                    "source": 1,
                    "value": "4"
                  },
                  {
                    "begin": 8520,
                    "end": 8535,
                    "name": "MSTORE",
                    "source": 1
                  },
                  {
                    "begin": 8558,
                    "end": 8562,
                    "name": "PUSH",
                    "source": 1,
                    "value": "24"
                  },
                  {
                    "begin": 8555,
                    "end": 8556,
                    "name": "PUSH",
                    "source": 1,
                    "value": "0"
                  },
                  {
                    "begin": 8548,
                    "end": 8563,
                    "name": "REVERT",
                    "source": 1
                  },
                  {
                    "begin": 8441,
                    "end": 8573,
                    "name": "tag",
                    "source": 1,
                    "value": "387"
                  },
                  {
                    "begin": 8441,
                    "end": 8573,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": -1,
                    "end": -1,
                    "name": "POP",
                    "source": -1
                  },
                  {
                    "begin": 8587,
                    "end": 8596,
                    "name": "DIV",
                    "source": 1
                  },
                  {
                    "begin": 8587,
                    "end": 8596,
                    "name": "SWAP1",
                    "source": 1
                  },
                  {
                    "begin": 8385,
                    "end": 8602,
                    "jumpType": "[out]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 8607,
                    "end": 8735,
                    "name": "tag",
                    "source": 1,
                    "value": "321"
                  },
                  {
                    "begin": 8607,
                    "end": 8735,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 8674,
                    "end": 8683,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 8674,
                    "end": 8683,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 8674,
                    "end": 8683,
                    "name": "SUB",
                    "source": 1
                  },
                  {
                    "begin": 8695,
                    "end": 8706,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 8695,
                    "end": 8706,
                    "name": "DUP2",
                    "source": 1
                  },
                  {
                    "begin": 8695,
                    "end": 8706,
                    "name": "GT",
                    "source": 1
                  },
                  {
                    "begin": 8692,
                    "end": 8729,
                    "name": "ISZERO",
                    "source": 1
                  },
                  {
                    "begin": 8692,
                    "end": 8729,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "156"
                  },
                  {
                    "begin": 8692,
                    "end": 8729,
                    "name": "JUMPI",
                    "source": 1
                  },
                  {
                    "begin": 8709,
                    "end": 8727,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "156"
                  },
                  {
                    "begin": 8709,
                    "end": 8727,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "335"
                  },
                  {
                    "begin": 8709,
                    "end": 8727,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 1
                  },
                  {
                    "begin": 8740,
                    "end": 8865,
                    "name": "tag",
                    "source": 1,
                    "value": "325"
                  },
                  {
                    "begin": 8740,
                    "end": 8865,
                    "name": "JUMPDEST",
                    "source": 1
                  },
                  {
                    "begin": 8805,
                    "end": 8814,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 8805,
                    "end": 8814,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 8805,
                    "end": 8814,
                    "name": "ADD",
                    "source": 1
                  },
                  {
                    "begin": 8826,
                    "end": 8836,
                    "name": "DUP1",
                    "source": 1
                  },
                  {
                    "begin": 8826,
                    "end": 8836,
                    "name": "DUP3",
                    "source": 1
                  },
                  {
                    "begin": 8826,
                    "end": 8836,
                    "name": "GT",
                    "source": 1
                  },
                  {
                    "begin": 8823,
                    "end": 8859,
                    "name": "ISZERO",
                    "source": 1
                  },
                  {
                    "begin": 8823,
                    "end": 8859,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "156"
                  },
                  {
                    "begin": 8823,
                    "end": 8859,
                    "name": "JUMPI",
                    "source": 1
                  },
                  {
                    "begin": 8839,
                    "end": 8857,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "156"
                  },
                  {
                    "begin": 8839,
                    "end": 8857,
                    "name": "PUSH [tag]",
                    "source": 1,
                    "value": "335"
                  },
                  {
                    "begin": 8839,
                    "end": 8857,
                    "jumpType": "[in]",
                    "name": "JUMP",
                    "source": 1
                  }
                ]
              }
            },
            "sourceList": [
              "0x111111111-1717590038739-TimeCoin.sol",
              "#utility.yul"
            ]
          },
          "methodIdentifiers": {
            "FEE_DENOMINATOR()": "d73792a9",
            "allowance(address,address)": "dd62ed3e",
            "approve(address,uint256)": "095ea7b3",
            "balanceOf(address)": "70a08231",
            "buyLimit()": "589210d9",
            "buyTax()": "4f7041a5",
            "clearStuckToken(address,uint256)": "77b54bad",
            "decimals()": "313ce567",
            "feeReceiver()": "b3f00674",
            "manualSend()": "f4293890",
            "name()": "06fdde03",
            "nextTransactionTimeGap()": "3f4be31e",
            "owner()": "8da5cb5b",
            "renounceOwnership()": "715018a6",
            "sellLimit()": "4f91e48c",
            "sellTax()": "cc1776d3",
            "setFee(uint256,uint256)": "52f7c988",
            "setFeeReceiver(address)": "efdcd974",
            "symbol()": "95d89b41",
            "totalSupply()": "18160ddd",
            "transfer(address,uint256)": "a9059cbb",
            "transferFrom(address,address,uint256)": "23b872dd",
            "transferLimit()": "f9432517",
            "transferOwnership(address)": "f2fde38b",
            "updateTransactionTimeLimit(uint256)": "5a029535"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"clearStuckToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTransactionTimeGap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"updateTransactionTimeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x111111111-1717590038739-TimeCoin.sol\":\"TimeCoin\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x111111111-1717590038739-TimeCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\\ncontract TimeCoin is ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    string private _name = \\\"Time Coin\\\";\\n    string private _symbol = \\\"TIME\\\";\\n    uint256 private _totalSupply;\\n\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n\\n    uint256 public buyTax;\\n    uint256 public sellTax;\\n\\n    uint256 public buyLimit;\\n    uint256 public sellLimit;\\n    uint256 public transferLimit;\\n\\n    uint256 public nextTransactionTimeGap = 2 minutes;\\n\\n    address public feeReceiver;\\n\\n    constructor() ERC20(_name, _symbol) Ownable(_msgSender()) {\\n        _totalSupply = 1000000 * 10**decimals();\\n\\n        _mint(_msgSender(), _totalSupply);\\n\\n        buyTax = 3;\\n        sellTax = 5;\\n\\n        buyLimit = 2;\\n        sellLimit = 5;\\n        transferLimit = 10;\\n\\n        feeReceiver = _msgSender();\\n    }\\n\\n    function isContract(address _addr) private view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    modifier limitProtect(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) {\\n        uint256 limit = transferLimit;\\n        string memory _type = \\\"transfer\\\";\\n\\n        if (isContract(sender)) {\\n            limit = buyLimit;\\n            _type = \\\"buy\\\";\\n        } else if (isContract(recipient)) {\\n            limit = sellLimit;\\n            _type = \\\"sell\\\";\\n        } else {\\n            limit = transferLimit;\\n            _type = \\\"transfer\\\";\\n        }\\n\\n        require(\\n            limit >= amount,\\n            string(\\n                abi.encode(\\n                    \\\"The transfer amount of \\\",\\n                    amount,\\n                    \\\" exceeds the allowed \\\",\\n                    _type,\\n                    \\\" limit. The maximum allowed amount is \\\",\\n                    limit\\n                )\\n            )\\n        );\\n\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function updateTransactionTimeLimit(uint256 _seconds) external onlyOwner {\\n        nextTransactionTimeGap = _seconds;\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        limitProtect(msg.sender, recipient, amount)\\n        returns (bool)\\n    {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n\\n        return _transferFrom(_msgSender(), recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(sender != address(0), \\\"Invalid sender\\\");\\n\\n        uint256 currentAllowance = allowance(sender, _msgSender());\\n        require(currentAllowance >= amount, \\\"Insufficient Allowance\\\");\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal limitProtect(sender, recipient, amount) returns (bool) {\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n\\n        uint256 amountReceived = takeFee(sender, amount);\\n        _transfer(sender, recipient, amountReceived);\\n\\n        return true;\\n    }\\n\\n    function takeFee(address sender, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 fee = sender == _msgSender() ? sellTax : buyTax;\\n\\n        uint256 feeAmount = amount.mul(fee).div(FEE_DENOMINATOR);\\n        uint256 transferable_amount = amount.sub(feeAmount);\\n\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n        _transfer(sender, feeReceiver, feeAmount);\\n\\n        return transferable_amount;\\n    }\\n\\n    function manualSend() external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n        payable(feeReceiver).transfer(address(this).balance);\\n    }\\n\\n    function clearStuckToken(address tokenAddress, uint256 tokens)\\n        external\\n        returns (bool success)\\n    {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n\\n        if (tokens == 0) {\\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\\n        }\\n        return ERC20(tokenAddress).transfer(feeReceiver, tokens);\\n    }\\n\\n    function setFee(uint256 _buy, uint256 _sell) external onlyOwner {\\n        buyTax = _buy;\\n        sellTax = _sell;\\n    }\\n\\n    function setFeeReceiver(address _feeReceiver) external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"You are not allowed to set fee receiver\\\"\\n        );\\n\\n        feeReceiver = _feeReceiver;\\n    }\\n}\\n\",\"keccak256\":\"0x3937153cc3ab762c15a8fa4472c529f91e8606e221f925eb4a59adae85f54f3f\",\"license\":\"MIT\"}},\"version\":1}",
        "storageLayout": {
          "storage": [
            {
              "astId": 720,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:TimeCoin",
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)"
            },
            {
              "astId": 726,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:TimeCoin",
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
            },
            {
              "astId": 728,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:TimeCoin",
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256"
            },
            {
              "astId": 730,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:TimeCoin",
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage"
            },
            {
              "astId": 732,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:TimeCoin",
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage"
            },
            {
              "astId": 473,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:TimeCoin",
              "label": "_owner",
              "offset": 0,
              "slot": "5",
              "type": "t_address"
            },
            {
              "astId": 1222,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:TimeCoin",
              "label": "_name",
              "offset": 0,
              "slot": "6",
              "type": "t_string_storage"
            },
            {
              "astId": 1225,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:TimeCoin",
              "label": "_symbol",
              "offset": 0,
              "slot": "7",
              "type": "t_string_storage"
            },
            {
              "astId": 1227,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:TimeCoin",
              "label": "_totalSupply",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256"
            },
            {
              "astId": 1232,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:TimeCoin",
              "label": "buyTax",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256"
            },
            {
              "astId": 1234,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:TimeCoin",
              "label": "sellTax",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256"
            },
            {
              "astId": 1236,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:TimeCoin",
              "label": "buyLimit",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256"
            },
            {
              "astId": 1238,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:TimeCoin",
              "label": "sellLimit",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256"
            },
            {
              "astId": 1240,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:TimeCoin",
              "label": "transferLimit",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256"
            },
            {
              "astId": 1243,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:TimeCoin",
              "label": "nextTransactionTimeGap",
              "offset": 0,
              "slot": "14",
              "type": "t_uint256"
            },
            {
              "astId": 1245,
              "contract": "0x111111111-1717590038739-TimeCoin.sol:TimeCoin",
              "label": "feeReceiver",
              "offset": 0,
              "slot": "15",
              "type": "t_address"
            }
          ],
          "types": {
            "t_address": {
              "encoding": "inplace",
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32",
              "value": "t_mapping(t_address,t_uint256)"
            },
            "t_mapping(t_address,t_uint256)": {
              "encoding": "mapping",
              "key": "t_address",
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32",
              "value": "t_uint256"
            },
            "t_string_storage": {
              "encoding": "bytes",
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "encoding": "inplace",
              "label": "uint256",
              "numberOfBytes": "32"
            }
          }
        },
        "userdoc": {
          "kind": "user",
          "methods": {},
          "version": 1
        }
      }
    }
  },
  "sources": {
    "0x111111111-1717590038739-TimeCoin.sol": {
      "id": 0
    }
  },
  "abi": [],
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "evm": {
    "assembly": "    /* \"0x111111111-1717590038739-TimeCoin.sol\":59:6269  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"0x111111111-1717590038739-TimeCoin.sol\":59:6269  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220ddbbbdba49b170e744fabba09efc35b7e6ce9020565fc743853ffc9d753be98564736f6c634300081a0033\n}\n",
    "bytecode": {
      "functionDebugData": {},
      "generatedSources": [],
      "linkReferences": {},
      "opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD 0xBB 0xBD 0xBA BLOBHASH 0xB1 PUSH17 0xE744FABBA09EFC35B7E6CE9020565FC743 DUP6 EXTCODEHASH 0xFC SWAP14 PUSH22 0x3BE98564736F6C634300081A00330000000000000000 ",
      "sourceMap": "59:6210:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;59:6210:0;;;;;;;;;;;;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {},
      "generatedSources": [],
      "immutableReferences": {},
      "linkReferences": {},
      "opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDD 0xBB 0xBD 0xBA BLOBHASH 0xB1 PUSH17 0xE744FABBA09EFC35B7E6CE9020565FC743 DUP6 EXTCODEHASH 0xFC SWAP14 PUSH22 0x3BE98564736F6C634300081A00330000000000000000 ",
      "sourceMap": "59:6210:0:-:0;;;;;;;;"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "17000",
        "executionCost": "96",
        "totalCost": "17096"
      },
      "internal": {
        "add(uint256,uint256)": "infinite",
        "div(uint256,uint256)": "infinite",
        "div(uint256,uint256,string memory)": "infinite",
        "mod(uint256,uint256)": "infinite",
        "mod(uint256,uint256,string memory)": "infinite",
        "mul(uint256,uint256)": "infinite",
        "sub(uint256,uint256)": "infinite",
        "sub(uint256,uint256,string memory)": "infinite",
        "tryAdd(uint256,uint256)": "infinite",
        "tryDiv(uint256,uint256)": "infinite",
        "tryMod(uint256,uint256)": "infinite",
        "tryMul(uint256,uint256)": "infinite",
        "trySub(uint256,uint256)": "infinite"
      }
    },
    "legacyAssembly": {
      ".code": [
        {
          "begin": 59,
          "end": 6269,
          "name": "PUSH #[$]",
          "source": 0,
          "value": "0000000000000000000000000000000000000000000000000000000000000000"
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "PUSH [$]",
          "source": 0,
          "value": "0000000000000000000000000000000000000000000000000000000000000000"
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "PUSH",
          "source": 0,
          "value": "B"
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "DUP3",
          "source": 0
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "DUP3",
          "source": 0
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "DUP3",
          "source": 0
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "CODECOPY",
          "source": 0
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "DUP1",
          "source": 0
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "MLOAD",
          "source": 0
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "PUSH",
          "source": 0,
          "value": "0"
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "BYTE",
          "source": 0
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "PUSH",
          "source": 0,
          "value": "73"
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "EQ",
          "source": 0
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "PUSH [tag]",
          "source": 0,
          "value": "1"
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "JUMPI",
          "source": 0
        },
        {
          "begin": -1,
          "end": -1,
          "name": "PUSH",
          "source": -1,
          "value": "4E487B71"
        },
        {
          "begin": -1,
          "end": -1,
          "name": "PUSH",
          "source": -1,
          "value": "E0"
        },
        {
          "begin": -1,
          "end": -1,
          "name": "SHL",
          "source": -1
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "PUSH",
          "source": 0,
          "value": "0"
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "MSTORE",
          "source": 0
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "PUSH",
          "source": 0,
          "value": "0"
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "PUSH",
          "source": 0,
          "value": "4"
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "MSTORE",
          "source": 0
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "PUSH",
          "source": 0,
          "value": "24"
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "PUSH",
          "source": 0,
          "value": "0"
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "REVERT",
          "source": 0
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "tag",
          "source": 0,
          "value": "1"
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "JUMPDEST",
          "source": 0
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "ADDRESS",
          "source": 0
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "PUSH",
          "source": 0,
          "value": "0"
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "MSTORE",
          "source": 0
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "PUSH",
          "source": 0,
          "value": "73"
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "DUP2",
          "source": 0
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "MSTORE8",
          "source": 0
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "DUP3",
          "source": 0
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "DUP2",
          "source": 0
        },
        {
          "begin": 59,
          "end": 6269,
          "name": "RETURN",
          "source": 0
        }
      ],
      ".data": {
        "0": {
          ".auxdata": "a2646970667358221220ddbbbdba49b170e744fabba09efc35b7e6ce9020565fc743853ffc9d753be98564736f6c634300081a0033",
          ".code": [
            {
              "begin": 59,
              "end": 6269,
              "name": "PUSHDEPLOYADDRESS",
              "source": 0
            },
            {
              "begin": 59,
              "end": 6269,
              "name": "ADDRESS",
              "source": 0
            },
            {
              "begin": 59,
              "end": 6269,
              "name": "EQ",
              "source": 0
            },
            {
              "begin": 59,
              "end": 6269,
              "name": "PUSH",
              "source": 0,
              "value": "80"
            },
            {
              "begin": 59,
              "end": 6269,
              "name": "PUSH",
              "source": 0,
              "value": "40"
            },
            {
              "begin": 59,
              "end": 6269,
              "name": "MSTORE",
              "source": 0
            },
            {
              "begin": 59,
              "end": 6269,
              "name": "PUSH",
              "source": 0,
              "value": "0"
            },
            {
              "begin": 59,
              "end": 6269,
              "name": "DUP1",
              "source": 0
            },
            {
              "begin": 59,
              "end": 6269,
              "name": "REVERT",
              "source": 0
            }
          ]
        }
      },
      "sourceList": [
        "0x111111111-1717590038739-TimeCoin.sol",
        "#utility.yul"
      ]
    },
    "methodIdentifiers": {}
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"0x111111111-1717590038739-TimeCoin.sol\":\"SafeMath\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"0x111111111-1717590038739-TimeCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\\ncontract TimeCoin is ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    string private _name = \\\"Time Coin\\\";\\n    string private _symbol = \\\"TIME\\\";\\n    uint256 private _totalSupply;\\n\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n\\n    uint256 public buyTax;\\n    uint256 public sellTax;\\n\\n    uint256 public buyLimit;\\n    uint256 public sellLimit;\\n    uint256 public transferLimit;\\n\\n    uint256 public nextTransactionTimeGap = 2 minutes;\\n\\n    address public feeReceiver;\\n\\n    constructor() ERC20(_name, _symbol) Ownable(_msgSender()) {\\n        _totalSupply = 1000000 * 10**decimals();\\n\\n        _mint(_msgSender(), _totalSupply);\\n\\n        buyTax = 3;\\n        sellTax = 5;\\n\\n        buyLimit = 2;\\n        sellLimit = 5;\\n        transferLimit = 10;\\n\\n        feeReceiver = _msgSender();\\n    }\\n\\n    function isContract(address _addr) private view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    modifier limitProtect(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) {\\n        uint256 limit = transferLimit;\\n        string memory _type = \\\"transfer\\\";\\n\\n        if (isContract(sender)) {\\n            limit = buyLimit;\\n            _type = \\\"buy\\\";\\n        } else if (isContract(recipient)) {\\n            limit = sellLimit;\\n            _type = \\\"sell\\\";\\n        } else {\\n            limit = transferLimit;\\n            _type = \\\"transfer\\\";\\n        }\\n\\n        require(\\n            limit >= amount,\\n            string(\\n                abi.encode(\\n                    \\\"The transfer amount of \\\",\\n                    amount,\\n                    \\\" exceeds the allowed \\\",\\n                    _type,\\n                    \\\" limit. The maximum allowed amount is \\\",\\n                    limit\\n                )\\n            )\\n        );\\n\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function updateTransactionTimeLimit(uint256 _seconds) external onlyOwner {\\n        nextTransactionTimeGap = _seconds;\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        limitProtect(msg.sender, recipient, amount)\\n        returns (bool)\\n    {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n\\n        return _transferFrom(_msgSender(), recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(sender != address(0), \\\"Invalid sender\\\");\\n\\n        uint256 currentAllowance = allowance(sender, _msgSender());\\n        require(currentAllowance >= amount, \\\"Insufficient Allowance\\\");\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal limitProtect(sender, recipient, amount) returns (bool) {\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n\\n        uint256 amountReceived = takeFee(sender, amount);\\n        _transfer(sender, recipient, amountReceived);\\n\\n        return true;\\n    }\\n\\n    function takeFee(address sender, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 fee = sender == _msgSender() ? sellTax : buyTax;\\n\\n        uint256 feeAmount = amount.mul(fee).div(FEE_DENOMINATOR);\\n        uint256 transferable_amount = amount.sub(feeAmount);\\n\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n        _transfer(sender, feeReceiver, feeAmount);\\n\\n        return transferable_amount;\\n    }\\n\\n    function manualSend() external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n        payable(feeReceiver).transfer(address(this).balance);\\n    }\\n\\n    function clearStuckToken(address tokenAddress, uint256 tokens)\\n        external\\n        returns (bool success)\\n    {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n\\n        if (tokens == 0) {\\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\\n        }\\n        return ERC20(tokenAddress).transfer(feeReceiver, tokens);\\n    }\\n\\n    function setFee(uint256 _buy, uint256 _sell) external onlyOwner {\\n        buyTax = _buy;\\n        sellTax = _sell;\\n    }\\n\\n    function setFeeReceiver(address _feeReceiver) external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"You are not allowed to set fee receiver\\\"\\n        );\\n\\n        feeReceiver = _feeReceiver;\\n    }\\n}\\n\",\"keccak256\":\"0x3937153cc3ab762c15a8fa4472c529f91e8606e221f925eb4a59adae85f54f3f\",\"license\":\"MIT\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"0x111111111-1717590038739-TimeCoin.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\\ncontract TimeCoin is ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    string private _name = \\\"Time Coin\\\";\\n    string private _symbol = \\\"TIME\\\";\\n    uint256 private _totalSupply;\\n\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n\\n    uint256 public buyTax;\\n    uint256 public sellTax;\\n\\n    uint256 public buyLimit;\\n    uint256 public sellLimit;\\n    uint256 public transferLimit;\\n\\n    uint256 public nextTransactionTimeGap = 2 minutes;\\n\\n    address public feeReceiver;\\n\\n    constructor() ERC20(_name, _symbol) Ownable(_msgSender()) {\\n        _totalSupply = 1000000 * 10**decimals();\\n\\n        _mint(_msgSender(), _totalSupply);\\n\\n        buyTax = 3;\\n        sellTax = 5;\\n\\n        buyLimit = 2;\\n        sellLimit = 5;\\n        transferLimit = 10;\\n\\n        feeReceiver = _msgSender();\\n    }\\n\\n    function isContract(address _addr) private view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    modifier limitProtect(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) {\\n        uint256 limit = transferLimit;\\n        string memory _type = \\\"transfer\\\";\\n\\n        if (isContract(sender)) {\\n            limit = buyLimit;\\n            _type = \\\"buy\\\";\\n        } else if (isContract(recipient)) {\\n            limit = sellLimit;\\n            _type = \\\"sell\\\";\\n        } else {\\n            limit = transferLimit;\\n            _type = \\\"transfer\\\";\\n        }\\n\\n        require(\\n            limit >= amount,\\n            string(\\n                abi.encode(\\n                    \\\"The transfer amount of \\\",\\n                    amount,\\n                    \\\" exceeds the allowed \\\",\\n                    _type,\\n                    \\\" limit. The maximum allowed amount is \\\",\\n                    limit\\n                )\\n            )\\n        );\\n\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function updateTransactionTimeLimit(uint256 _seconds) external onlyOwner {\\n        nextTransactionTimeGap = _seconds;\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        limitProtect(msg.sender, recipient, amount)\\n        returns (bool)\\n    {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n\\n        return _transferFrom(_msgSender(), recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        require(amount > 0, \\\"Invalid amount\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(sender != address(0), \\\"Invalid sender\\\");\\n\\n        uint256 currentAllowance = allowance(sender, _msgSender());\\n        require(currentAllowance >= amount, \\\"Insufficient Allowance\\\");\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal limitProtect(sender, recipient, amount) returns (bool) {\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n\\n        uint256 amountReceived = takeFee(sender, amount);\\n        _transfer(sender, recipient, amountReceived);\\n\\n        return true;\\n    }\\n\\n    function takeFee(address sender, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 fee = sender == _msgSender() ? sellTax : buyTax;\\n\\n        uint256 feeAmount = amount.mul(fee).div(FEE_DENOMINATOR);\\n        uint256 transferable_amount = amount.sub(feeAmount);\\n\\n        uint256 senderBalance = balanceOf(sender);\\n        require(senderBalance >= amount, \\\"Insufficient Balance\\\");\\n        _transfer(sender, feeReceiver, feeAmount);\\n\\n        return transferable_amount;\\n    }\\n\\n    function manualSend() external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n        payable(feeReceiver).transfer(address(this).balance);\\n    }\\n\\n    function clearStuckToken(address tokenAddress, uint256 tokens)\\n        external\\n        returns (bool success)\\n    {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"only fee receiver can transfer funds\\\"\\n        );\\n\\n        if (tokens == 0) {\\n            tokens = ERC20(tokenAddress).balanceOf(address(this));\\n        }\\n        return ERC20(tokenAddress).transfer(feeReceiver, tokens);\\n    }\\n\\n    function setFee(uint256 _buy, uint256 _sell) external onlyOwner {\\n        buyTax = _buy;\\n        sellTax = _sell;\\n    }\\n\\n    function setFeeReceiver(address _feeReceiver) external {\\n        require(\\n            _msgSender() == feeReceiver,\\n            \\\"You are not allowed to set fee receiver\\\"\\n        );\\n\\n        feeReceiver = _feeReceiver;\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"*\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}"
}